/*
 * xeogl V1.0.0
 *
 * A WebGL-based 3D visualization engine from xeoLabs
 * https://xeogl.org/
 *
 * Built on 2016-12-02
 *
 * MIT License
 * Copyright 2016, Lindsay Kay
 * https://xeolabs.com/
 *
 */

/**
 The xeogl namespace.

 @class xeogl
 @main xeogl
 @static
 @author xeolabs / https://xeolabs.com/
 */
(function () {

    "use strict";

    var xeogl = function () {

        /**
         * Semantic version number. The value for this is set by an expression that's concatenated to
         * the end of the built binary by the xeogl build script.
         * @property version
         * @namespace xeogl
         * @type {String}
         */
        this.version = null;

        /**
         * Information about available WebGL support
         */
        this.WEBGL_INFO = (function () {
            var info = {
                WEBGL: false
            };

            var canvas = document.createElement("canvas");

            if (!canvas) {
                return info;
            }

            var gl = canvas.getContext("webgl", {antialias: true}) || canvas.getContext("experimental-webgl", {antialias: true});

            info.WEBGL = !!gl;

            if (!info.WEBGL) {
                return info;
            }

            info.ANTIALIAS = gl.getContextAttributes().antialias;

            if (gl.getShaderPrecisionFormat) {
                if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
                    info.FS_MAX_FLOAT_PRECISION = "highp";
                } else if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
                    info.FS_MAX_FLOAT_PRECISION = "mediump";
                } else {
                    info.FS_MAX_FLOAT_PRECISION = "lowp";
                }
            } else {
                info.FS_MAX_FLOAT_PRECISION = "mediump";
            }

            info.DEPTH_BUFFER_BITS = gl.getParameter(gl.DEPTH_BITS);
            info.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            info.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
            info.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
            info.MAX_TEXTURE_UNITS = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
            info.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
            info.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
            info.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
            info.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);

            info.SUPPORTED_EXTENSIONS = {};

            gl.getSupportedExtensions().forEach(function (ext) {
                info.SUPPORTED_EXTENSIONS[ext] = true;
            });

            return info;
        })();

        /**
         * Tracks statistics within xeogl, such as numbers of
         * scenes, textures, geometries etc.
         * @final
         * @property stats
         * @type {*}
         */
        this.stats = {
            build: {
                version: xeogl.version
            },
            client: {
                browser: (navigator && navigator.userAgent) ? navigator.userAgent : "n/a"
            },

            // TODO: replace 'canvas' with 'pixels'
            //canvas: {
            //    width: 0,
            //    height: 0
            //},
            components: {
                scenes: 0,
                entities: 0
            },
            memory: {

                // Note that these counts will include any positions, colors,
                // normals and indices that xeogl internally creates on-demand
                // to support color-index triangle picking.

                meshes: 0,
                positions: 0,
                colors: 0,
                normals: 0,
                tangents: 0,
                uvs: 0,
                indices: 0,
                textures: 0,
                programs: 0
            },
            frame: {
                frameCount: 0,
                fps: 0,
                useProgram: 0,
                bindTexture: 0,
                bindArray: 0,
                drawElements: 0,
                tasksRun: 0,
                tasksScheduled: 0
            }
        };

        // Ensures unique scene IDs
        // Lazy-instantiated because its class is on the
        // namespace of this object, and so won't be defined yet
        this._sceneIDMap = null;

        // Default singleton Scene, lazy-initialized in getter
        this._scene = null;

        /**
         * Existing {{#crossLink "Scene"}}Scene{{/crossLink}}s , mapped to their IDs
         * @property scenes
         * @namespace xeogl
         * @type {{String:xeogl.Scene}}
         */
        this.scenes = {};

        // Used for throttling FPS for each Scene
        this._scenesRenderInfo = {};

        /**
         * For each component type, a list of its supertypes, ordered upwards in the hierarchy.
         * @type {{}}
         * @private
         */
        this._superTypes = {};

        // Task queue, which is pumped on each frame;
        // tasks are pushed to it with calls to xeogl.schedule

        this._taskQueue = [];

        //-----------------------------------------------------------------------
        // Game loop
        //
        // https://developer.mozilla.org/en-US/docs/Games/Anatomy
        //
        // https://gameprogrammingpatterns.com/game-loop.html
        //-----------------------------------------------------------------------

        var self = this;

        (function () {

            var tickEvent = {
                sceneId: null,
                time: null,
                startTime: null,
                prevTime: null,
                deltaTime: null
            };

            // Hoisted vars

            var taskBudget = 10; // Millisecs we're allowed to spend on tasks in each frame
            var frameTime;
            var lastFrameTime = 0;
            var elapsedFrameTime;
            var newFPS;
            var fpsSamples = [];
            var numFPSSamples = 30;
            var totalFPS = 0;
            var updateTime;
            var id;
            var scene;

            var frame = function () {

                frameTime = Date.now();

                // Moving average of FPS

                if (lastFrameTime > 0) {
                    elapsedFrameTime = frameTime - lastFrameTime;
                    newFPS = 1000 / elapsedFrameTime;
                    totalFPS += newFPS;
                    fpsSamples.push(newFPS);
                    if (fpsSamples.length >= numFPSSamples) {
                        totalFPS -= fpsSamples.shift();
                    }
                    self.stats.frame.fps = Math.round(totalFPS / fpsSamples.length);

                }

                update();

                render();

                lastFrameTime = frameTime;

                window.requestAnimationFrame(frame);
            };


            function update() {

                updateTime = Date.now();

                // Process as many enqueued tasks as we can
                // within the per-frame task budget

                var tasksRun = self._runScheduledTasks(updateTime + taskBudget);
                var tasksScheduled = self._taskQueue.length;

                self.stats.frame.tasksRun = tasksRun;
                self.stats.frame.tasksScheduled = tasksScheduled;
                self.stats.frame.tasksBudget = taskBudget;

                tickEvent.time = updateTime;

                // Fire a "tick" event at the scene, which will in turn cause
                // all sorts of scene components to schedule more tasks

                for (id in self.scenes) {
                    if (self.scenes.hasOwnProperty(id)) {

                        scene = self.scenes[id];

                        // Fire the tick event at the scene

                        tickEvent.sceneId = id;
                        tickEvent.startTime = scene.startTime;
                        tickEvent.deltaTime = tickEvent.prevTime != null ? tickEvent.time - tickEvent.prevTime : 0;

                        /**
                         * Fired on each game loop iteration.
                         *
                         * @event tick
                         * @param {String} sceneID The ID of this Scene.
                         * @param {Number} startTime The time in seconds since 1970 that this Scene was instantiated.
                         * @param {Number} time The time in seconds since 1970 of this "tick" event.
                         * @param {Number} prevTime The time of the previous "tick" event from this Scene.
                         * @param {Number} deltaTime The time in seconds since the previous "tick" event from this Scene.
                         */
                        scene.fire("tick", tickEvent, true);
                    }
                }

                tickEvent.prevTime = updateTime;
            }

            function render() {

                var scenes = self.scenes;
                var scenesRenderInfo = self._scenesRenderInfo;
                var scene;
                var renderInfo;
                var ticksPerRender;

                var forceRender = false;
                for (id in scenes) {
                    if (scenes.hasOwnProperty(id)) {

                        scene = scenes[id];
                        renderInfo = scenesRenderInfo[id];

                        ticksPerRender = scene.ticksPerRender;

                        if (renderInfo.ticksPerRender !== ticksPerRender) {
                            renderInfo.ticksPerRender = ticksPerRender;
                            renderInfo.renderCountdown = ticksPerRender;
                        }

                        if (--renderInfo.renderCountdown === 0) {
                            scene.render(forceRender);
                            renderInfo.renderCountdown = ticksPerRender;
                        }
                    }
                }
            }

            window.requestAnimationFrame(frame);

        })();
    };

    xeogl.prototype = {

        constructor: xeogl,

        /**
         The default {{#crossLink "Scene"}}Scene{{/crossLink}}.

         Components created without an explicit parent {{#crossLink "Scene"}}Scene{{/crossLink}} will be created within this
         {{#crossLink "Scene"}}Scene{{/crossLink}} by default.

         xeogl creates the default {{#crossLink "Scene"}}Scene{{/crossLink}} as soon as you either
         reference this property for the first time, or create your first {{#crossLink "Entity"}}Entity{{/crossLink}} without
         a specified {{#crossLink "Scene"}}Scene{{/crossLink}}.

         @property scene
         @namespace xeogl
         @final
         @type Scene
         */
        get scene() {

            // xeogl.Scene constructor will call this._addScene
            // to register itself on xeogl

            return this._scene || (this._scene = new window.xeogl.Scene({
                    id: "default.scene"
                }));
        },

        /**
         * Registers a scene on xeogl.
         * This is called within the xeogl.Scene constructor.
         *
         * @method _addScene
         * @param {Scene} scene The scene
         * @private
         */
        _addScene: function (scene) {

            this._sceneIDMap = this._sceneIDMap || new window.xeogl.utils.Map();

            if (scene.id) {

                // User-supplied ID

                if (this.scenes[scene.id]) {
                    console.error("[ERROR] Scene " + xeogl._inQuotes(scene.id) + " already exists");
                    return;
                }

            } else {

                // Auto-generated ID

                scene.id = this._sceneIDMap.addItem(scene);
            }

            this.scenes[scene.id] = scene;

            var ticksPerRender = scene.ticksPerRender;

            this._scenesRenderInfo[scene.id] = {
                ticksPerRender: ticksPerRender,
                renderCountdown: ticksPerRender
            };

            this.stats.components.scenes++;

            var self = this;

            // Unregister destroyed scenes

            scene.on("destroyed",
                function () {

                    self._sceneIDMap.removeItem(scene.id);

                    delete self.scenes[scene.id];
                    delete self._scenesRenderInfo[scene.id];

                    self.stats.components.scenes--;
                });
        },

        /**
         * Schedule a task for xeogl to run at the next frame.
         *
         * Internally, this pushes the task to a FIFO queue. Within each frame interval, xeogl processes the queue
         * for a certain period of time, popping tasks and running them. After each frame interval, tasks that did not
         * get a chance to run during the task are left in the queue to be run next time.
         *
         * @method schedule
         * @param {Function} callback Callback that runs the task.
         * @param {Object} [scope] Scope for the callback.
         */
        scheduleTask: function (callback, scope) {
            this._taskQueue.push(callback);
            this._taskQueue.push(scope);
        },

        deferTask: function (callback, scope) {
            if (scope) {
                callback.call(scope);
            } else {
                callback();
            }
        },

        // Pops and propcesses tasks in the queue, until the
        // given number of milliseconds has elapsed.
        _runScheduledTasks: function (until) {

            var time = (new Date()).getTime();
            var taskQueue = this._taskQueue;
            var callback;
            var scope;
            var tasksRun = 0;

            while (taskQueue.length > 0 && time < until) {
                callback = taskQueue.shift();
                scope = taskQueue.shift();
                if (scope) {
                    callback.call(scope);
                } else {
                    callback();
                }
                time = (new Date()).getTime();
                tasksRun++;
            }

            return tasksRun;
        },

        /**
         * Destroys all user-created {{#crossLink "Scene"}}Scenes{{/crossLink}} and
         * clears the default {{#crossLink "Scene"}}Scene{{/crossLink}}.
         *
         * @method clear
         * @demo foo
         */
        clear: function () {

            var scene;

            for (var id in this.scenes) {
                if (this.scenes.hasOwnProperty(id)) {

                    scene = this.scenes[id];

                    // Only clear the default Scene
                    // but destroy all the others

                    if (id === "default.scene") {
                        scene.clear();
                    } else {
                        scene.destroy();
                    }
                }
            }
            this.scenes = {};
        },

        /**
         * Tests if the given object is an array
         * @private
         */
        _isArray: function (testEntity) {
            return testEntity && !(testEntity.propertyIsEnumerable('length')) && typeof testEntity === 'object' && typeof testEntity.length === 'number';
        },

        /**
         * Tests if the given value is a string
         * @param value
         * @returns {boolean}
         * @private
         */
        _isString: function (value) {
            return (typeof value === 'string' || value instanceof String);
        },

        /**
         * Tests if the given value is a number
         * @param value
         * @returns {boolean}
         * @private
         */
        _isNumeric: function (value) {
            return !isNaN(parseFloat(value)) && isFinite(value);
        },

        /**
         * Tests if the given value is an ID
         * @param value
         * @returns {boolean}
         * @private
         */
        _isID: function (value) {
            return xeogl._isString(value) || xeogl._isNumeric(value);
        },

        /**
         * Tests if the given components are the same, where the components can be either IDs or instances.
         * @param c1
         * @param c2
         * @returns {boolean}
         * @private
         */
        _isSameComponent: function (c1, c2) {

            if (!c1 || !c2) {
                return false;
            }

            var id1 = (xeogl.prototype._isNumeric(c1) || xeogl.prototype._isString(c1)) ? "" + c1 : c1.id;
            var id2 = (xeogl.prototype._isNumeric(c2) || xeogl.prototype._isString(c2)) ? "" + c2 : c2.id;

            return id1 === id2;
        },

        /**
         * Tests if the given value is a function
         * @param value
         * @returns {boolean}
         * @private
         */
        _isFunction: function (value) {
            return (typeof value === "function");
        },

        /**
         * Tests if the given value is a JavaScript JSON object, eg, ````{ foo: "bar" }````.
         * @param value
         * @returns {boolean}
         * @private
         */
        _isObject: (function () {
            var objectConstructor = {}.constructor;
            return function (value) {
                return (!!value && value.constructor === objectConstructor);
            };
        })(),

        /**
         * Tests if the given component type is a subtype of another component supertype.
         * @param {String} type
         * @param {String} [superType="xeogl.Component"]
         * @returns {boolean}
         * @private
         */
        _isComponentType: function (type, superType) {

            superType = superType || "xeogl.Component";

            if (type === superType) {
                return true;
            }

            var superTypes = this._superTypes[type];

            if (!superTypes) {
                return false;
            }

            for (var i = superTypes.length - 1; i >= 0; i--) {
                if (superTypes[i] === superType) {
                    return true;
                }
            }

            return false;
        },

        /** Returns a shallow copy
         */
        _copy: function (o) {
            return this._apply(o, {});
        },

        /** Add properties of o to o2, overwriting them on o2 if already there
         */
        _apply: function (o, o2) {
            for (var name in o) {
                if (o.hasOwnProperty(name)) {
                    o2[name] = o[name];
                }
            }
            return o2;
        },

        /**
         * Add non-null/defined properties of o to o2
         * @private
         */
        _apply2: function (o, o2) {
            for (var name in o) {
                if (o.hasOwnProperty(name)) {
                    if (o[name] !== undefined && o[name] !== null) {
                        o2[name] = o[name];
                    }
                }
            }
            return o2;
        },

        /**
         * Add properties of o to o2 where undefined or null on o2
         * @private
         */
        _applyIf: function (o, o2) {
            for (var name in o) {
                if (o.hasOwnProperty(name)) {
                    if (o2[name] === undefined || o2[name] === null) {
                        o2[name] = o[name];
                    }
                }
            }
            return o2;
        },

        /**
         * Returns true if the given map is empty.
         * @param obj
         * @returns {boolean}
         * @private
         */
        _isEmptyObject: function (obj) {
            for (var name in obj) {
                if (obj.hasOwnProperty(name)) {
                    return false;
                }
            }
            return true;
        },

        /**
         * Returns the given ID as a string, in quotes if the ID was a string to begin with.
         *
         * This is useful for logging IDs.
         *
         * @param {Number| String} id The ID
         * @returns {String}
         * @private
         */
        _inQuotes: function (id) {
            return this._isNumeric(id) ? ("" + id) : ("'" + id + "'");
        }
    };

    // Have a lower-case xeogl namespace as well,
    // just because it's easier to type when live-coding

    window.xeogl = window.xeogl = new xeogl();

})
();
;/*
 * Canvas2Image v0.1
 * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com
 * MIT License [https://www.opensource.org/licenses/mit-license.php]
 */

var Canvas2Image = (function () {
    // check if we have canvas support
    var oCanvas = document.createElement("canvas"),
        sc = String.fromCharCode,
        strDownloadMime = "image/octet-stream",
        bReplaceDownloadMime = false;

    // no canvas, bail out.
    if (!oCanvas.getContext) {
        return {
            saveAsBMP: function () {
            },
            saveAsPNG: function () {
            },
            saveAsJPEG: function () {
            }
        }
    }

    var bHasImageData = !!(oCanvas.getContext("2d").getImageData),
        bHasDataURL = !!(oCanvas.toDataURL),
        bHasBase64 = !!(window.btoa);

    // ok, we're good
    var readCanvasData = function (oCanvas) {
        var iWidth = parseInt(oCanvas.width),
            iHeight = parseInt(oCanvas.height);
        return oCanvas.getContext("2d").getImageData(0, 0, iWidth, iHeight);
    };

    // base64 encodes either a string or an array of charcodes
    var encodeData = function (data) {
        var i, aData, strData = "";

        if (typeof data == "string") {
            strData = data;
        } else {
            aData = data;
            for (i = 0; i < aData.length; i++) {
                strData += sc(aData[i]);
            }
        }
        return btoa(strData);
    };

    // creates a base64 encoded string containing BMP data takes an imagedata object as argument
    var createBMP = function (oData) {
        var strHeader = '',
            iWidth = oData.width,
            iHeight = oData.height;

        strHeader += 'BM';

        var iFileSize = iWidth * iHeight * 4 + 54; // total header size = 54 bytes
        strHeader += sc(iFileSize % 256);
        iFileSize = Math.floor(iFileSize / 256);
        strHeader += sc(iFileSize % 256);
        iFileSize = Math.floor(iFileSize / 256);
        strHeader += sc(iFileSize % 256);
        iFileSize = Math.floor(iFileSize / 256);
        strHeader += sc(iFileSize % 256);

        strHeader += sc(0, 0, 0, 0, 54, 0, 0, 0); // data offset
        strHeader += sc(40, 0, 0, 0); // info header size

        var iImageWidth = iWidth;
        strHeader += sc(iImageWidth % 256);
        iImageWidth = Math.floor(iImageWidth / 256);
        strHeader += sc(iImageWidth % 256);
        iImageWidth = Math.floor(iImageWidth / 256);
        strHeader += sc(iImageWidth % 256);
        iImageWidth = Math.floor(iImageWidth / 256);
        strHeader += sc(iImageWidth % 256);

        var iImageHeight = iHeight;
        strHeader += sc(iImageHeight % 256);
        iImageHeight = Math.floor(iImageHeight / 256);
        strHeader += sc(iImageHeight % 256);
        iImageHeight = Math.floor(iImageHeight / 256);
        strHeader += sc(iImageHeight % 256);
        iImageHeight = Math.floor(iImageHeight / 256);
        strHeader += sc(iImageHeight % 256);

        strHeader += sc(1, 0, 32, 0); // num of planes & num of bits per pixel
        strHeader += sc(0, 0, 0, 0); // compression = none

        var iDataSize = iWidth * iHeight * 4;
        strHeader += sc(iDataSize % 256);
        iDataSize = Math.floor(iDataSize / 256);
        strHeader += sc(iDataSize % 256);
        iDataSize = Math.floor(iDataSize / 256);
        strHeader += sc(iDataSize % 256);
        iDataSize = Math.floor(iDataSize / 256);
        strHeader += sc(iDataSize % 256);

        strHeader += sc(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // these bytes are not used

        var aImgData = oData.data,
            strPixelData = "",
            c, x, y = iHeight,
            iOffsetX, iOffsetY, strPixelRow;

        do {
            iOffsetY = iWidth * (y - 1) * 4;
            strPixelRow = "";
            for (x = 0; x < iWidth; x++) {
                iOffsetX = 4 * x;
                strPixelRow += sc(
                    aImgData[iOffsetY + iOffsetX + 2], // B
                    aImgData[iOffsetY + iOffsetX + 1], // G
                    aImgData[iOffsetY + iOffsetX],     // R
                    aImgData[iOffsetY + iOffsetX + 3]  // A
                );
            }
            strPixelData += strPixelRow;
        } while (--y);

        return encodeData(strHeader + strPixelData);
    };

    // sends the generated file to the client
    var saveFile = function (strData) {
        if (!window.open(strData)) {
            document.location.href = strData;
        }
    };

    var makeDataURI = function (strData, strMime) {
        return "data:" + strMime + ";base64," + strData;
    };

    // generates a <img> object containing the imagedata
    var makeImageObject = function (strSource) {
        var oImgElement = document.createElement("img");
        oImgElement.src = strSource;
        return oImgElement;
    };

    var scaleCanvas = function (oCanvas, iWidth, iHeight) {
        if (iWidth && iHeight) {
            var oSaveCanvas = document.createElement("canvas");

            oSaveCanvas.width = iWidth;
            oSaveCanvas.height = iHeight;
            oSaveCanvas.style.width = iWidth + "px";
            oSaveCanvas.style.height = iHeight + "px";

            var oSaveCtx = oSaveCanvas.getContext("2d");

            oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, iWidth);

            return oSaveCanvas;
        }
        return oCanvas;
    };

    return {
        saveAsPNG: function (oCanvas, bReturnImg, iWidth, iHeight) {
            if (!bHasDataURL) return false;

            var oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight),
                strMime = "image/png",
                strData = oScaledCanvas.toDataURL(strMime);

            if (bReturnImg) {
                return makeImageObject(strData);
            } else {
                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);
            }
            return true;
        },

        saveAsJPEG: function (oCanvas, bReturnImg, iWidth, iHeight) {
            if (!bHasDataURL) return false;

            var oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight),
                strMime = "image/jpeg",
                strData = oScaledCanvas.toDataURL(strMime);

            // check if browser actually supports jpeg by looking for the mime type in the data uri. if not, return false
            if (strData.indexOf(strMime) != 5) return false;

            if (bReturnImg) {
                return makeImageObject(strData);
            } else {
                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);
            }
            return true;
        },

        saveAsBMP: function (oCanvas, bReturnImg, iWidth, iHeight) {
            if (!(bHasDataURL && bHasImageData && bHasBase64)) return false;

            var oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight),
                strMime = "image/bmp",
                oData = readCanvasData(oScaledCanvas),
                strImgData = createBMP(oData);

            if (bReturnImg) {
                return makeImageObject(makeDataURI(strImgData, strMime));
            } else {
                saveFile(makeDataURI(strImgData, strMime));
            }
            return true;
        }
    };
})();;/*
 Based on Simple JavaScript Inheritance
 By John Resig https://ejohn.org/
 MIT Licensed.
 */
// Inspired by base2 and Prototype
(function () {

    var initializing = false;

    var fnTest = /xyz/.test(function () {
        xyz;
    }) ? /\b_super\b/ : /.*/;

    // The base Class implementation (does nothing)
    this.Class = function () {
    };

    // Create a new Class that inherits from this class
    Class.extend = function (prop) {

        var _super = this.prototype;

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for (var name in prop) {

            //
            if (name === "_props") {
                var props = prop[name];
                var descriptor;
                for (var key in props) {
                    descriptor = props[key];

                    // If no setter is provided, then the property
                    // is strictly read-only. Insert a dummy setter
                    // to log a warning.

                    if (!descriptor.set) {
                        (function () {

                            var name = key;

                            descriptor.set = function () {
                                this.warn("Property '" + name + "' is read-only, ignoring assignment");
                            };
                        })();
                    }


                    // Want property to show up in inspectors
                    descriptor.enumerable = true;

                    Object.defineProperty(prototype, key, descriptor);
                }
                continue;
            }

            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] === "function" && typeof _super[name] === "function" && fnTest.test(prop[name]) ?
                (function (name, fn) {
                    return function () {
                        var tmp = this._super;

                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this._super = _super[name];

                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, prop[name]) : prop[name];
        }

        // Create array of type names to indicate inheritance chain,
        // to support "isType" queries on components
        prototype.superTypes = _super.superTypes ? _super.superTypes.concat(_super.type) : [];

        if (!prop.type) {
            prop.type = _super.type + "_" + createUUID();
        } else {
            xeogl._superTypes[prop.type] = prototype.superTypes;
        }

        // The dummy class constructor
        function Class() {

            // All construction is actually done in the init method
            if (!initializing && this.__init)
                this.__init.apply(this, arguments);
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;

        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;

        // And make this class extendable
        Class.extend = arguments.callee;

        window[prop.type] = Class;

        return Class;
    };

    /**
     * Returns a new UUID.
     * @method createUUID
     * @static
     * @return string The new UUID
     */
    var createUUID = (function () {
        // https://www.broofa.com/Tools/Math.uuid.htm
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
        var uuid = new Array(36);
        var rnd = 0, r;
        return function () {
            for (var i = 0; i < 36; i++) {
                if (i === 8 || i === 13 || i === 18 || i === 23) {
                    uuid[i] = '-';
                } else if (i === 14) {
                    uuid[i] = '4';
                } else {
                    if (rnd <= 0x02) {
                        rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
                    }
                    r = rnd & 0xf;
                    rnd = rnd >> 4;
                    uuid[i] = chars[( i === 19 ) ? ( r & 0x3 ) | 0x8 : r];
                }
            }
            return uuid.join('');
        };
    })();
})();

;(function () {

    "use strict";

    xeogl.utils = xeogl.utils || {};

    /**
     * Generic map of IDs to items - can generate own IDs or accept given IDs. IDs should be strings in order to not
     * clash with internally generated IDs, which are numbers.
     */
    xeogl.utils.Map = function (items, baseId) {

        /**
         * Items in this map
         */
        this.items = items || [];

        baseId = baseId || 0;
        var lastUniqueId = baseId + 1;

        /**
         * Adds an item to the map and returns the ID of the item in the map. If an ID is given, the item is
         * mapped to that ID. Otherwise, the map automatically generates the ID and maps to that.
         *
         * id = myMap.addItem("foo") // ID internally generated
         *
         * id = myMap.addItem("foo", "bar") // ID is "foo"
         *
         */
        this.addItem = function () {
            var item;
            if (arguments.length === 2) {
                var id = arguments[0];
                item = arguments[1];
                if (this.items[id]) { // Won't happen if given ID is string
                    throw "ID clash: '" + id + "'";
                }
                this.items[id] = item;
                return id;

            } else {
                while (true) {
                    item = arguments[0] || {};
                      var findId = lastUniqueId++;
                    if (!this.items[findId]) {
                        this.items[findId] = item;
                        return findId;
                    }
                }
            }
        };

        /**
         * Removes the item of the given ID from the map and returns it
         */
        this.removeItem = function (id) {
            var item = this.items[id];
            delete this.items[id];
            return item;
        };
    };

})();
;/**
 * Math utilities.
 *
 * @module xeogl
 * @submodule math
 */;(function () {

    "use strict";

    // Some temporary vars to help avoid garbage collection

    var tempMat1 = new Float32Array(16);
    var tempMat2 = new Float32Array(16);

    var tempVec4 = new Float32Array(4);

    /**
     * This utility object provides math functions that are used within xeogl. These functions are also part of xeogl's
     * public API and are therefore available for you to use within your application code.
     * @module xeogl
     * @submodule math
     * @class math
     * @static
     */
    var math = xeogl.math = {

        /**
         * The number of radiians in a degree (0.0174532925).
         * @property DEGTORAD
         * @namespace xeogl.math
         * @type {Number}
         */
        DEGTORAD: 0.0174532925,

        /**
         * Returns a new, uninitialized two-element vector.
         * @method vec2
         * @param [values] Initial values.
         * @static
         * @returns {Float32Array}
         */
        vec2: function (values) {
            return new Float32Array(values || 2);
        },

        /**
         * Returns a new, uninitialized three-element vector.
         * @method vec3
         * @param [values] Initial values.
         * @static
         * @returns {Float32Array}
         */
        vec3: function (values) {
            return new Float32Array(values || 3);
        },

        /**
         * Returns a new, uninitialized four-element vector.
         * @method vec4
         * @param [values] Initial values.
         * @static
         * @returns {Float32Array}
         */
        vec4: function (values) {
            return new Float32Array(values || 4);
        },

        /**
         * Returns a new, uninitialized 3x3 matrix.
         * @method mat3
         * @param [values] Initial values.
         * @static
         * @returns {Float32Array}
         */
        mat3: function (values) {
            return new Float32Array(values || 9);
        },

        /**
         * Converts a 3x3 matrix to 4x4
         * @method mat3ToMat4
         * @param mat3 3x3 matrix.
         * @param mat4 4x4 matrix
         * @static
         * @returns {Float32Array}
         */
        mat3ToMat4: function (mat3, mat4) { // TODO
            //return new Float32Array(values || 9);
        },

        /**
         * Returns a new, uninitialized 4x4 matrix.
         * @method mat4
         * @param [values] Initial values.
         * @static
         * @returns {Float32Array}
         */
        mat4: function (values) {
            return new Float32Array(values || 16);
        },

        /**
         * Converts a 4x4 matrix to 3x3
         * @method mat4ToMat3
         * @param mat4 4x4 matrix.
         * @param mat3 3x3 matrix
         * @static
         * @returns {Float32Array}
         */
        mat4ToMat3: function (mat4, mat3) { // TODO
            //return new Float32Array(values || 9);
        },

        /**
         * Returns a new UUID.
         * @method createUUID
         * @static
         * @return string The new UUID
         */
        createUUID: function () {
            // https://www.broofa.com/Tools/Math.uuid.htm
            var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
            var uuid = new Array(36);
            var rnd = 0, r;
            return function () {
                for (var i = 0; i < 36; i++) {
                    if (i === 8 || i === 13 || i === 18 || i === 23) {
                        uuid[i] = '-';
                    } else if (i === 14) {
                        uuid[i] = '4';
                    } else {
                        if (rnd <= 0x02) {
                            rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
                        }
                        r = rnd & 0xf;
                        rnd = rnd >> 4;
                        uuid[i] = chars[( i === 19 ) ? ( r & 0x3 ) | 0x8 : r];
                    }
                }
                return uuid.join('');
            };
        }(),

        /**
         * Clamps a value to the given range.
         * @param {Number} value Value to clamp.
         * @param {Number} min Lower bound.
         * @param {Number} max Upper bound.
         * @returns {Number} Clamped result.
         */
        clamp: function (value, min, max) {
            return Math.max(min, Math.min(max, value));
        },

        /**
         * Floating-point modulus
         * @method fmod
         * @static
         * @param {Number} a
         * @param {Number} b
         * @returns {*}
         */
        fmod: function (a, b) {
            if (a < b) {
                console.error("xeogl.math.fmod : Attempting to find modulus within negative range - would be infinite loop - ignoring");
                return a;
            }
            while (b <= a) {
                a -= b;
            }
            return a;
        },

        /**
         * Negates a four-element vector.
         * @method negateVec4
         * @static
         * @param {Array(Number)} v Vector to negate
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        negateVec4: function (v, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = -v[0];
            dest[1] = -v[1];
            dest[2] = -v[2];
            dest[3] = -v[3];
            return dest;
        },

        /**
         * Adds one four-element vector to another.
         * @method addVec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        addVec4: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] + v[0];
            dest[1] = u[1] + v[1];
            dest[2] = u[2] + v[2];
            dest[3] = u[3] + v[3];
            return dest;
        },

        /**
         * Adds a scalar value to each element of a four-element vector.
         * @method addVec4Scalar
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        addVec4Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] + s;
            dest[1] = v[1] + s;
            dest[2] = v[2] + s;
            dest[3] = v[3] + s;
            return dest;
        },

        /**
         * Adds one three-element vector to another.
         * @method addVec3
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        addVec3: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] + v[0];
            dest[1] = u[1] + v[1];
            dest[2] = u[2] + v[2];
            return dest;
        },

        /**
         * Adds a scalar value to each element of a three-element vector.
         * @method addVec4Scalar
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        addVec3Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] + s;
            dest[1] = v[1] + s;
            dest[2] = v[2] + s;
            return dest;
        },

        /**
         * Subtracts one four-element vector from another.
         * @method subVec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Vector to subtract
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        subVec4: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] - v[0];
            dest[1] = u[1] - v[1];
            dest[2] = u[2] - v[2];
            dest[3] = u[3] - v[3];
            return dest;
        },

        /**
         * Subtracts one three-element vector from another.
         * @method subVec3
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Vector to subtract
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        subVec3: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] - v[0];
            dest[1] = u[1] - v[1];
            dest[2] = u[2] - v[2];
            return dest;
        },

        /**
         * Subtracts one two-element vector from another.
         * @method subVec2
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Vector to subtract
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        subVec2: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] - v[0];
            dest[1] = u[1] - v[1];
            return dest;
        },

        /**
         * Subtracts a scalar value from each element of a four-element vector.
         * @method subVec4Scalar
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        subVec4Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] - s;
            dest[1] = v[1] - s;
            dest[2] = v[2] - s;
            dest[3] = v[3] - s;
            return dest;
        },

        /**
         * Sets each element of a 4-element vector to a scalar value minus the value of that element.
         * @method subScalarVec4
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        subScalarVec4: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = s - v[0];
            dest[1] = s - v[1];
            dest[2] = s - v[2];
            dest[3] = s - v[3];
            return dest;
        },

        /**
         * Multiplies one three-element vector by another.
         * @method mulVec3
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        mulVec4: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] * v[0];
            dest[1] = u[1] * v[1];
            dest[2] = u[2] * v[2];
            dest[3] = u[3] * v[3];
            return dest;
        },

        /**
         * Multiplies each element of a four-element vector by a scalar.
         * @method mulVec34calar
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        mulVec4Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] * s;
            dest[1] = v[1] * s;
            dest[2] = v[2] * s;
            dest[3] = v[3] * s;
            return dest;
        },

        /**
         * Multiplies each element of a three-element vector by a scalar.
         * @method mulVec3Scalar
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        mulVec3Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] * s;
            dest[1] = v[1] * s;
            dest[2] = v[2] * s;
            return dest;
        },

        /**
         * Multiplies each element of a two-element vector by a scalar.
         * @method mulVec2Scalar
         * @static
         * @param {Array(Number)} v The vector
         * @param {Number} s The scalar
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, v otherwise
         */
        mulVec2Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] * s;
            dest[1] = v[1] * s;
            return dest;
        },

        /**
         * Divides one three-element vector by another.
         * @method divVec3
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        divVec3: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] / v[0];
            dest[1] = u[1] / v[1];
            dest[2] = u[2] / v[2];
            return dest;
        },

        /**
         * Divides one four-element vector by another.
         * @method divVec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @param  {Array(Number)} [dest] Destination vector
         * @return {Array(Number)} dest if specified, u otherwise
         */
        divVec4: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            dest[0] = u[0] / v[0];
            dest[1] = u[1] / v[1];
            dest[2] = u[2] / v[2];
            dest[3] = u[3] / v[3];
            return dest;
        },

        /**
         * Divides a scalar by a three-element vector, returning a new vector.
         * @method divScalarVec3
         * @static
         * @param v vec3
         * @param s scalar
         * @param dest vec3 - optional destination
         * @return [] dest if specified, v otherwise
         */
        divScalarVec3: function (s, v, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = s / v[0];
            dest[1] = s / v[1];
            dest[2] = s / v[2];
            return dest;
        },

        /**
         * Divides a three-element vector by a scalar.
         * @method divVec3Scalar
         * @static
         * @param v vec3
         * @param s scalar
         * @param dest vec3 - optional destination
         * @return [] dest if specified, v otherwise
         */
        divVec3Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] / s;
            dest[1] = v[1] / s;
            dest[2] = v[2] / s;
            return dest;
        },

        /**
         * Divides a four-element vector by a scalar.
         * @method divVec4Scalar
         * @static
         * @param v vec4
         * @param s scalar
         * @param dest vec4 - optional destination
         * @return [] dest if specified, v otherwise
         */
        divVec4Scalar: function (v, s, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = v[0] / s;
            dest[1] = v[1] / s;
            dest[2] = v[2] / s;
            dest[3] = v[3] / s;
            return dest;
        },


        /**
         * Divides a scalar by a four-element vector, returning a new vector.
         * @method divScalarVec4
         * @static
         * @param s scalar
         * @param v vec4
         * @param dest vec4 - optional destination
         * @return [] dest if specified, v otherwise
         */
        divScalarVec4: function (s, v, dest) {
            if (!dest) {
                dest = v;
            }
            dest[0] = s / v[0];
            dest[1] = s / v[1];
            dest[2] = s / v[2];
            dest[3] = s / v[3];
            return dest;
        },

        /**
         * Returns the dot product of two four-element vectors.
         * @method dotVec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @return The dot product
         */
        dotVec4: function (u, v) {
            return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3]);
        },

        /**
         * Returns the cross product of two four-element vectors.
         * @method cross3Vec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @return The cross product
         */
        cross3Vec4: function (u, v) {
            var u0 = u[0], u1 = u[1], u2 = u[2];
            var v0 = v[0], v1 = v[1], v2 = v[2];
            return [
                u1 * v2 - u2 * v1,
                u2 * v0 - u0 * v2,
                u0 * v1 - u1 * v0,
                0.0];
        },

        /**
         * Returns the cross product of two three-element vectors.
         * @method cross3Vec3
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @return The cross product
         */
        cross3Vec3: function (u, v, dest) {
            if (!dest) {
                dest = u;
            }
            var x = u[0], y = u[1], z = u[2];
            var x2 = v[0], y2 = v[1], z2 = v[2];
            dest[0] = y * z2 - z * y2;
            dest[1] = z * x2 - x * z2;
            dest[2] = x * y2 - y * x2;
            return dest;
        },


        sqLenVec4: function (v) { // TODO
            return math.dotVec4(v, v);
        },

        /**
         * Returns the length of a four-element vector.
         * @method lenVec4
         * @static
         * @param {Array(Number)} v The vector
         * @return The length
         */
        lenVec4: function (v) {
            return Math.sqrt(math.sqLenVec4(v));
        },

        /**
         * Returns the dot product of two three-element vectors.
         * @method dotVec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @return The dot product
         */
        dotVec3: function (u, v) {
            return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2]);
        },

        /**
         * Returns the dot product of two two-element vectors.
         * @method dotVec4
         * @static
         * @param {Array(Number)} u First vector
         * @param {Array(Number)} v Second vector
         * @return The dot product
         */
        dotVec2: function (u, v) {
            return (u[0] * v[0] + u[1] * v[1]);
        },


        sqLenVec3: function (v) {
            return math.dotVec3(v, v);
        },


        sqLenVec2: function (v) {
            return math.dotVec2(v, v);
        },

        /**
         * Returns the length of a three-element vector.
         * @method lenVec3
         * @static
         * @param {Array(Number)} v The vector
         * @return The length
         */
        lenVec3: function (v) {
            return Math.sqrt(math.sqLenVec3(v));
        },

        /**
         * Returns the length of a two-element vector.
         * @method lenVec2
         * @static
         * @param {Array(Number)} v The vector
         * @return The length
         */
        lenVec2: function (v) {
            return Math.sqrt(math.sqLenVec2(v));
        },

        /**
         * @method rcpVec3
         * @static
         * @param v vec3
         * @param dest vec3 - optional destination
         * @return [] dest if specified, v otherwise
         *
         */
        rcpVec3: function (v, dest) {
            return math.divScalarVec3(1.0, v, dest);
        },

        /**
         * Normalizes a four-element vector
         * @method normalizeVec4
         * @static
         * @param v vec4
         * @param dest vec4 - optional destination
         * @return [] dest if specified, v otherwise
         *
         */
        normalizeVec4: function (v, dest) {
            var f = 1.0 / math.lenVec4(v);
            return math.mulVec4Scalar(v, f, dest);
        },

        /**
         * Normalizes a three-element vector
         * @method normalizeVec4
         * @static
         */
        normalizeVec3: function (v, dest) {
            var f = 1.0 / math.lenVec3(v);
            return math.mulVec3Scalar(v, f, dest);
        },

        /**
         * Normalizes a two-element vector
         * @method normalizeVec2
         * @static
         */
        normalizeVec2: function (v, dest) {
            var f = 1.0 / math.lenVec2(v);
            return math.mulVec2Scalar(v, f, dest);
        },

        /**
         * Creates a three-element vector from the rotation part of a sixteen-element matrix.
         * @param m
         * @param dest
         */
        vec3FromMat4Scale: (function () {

            var tempVec3 = new Float32Array(3);

            return function (m, dest) {

                tempVec3[0] = m[0];
                tempVec3[1] = m[1];
                tempVec3[2] = m[2];

                dest[0] = math.lenVec3(tempVec3);

                tempVec3[0] = m[4];
                tempVec3[1] = m[5];
                tempVec3[2] = m[6];

                dest[1] = math.lenVec3(tempVec3);

                tempVec3[0] = m[8];
                tempVec3[1] = m[9];
                tempVec3[2] = m[10];

                dest[2] = math.lenVec3(tempVec3);

                return dest;
            };
        })(),

        /**
         * Duplicates a 4x4 identity matrix.
         * @method dupMat4
         * @static
         */
        dupMat4: function (m) {
            return m.slice(0, 16);
        },

        /**
         * Extracts a 3x3 matrix from a 4x4 matrix.
         * @method mat4To3
         * @static
         */
        mat4To3: function (m) {
            return [
                m[0], m[1], m[2],
                m[4], m[5], m[6],
                m[8], m[9], m[10]
            ];
        },

        /**
         * Returns a 4x4 matrix with each element set to the given scalar value.
         * @method m4s
         * @static
         */
        m4s: function (s) {
            return [
                s, s, s, s,
                s, s, s, s,
                s, s, s, s,
                s, s, s, s
            ];
        },

        /**
         * Returns a 4x4 matrix with each element set to zero.
         * @method setMat4ToZeroes
         * @static
         */
        setMat4ToZeroes: function () {
            return math.m4s(0.0);
        },

        /**
         * Returns a 4x4 matrix with each element set to 1.0.
         * @method setMat4ToOnes
         * @static
         */
        setMat4ToOnes: function () {
            return math.m4s(1.0);
        },

        /**
         * Returns a 4x4 matrix with each element set to 1.0.
         * @method setMat4ToOnes
         * @static
         */
        diagonalMat4v: function (v) {
            return new Float32Array([
                v[0], 0.0, 0.0, 0.0,
                0.0, v[1], 0.0, 0.0,
                0.0, 0.0, v[2], 0.0,
                0.0, 0.0, 0.0, v[3]
            ]);
        },

        /**
         * Returns a 4x4 matrix with diagonal elements set to the given vector.
         * @method diagonalMat4c
         * @static
         */
        diagonalMat4c: function (x, y, z, w) {
            return math.diagonalMat4v([x, y, z, w]);
        },

        /**
         * Returns a 4x4 matrix with diagonal elements set to the given scalar.
         * @method diagonalMat4s
         * @static
         */
        diagonalMat4s: function (s) {
            return math.diagonalMat4c(s, s, s, s);
        },

        /**
         * Returns a 4x4 identity matrix.
         * @method identityMat4
         * @static
         */
        identityMat4: function (mat) {

            mat = mat || new Float32Array(16);

            mat[0] = 1.0;
            mat[1] = 0.0;
            mat[2] = 0.0;
            mat[3] = 0.0;

            mat[4] = 0.0;
            mat[5] = 1.0;
            mat[6] = 0.0;
            mat[7] = 0.0;

            mat[8] = 0.0;
            mat[9] = 0.0;
            mat[10] = 1.0;
            mat[11] = 0.0;

            mat[12] = 0.0;
            mat[13] = 0.0;
            mat[14] = 0.0;
            mat[15] = 1.0;

            return mat;
        },

        /**
         * Tests if the given 4x4 matrix is the identity matrix.
         * @method isIdentityMat4
         * @static
         */
        isIdentityMat4: function (m) {
            if (m[0] !== 1.0 || m[1] !== 0.0 || m[2] !== 0.0 || m[3] !== 0.0 ||
                m[4] !== 0.0 || m[5] !== 1.0 || m[6] !== 0.0 || m[7] !== 0.0 ||
                m[8] !== 0.0 || m[9] !== 0.0 || m[10] !== 1.0 || m[11] !== 0.0 ||
                m[12] !== 0.0 || m[13] !== 0.0 || m[14] !== 0.0 || m[15] !== 1.0) {
                return false;
            }
            return true;
        },

        /**
         * Negates the given 4x4 matrix.
         * @method negateMat4
         * @static
         */
        negateMat4: function (m, dest) {
            if (!dest) {
                dest = m;
            }
            dest[0] = -m[0];
            dest[1] = -m[1];
            dest[2] = -m[2];
            dest[3] = -m[3];
            dest[4] = -m[4];
            dest[5] = -m[5];
            dest[6] = -m[6];
            dest[7] = -m[7];
            dest[8] = -m[8];
            dest[9] = -m[9];
            dest[10] = -m[10];
            dest[11] = -m[11];
            dest[12] = -m[12];
            dest[13] = -m[13];
            dest[14] = -m[14];
            dest[15] = -m[15];
            return dest;
        },

        /**
         * Adds the given 4x4 matrices together.
         * @method addMat4
         * @static
         */
        addMat4: function (a, b, dest) {
            if (!dest) {
                dest = a;
            }
            dest[0] = a[0] + b[0];
            dest[1] = a[1] + b[1];
            dest[2] = a[2] + b[2];
            dest[3] = a[3] + b[3];
            dest[4] = a[4] + b[4];
            dest[5] = a[5] + b[5];
            dest[6] = a[6] + b[6];
            dest[7] = a[7] + b[7];
            dest[8] = a[8] + b[8];
            dest[9] = a[9] + b[9];
            dest[10] = a[10] + b[10];
            dest[11] = a[11] + b[11];
            dest[12] = a[12] + b[12];
            dest[13] = a[13] + b[13];
            dest[14] = a[14] + b[14];
            dest[15] = a[15] + b[15];
            return dest;
        },

        /**
         * Adds the given scalar to each element of the given 4x4 matrix.
         * @method addMat4Scalar
         * @static
         */
        addMat4Scalar: function (m, s, dest) {
            if (!dest) {
                dest = m;
            }
            dest[0] = m[0] + s;
            dest[1] = m[1] + s;
            dest[2] = m[2] + s;
            dest[3] = m[3] + s;
            dest[4] = m[4] + s;
            dest[5] = m[5] + s;
            dest[6] = m[6] + s;
            dest[7] = m[7] + s;
            dest[8] = m[8] + s;
            dest[9] = m[9] + s;
            dest[10] = m[10] + s;
            dest[11] = m[11] + s;
            dest[12] = m[12] + s;
            dest[13] = m[13] + s;
            dest[14] = m[14] + s;
            dest[15] = m[15] + s;
            return dest;
        },

        /**
         * Adds the given scalar to each element of the given 4x4 matrix.
         * @method addScalarMat4
         * @static
         */
        addScalarMat4: function (s, m, dest) {
            return math.addMat4Scalar(m, s, dest);
        },

        /**
         * Subtracts the second 4x4 matrix from the first.
         * @method subMat4
         * @static
         */
        subMat4: function (a, b, dest) {
            if (!dest) {
                dest = a;
            }
            dest[0] = a[0] - b[0];
            dest[1] = a[1] - b[1];
            dest[2] = a[2] - b[2];
            dest[3] = a[3] - b[3];
            dest[4] = a[4] - b[4];
            dest[5] = a[5] - b[5];
            dest[6] = a[6] - b[6];
            dest[7] = a[7] - b[7];
            dest[8] = a[8] - b[8];
            dest[9] = a[9] - b[9];
            dest[10] = a[10] - b[10];
            dest[11] = a[11] - b[11];
            dest[12] = a[12] - b[12];
            dest[13] = a[13] - b[13];
            dest[14] = a[14] - b[14];
            dest[15] = a[15] - b[15];
            return dest;
        },

        /**
         * Subtracts the given scalar from each element of the given 4x4 matrix.
         * @method subMat4Scalar
         * @static
         */
        subMat4Scalar: function (m, s, dest) {
            if (!dest) {
                dest = m;
            }
            dest[0] = m[0] - s;
            dest[1] = m[1] - s;
            dest[2] = m[2] - s;
            dest[3] = m[3] - s;
            dest[4] = m[4] - s;
            dest[5] = m[5] - s;
            dest[6] = m[6] - s;
            dest[7] = m[7] - s;
            dest[8] = m[8] - s;
            dest[9] = m[9] - s;
            dest[10] = m[10] - s;
            dest[11] = m[11] - s;
            dest[12] = m[12] - s;
            dest[13] = m[13] - s;
            dest[14] = m[14] - s;
            dest[15] = m[15] - s;
            return dest;
        },

        /**
         * Subtracts the given scalar from each element of the given 4x4 matrix.
         * @method subScalarMat4
         * @static
         */
        subScalarMat4: function (s, m, dest) {
            if (!dest) {
                dest = m;
            }
            dest[0] = s - m[0];
            dest[1] = s - m[1];
            dest[2] = s - m[2];
            dest[3] = s - m[3];
            dest[4] = s - m[4];
            dest[5] = s - m[5];
            dest[6] = s - m[6];
            dest[7] = s - m[7];
            dest[8] = s - m[8];
            dest[9] = s - m[9];
            dest[10] = s - m[10];
            dest[11] = s - m[11];
            dest[12] = s - m[12];
            dest[13] = s - m[13];
            dest[14] = s - m[14];
            dest[15] = s - m[15];
            return dest;
        },

        /**
         * Multiplies the two given 4x4 matrix by each other.
         * @method mulMat4
         * @static
         */
        mulMat4: function (a, b, dest) {
            if (!dest) {
                dest = a;
            }

            // Cache the matrix values (makes for huge speed increases!)
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
            var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
            var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
            var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

            var b00 = b[0], b01 = b[1], b02 = b[2], b03 = b[3];
            var b10 = b[4], b11 = b[5], b12 = b[6], b13 = b[7];
            var b20 = b[8], b21 = b[9], b22 = b[10], b23 = b[11];
            var b30 = b[12], b31 = b[13], b32 = b[14], b33 = b[15];

            dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
            dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
            dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
            dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
            dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
            dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
            dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
            dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
            dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
            dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
            dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
            dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
            dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
            dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
            dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
            dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;

            return dest;
        },

        /**
         * Multiplies each element of the given 4x4 matrix by the given scalar.
         * @method mulMat4Scalar
         * @static
         */
        mulMat4Scalar: function (m, s, dest) {
            if (!dest) {
                dest = m;
            }
            dest[0] = m[0] * s;
            dest[1] = m[1] * s;
            dest[2] = m[2] * s;
            dest[3] = m[3] * s;
            dest[4] = m[4] * s;
            dest[5] = m[5] * s;
            dest[6] = m[6] * s;
            dest[7] = m[7] * s;
            dest[8] = m[8] * s;
            dest[9] = m[9] * s;
            dest[10] = m[10] * s;
            dest[11] = m[11] * s;
            dest[12] = m[12] * s;
            dest[13] = m[13] * s;
            dest[14] = m[14] * s;
            dest[15] = m[15] * s;
            return dest;
        },

        /**
         * Multiplies the given 4x4 matrix by the given four-element vector.
         * @method mulMat4v4
         * @static
         */
        mulMat4v4: function (m, v) {
            var v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];
            return [
                m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3,
                m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3,
                m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3,
                m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3
            ];
        },

        /**
         * Transposes the given 4x4 matrix.
         * @method transposeMat4
         * @static
         */
        transposeMat4: function (mat, dest) {
            // If we are transposing ourselves we can skip a few steps but have to cache some values
            var m4 = mat[4], m14 = mat[14], m8 = mat[8];
            var m13 = mat[13], m12 = mat[12], m9 = mat[9];
            if (!dest || mat === dest) {
                var a01 = mat[1], a02 = mat[2], a03 = mat[3];
                var a12 = mat[6], a13 = mat[7];
                var a23 = mat[11];
                mat[1] = m4;
                mat[2] = m8;
                mat[3] = m12;
                mat[4] = a01;
                mat[6] = m9;
                mat[7] = m13;
                mat[8] = a02;
                mat[9] = a12;
                mat[11] = m14;
                mat[12] = a03;
                mat[13] = a13;
                mat[14] = a23;
                return mat;
            }
            dest[0] = mat[0];
            dest[1] = m4;
            dest[2] = m8;
            dest[3] = m12;
            dest[4] = mat[1];
            dest[5] = mat[5];
            dest[6] = m9;
            dest[7] = m13;
            dest[8] = mat[2];
            dest[9] = mat[6];
            dest[10] = mat[10];
            dest[11] = m14;
            dest[12] = mat[3];
            dest[13] = mat[7];
            dest[14] = mat[11];
            dest[15] = mat[15];
            return dest;
        },

        /**
         * Returns the determinant of the given 4x4 matrix.
         * @method determinantMat4
         * @static
         */
        determinantMat4: function (mat) {
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
            return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
                a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
                a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
                a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
                a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
                a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;
        },

        /**
         * Returns the inverse of the given 4x4 matrix.
         * @method inverseMat4
         * @static
         */
        inverseMat4: function (mat, dest) {
            if (!dest) {
                dest = mat;
            }
            // Cache the matrix values (makes for huge speed increases!)
            var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
            var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
            var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
            var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 = a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;

            // Calculate the determinant (inlined to avoid double-caching)
            var invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);

            dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
            dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
            dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
            dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
            dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
            dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
            dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
            dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
            dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
            dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
            dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
            dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
            dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
            dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
            dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
            dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;

            return dest;
        },

        /**
         * Returns the trace of the given 4x4 matrix.
         * @method traceMat4
         * @static
         */
        traceMat4: function (m) {
            return (m[0] + m[5] + m[10] + m[15]);
        },

        /**
         * Returns 4x4 translation matrix.
         * @method translationMat4
         * @static
         */
        translationMat4v: function (v, dest) {
            var m = dest || math.identityMat4();
            m[12] = v[0];
            m[13] = v[1];
            m[14] = v[2];
            return m;
        },

        /**
         * Returns 4x4 translation matrix.
         * @method translationMat4c
         * @static
         */
        translationMat4c: (function () {
            var xyz = new Float32Array(3);
            return function (x, y, z, dest) {
                xyz[0] = x;
                xyz[1] = y;
                xyz[2] = z;
                return math.translationMat4v(xyz, dest);
            };
        })(),

        /**
         * Returns 4x4 translation matrix.
         * @method translationMat4s
         * @static
         */
        translationMat4s: function (s, dest) {
            return math.translationMat4c(s, s, s, dest);
        },

        /**
         * Efficiently post-concatenates a translation to the given matrix.
         * @param v
         * @param m
         */
        translateMat4v: function (xyz, m) {
            return math.translateMat4c(xyz[0], xyz[1], xyz[2], m);
        },

        /**
         * Efficiently post-concatenates a translation to the given matrix.
         * @param x
         * @param y
         * @param z
         * @param m
         */
        OLDtranslateMat4c: function (x, y, z, m) {

            var m12 = m[12];
            m[0] += m12 * x;
            m[4] += m12 * y;
            m[8] += m12 * z;

            var m13 = m[13];
            m[1] += m13 * x;
            m[5] += m13 * y;
            m[9] += m13 * z;

            var m14 = m[14];
            m[2] += m14 * x;
            m[6] += m14 * y;
            m[10] += m14 * z;

            var m15 = m[15];
            m[3] += m15 * x;
            m[7] += m15 * y;
            m[11] += m15 * z;

            return m;
        },

        translateMat4c: function (x, y, z, m) {

            var m3 = m[3];
            m[0] += m3 * x;
            m[1] += m3 * y;
            m[2] += m3 * z;

            var m7 = m[7];
            m[4] += m7 * x;
            m[5] += m7 * y;
            m[6] += m7 * z;

            var m11 = m[11];
            m[8] += m11 * x;
            m[9] += m11 * y;
            m[10] += m11 * z;

            var m15 = m[15];
            m[12] += m15 * x;
            m[13] += m15 * y;
            m[14] += m15 * z;

            return m;
        },
        /**
         * Returns 4x4 rotation matrix.
         * @method rotationMat4v
         * @static
         */
        rotationMat4v: function (anglerad, axis, m) {
            var ax = math.normalizeVec4([axis[0], axis[1], axis[2], 0.0], []);
            var s = Math.sin(anglerad);
            var c = Math.cos(anglerad);
            var q = 1.0 - c;

            var x = ax[0];
            var y = ax[1];
            var z = ax[2];

            var xy, yz, zx, xs, ys, zs;

            //xx = x * x; used once
            //yy = y * y; used once
            //zz = z * z; used once
            xy = x * y;
            yz = y * z;
            zx = z * x;
            xs = x * s;
            ys = y * s;
            zs = z * s;

            m = m || math.mat4();

            m[0] = (q * x * x) + c;
            m[1] = (q * xy) + zs;
            m[2] = (q * zx) - ys;
            m[3] = 0.0;

            m[4] = (q * xy) - zs;
            m[5] = (q * y * y) + c;
            m[6] = (q * yz) + xs;
            m[7] = 0.0;

            m[8] = (q * zx) + ys;
            m[9] = (q * yz) - xs;
            m[10] = (q * z * z) + c;
            m[11] = 0.0;

            m[12] = 0.0;
            m[13] = 0.0;
            m[14] = 0.0;
            m[15] = 1.0;

            return m;
        },

        /**
         * Returns 4x4 rotation matrix.
         * @method rotationMat4c
         * @static
         */
        rotationMat4c: function (anglerad, x, y, z, mat) {
            return math.rotationMat4v(anglerad, [x, y, z], mat);
        },

        /**
         * Returns 4x4 scale matrix.
         * @method scalingMat4v
         * @static
         */
        scalingMat4v: function (v, m) {
            m = m || math.identityMat4();
            m[0] = v[0];
            m[5] = v[1];
            m[10] = v[2];
            return m;
        },

        /**
         * Returns 4x4 scale matrix.
         * @method scalingMat4c
         * @static
         */
        scalingMat4c: (function () {
            var xyz = new Float32Array(3);
            return function (x, y, z, dest) {
                xyz[0] = x;
                xyz[1] = y;
                xyz[2] = z;
                return math.scalingMat4v(xyz, dest);
            };
        })(),

        /**
         * Efficiently post-concatenates a scaling to the given matrix.
         * @method scaleMat4c
         * @param x
         * @param y
         * @param z
         * @param m
         */
        scaleMat4c:  function (x, y, z, m) {
            
            m[0] *= x;
            m[4] *= y;
            m[8] *= z;
            
            m[1] *= x;
            m[5] *= y;
            m[9] *= z;
            
            m[2] *= x;
            m[6] *= y;
            m[10] *= z;
            
            m[3] *= x;
            m[7] *= y;
            m[11] *= z;
            return m;
        },

        /**
         * Efficiently post-concatenates a scaling to the given matrix.
         * @method scaleMat4c
         * @param xyz
         * @param m
         */
        scaleMat4v: function (xyz, m) {

            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];

            m[0] *= x;
            m[4] *= y;
            m[8] *= z;
            m[1] *= x;
            m[5] *= y;
            m[9] *= z;
            m[2] *= x;
            m[6] *= y;
            m[10] *= z;
            m[3] *= x;
            m[7] *= y;
            m[11] *= z;

            return m;
        },

        /**
         * Returns 4x4 scale matrix.
         * @method scalingMat4s
         * @static
         */
        scalingMat4s: function (s) {
            return math.scalingMat4c(s, s, s);
        },

        /**
         * Creates a matrix from a quaternion rotation and vector translation
         *
         * @param {Float32Array} q Rotation quaternion
         * @param {Float32Array} v Translation vector
         * @param {Float32Array} dest Destination matrix
         * @returns {Float32Array} dest
         */
        rotationTranslationMat4: function (q, v, dest) {

            dest = dest || math.mat4();

            var x = q[0];
            var y = q[1];
            var z = q[2];
            var w = q[3];

            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy = y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;

            dest[0] = 1 - (yy + zz);
            dest[1] = xy + wz;
            dest[2] = xz - wy;
            dest[3] = 0;
            dest[4] = xy - wz;
            dest[5] = 1 - (xx + zz);
            dest[6] = yz + wx;
            dest[7] = 0;
            dest[8] = xz + wy;
            dest[9] = yz - wx;
            dest[10] = 1 - (xx + yy);
            dest[11] = 0;
            dest[12] = v[0];
            dest[13] = v[1];
            dest[14] = v[2];
            dest[15] = 1;

            return dest;
        },

        /**
         * Gets Euler angles from a 4x4 matrix.
         *
         * @param {Float32Array} mat The 4x4 matrix.
         * @param {String} order Desired Euler angle order: "XYZ", "YXZ", "ZXY" etc.
         * @param {Float32Array} [dest] Destination Euler angles, created by default.
         * @returns {Float32Array} The Euler angles.
         */
        mat4ToEuler: function (mat, order, dest) {

            dest = dest || math.vec4();

            var clamp = math.clamp;

            // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

            var m11 = mat[0], m12 = mat[4], m13 = mat[8];
            var m21 = mat[1], m22 = mat[5], m23 = mat[9];
            var m31 = mat[2], m32 = mat[6], m33 = mat[10];

            if (order === 'XYZ') {

                dest[1] = Math.asin(clamp(m13, -1, 1));

                if (Math.abs(m13) < 0.99999) {
                    dest[0] = Math.atan2(-m23, m33);
                    dest[2] = Math.atan2(-m12, m11);
                } else {
                    dest[0] = Math.atan2(m32, m22);
                    dest[2] = 0;

                }

            } else if (order === 'YXZ') {

                dest[0] = Math.asin(-clamp(m23, -1, 1));

                if (Math.abs(m23) < 0.99999) {
                    dest[1] = Math.atan2(m13, m33);
                    dest[2] = Math.atan2(m21, m22);
                } else {
                    dest[1] = Math.atan2(-m31, m11);
                    dest[2] = 0;
                }

            } else if (order === 'ZXY') {

                dest[0] = Math.asin(clamp(m32, -1, 1));

                if (Math.abs(m32) < 0.99999) {
                    dest[1] = Math.atan2(-m31, m33);
                    dest[2] = Math.atan2(-m12, m22);
                } else {
                    dest[1] = 0;
                    dest[2] = Math.atan2(m21, m11);
                }

            } else if (order === 'ZYX') {

                dest[1] = Math.asin(-clamp(m31, -1, 1));

                if (Math.abs(m31) < 0.99999) {
                    dest[0] = Math.atan2(m32, m33);
                    dest[2] = Math.atan2(m21, m11);
                } else {
                    dest[0] = 0;
                    dest[2] = Math.atan2(-m12, m22);
                }

            } else if (order === 'YZX') {

                dest[2] = Math.asin(clamp(m21, -1, 1));

                if (Math.abs(m21) < 0.99999) {
                    dest[0] = Math.atan2(-m23, m22);
                    dest[1] = Math.atan2(-m31, m11);
                } else {
                    dest[0] = 0;
                    dest[1] = Math.atan2(m13, m33);
                }

            } else if (order === 'XZY') {

                dest[2] = Math.asin(-clamp(m12, -1, 1));

                if (Math.abs(m12) < 0.99999) {
                    dest[0] = Math.atan2(m32, m22);
                    dest[1] = Math.atan2(m13, m11);
                } else {
                    dest[0] = Math.atan2(-m23, m33);
                    dest[1] = 0;
                }
            }

            return dest;
        },

        /**
         * Returns a 4x4 'lookat' viewing transform matrix.
         * @method lookAtMat4v
         * @param pos vec3 position of the viewer
         * @param target vec3 point the viewer is looking at
         * @param up vec3 pointing "up"
         * @param dest mat4 Optional, mat4 matrix will be written into
         *
         * @return {mat4} dest if specified, a new mat4 otherwise
         */
        lookAtMat4v: function (pos, target, up, dest) {
            if (!dest) {
                dest = math.mat4();
            }

            var posx = pos[0],
                posy = pos[1],
                posz = pos[2],
                upx = up[0],
                upy = up[1],
                upz = up[2],
                targetx = target[0],
                targety = target[1],
                targetz = target[2];

            if (posx === targetx && posy === targety && posz === targetz) {
                return math.identityMat4();
            }

            var z0, z1, z2, x0, x1, x2, y0, y1, y2, len;

            //vec3.direction(eye, center, z);
            z0 = posx - targetx;
            z1 = posy - targety;
            z2 = posz - targetz;

            // normalize (no check needed for 0 because of early return)
            len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
            z0 *= len;
            z1 *= len;
            z2 *= len;

            //vec3.normalize(vec3.cross(up, z, x));
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
            if (!len) {
                x0 = 0;
                x1 = 0;
                x2 = 0;
            } else {
                len = 1 / len;
                x0 *= len;
                x1 *= len;
                x2 *= len;
            }

            //vec3.normalize(vec3.cross(z, x, y));
            y0 = z1 * x2 - z2 * x1;
            y1 = z2 * x0 - z0 * x2;
            y2 = z0 * x1 - z1 * x0;

            len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
            if (!len) {
                y0 = 0;
                y1 = 0;
                y2 = 0;
            } else {
                len = 1 / len;
                y0 *= len;
                y1 *= len;
                y2 *= len;
            }

            dest[0] = x0;
            dest[1] = y0;
            dest[2] = z0;
            dest[3] = 0;
            dest[4] = x1;
            dest[5] = y1;
            dest[6] = z1;
            dest[7] = 0;
            dest[8] = x2;
            dest[9] = y2;
            dest[10] = z2;
            dest[11] = 0;
            dest[12] = -(x0 * posx + x1 * posy + x2 * posz);
            dest[13] = -(y0 * posx + y1 * posy + y2 * posz);
            dest[14] = -(z0 * posx + z1 * posy + z2 * posz);
            dest[15] = 1;

            return dest;
        },

        /**
         * Returns a 4x4 'lookat' viewing transform matrix.
         * @method lookAtMat4c
         * @static
         */
        lookAtMat4c: function (posx, posy, posz, targetx, targety, targetz, upx, upy, upz) {
            return math.lookAtMat4v([posx, posy, posz], [targetx, targety, targetz], [upx, upy, upz], []);
        },

        /**
         * Returns a 4x4 orthographic projection matrix.
         * @method orthoMat4c
         * @static
         */
        orthoMat4c: function (left, right, bottom, top, near, far, dest) {
            if (!dest) {
                dest = math.mat4();
            }
            var rl = (right - left);
            var tb = (top - bottom);
            var fn = (far - near);

            dest[0] = 2.0 / rl;
            dest[1] = 0.0;
            dest[2] = 0.0;
            dest[3] = 0.0;

            dest[4] = 0.0;
            dest[5] = 2.0 / tb;
            dest[6] = 0.0;
            dest[7] = 0.0;

            dest[8] = 0.0;
            dest[9] = 0.0;
            dest[10] = -2.0 / fn;
            dest[11] = 0.0;

            dest[12] = -(left + right) / rl;
            dest[13] = -(top + bottom) / tb;
            dest[14] = -(far + near) / fn;
            dest[15] = 1.0;

            return dest;
        },

        /**
         * Returns a 4x4 perspective projection matrix.
         * @method frustumMat4v
         * @static
         */
        frustumMat4v: function (fmin, fmax, m) {

            if (!m) {
                m = math.mat4();
            }

            var fmin4 = [fmin[0], fmin[1], fmin[2], 0.0];
            var fmax4 = [fmax[0], fmax[1], fmax[2], 0.0];

            math.addVec4(fmax4, fmin4, tempMat1);
            math.subVec4(fmax4, fmin4, tempMat2);

            var t = 2.0 * fmin4[2];

            var tempMat20 = tempMat2[0], tempMat21 = tempMat2[1], tempMat22 = tempMat2[2];

            m[0] = t / tempMat20;
            m[1] = 0.0;
            m[2] = 0.0;
            m[3] = 0.0;

            m[4] = 0.0;
            m[5] = t / tempMat21;
            m[6] = 0.0;
            m[7] = 0.0;

            m[8] = tempMat1[0] / tempMat20;
            m[9] = tempMat1[1] / tempMat21;
            m[10] = -tempMat1[2] / tempMat22;
            m[11] = -1.0;

            m[12] = 0.0;
            m[13] = 0.0;
            m[14] = -t * fmax4[2] / tempMat22;
            m[15] = 0.0;

            return m;
        },

        /**
         * Returns a 4x4 perspective projection matrix.
         * @method frustumMat4v
         * @static
         */
        frustumMat4: function (left, right, bottom, top, near, far, dest) {
            if (!dest) {
                dest = math.mat4();
            }
            var rl = (right - left);
            var tb = (top - bottom);
            var fn = (far - near);
            dest[0] = (near * 2) / rl;
            dest[1] = 0;
            dest[2] = 0;
            dest[3] = 0;
            dest[4] = 0;
            dest[5] = (near * 2) / tb;
            dest[6] = 0;
            dest[7] = 0;
            dest[8] = (right + left) / rl;
            dest[9] = (top + bottom) / tb;
            dest[10] = -(far + near) / fn;
            dest[11] = -1;
            dest[12] = 0;
            dest[13] = 0;
            dest[14] = -(far * near * 2) / fn;
            dest[15] = 0;
            return dest;
        },

        /**
         * Returns a 4x4 perspective projection matrix.
         * @method perspectiveMat4v
         * @static
         */
        perspectiveMat4: function (fovyrad, aspectratio, znear, zfar, m) {
            var pmin = [];
            var pmax = [];

            pmin[2] = znear;
            pmax[2] = zfar;

            pmax[1] = pmin[2] * Math.tan(fovyrad / 2.0);
            pmin[1] = -pmax[1];

            pmax[0] = pmax[1] * aspectratio;
            pmin[0] = -pmax[0];

            return math.frustumMat4v(pmin, pmax, m);
        },

        /**
         * Transforms a three-element position by a 4x4 matrix.
         * @method transformPoint3
         * @static
         */
        transformPoint3: function (m, p, dest) {

            dest = dest || math.vec3();

            dest[0] = (m[0] * p[0]) + (m[4] * p[1]) + (m[8] * p[2]) + m[12];
            dest[1] = (m[1] * p[0]) + (m[5] * p[1]) + (m[9] * p[2]) + m[13];
            dest[2] = (m[2] * p[0]) + (m[6] * p[1]) + (m[10] * p[2]) + m[14];

            return dest;
        },

        /**
         * Transforms a homogeneous coordinate by a 4x4 matrix.
         * @method transformPoint3
         * @static
         */
        transformPoint4: function (m, v, dest) {

            dest = dest || math.vec4();

            dest[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];
            dest[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];
            dest[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];
            dest[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];

            return dest;
        },


        /**
         * Transforms an array of three-element positions by a 4x4 matrix.
         * @method transformPoints3
         * @static
         */
        transformPoints3: function (m, points, points2) {
            var result = points2 || [];
            var len = points.length;
            var p0, p1, p2;
            var pi;

            // cache values
            var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3];
            var m4 = m[4], m5 = m[5], m6 = m[6], m7 = m[7];
            var m8 = m[8], m9 = m[9], m10 = m[10], m11 = m[11];
            var m12 = m[12], m13 = m[13], m14 = m[14], m15 = m[15];

            var r;

            for (var i = 0; i < len; ++i) {

                // cache values
                pi = points[i];

                p0 = pi[0];
                p1 = pi[1];
                p2 = pi[2];

                r = result[i] || (result[i] = [0, 0, 0]);

                r[0] = (m0 * p0) + (m4 * p1) + (m8 * p2) + m12;
                r[1] = (m1 * p0) + (m5 * p1) + (m9 * p2) + m13;
                r[2] = (m2 * p0) + (m6 * p1) + (m10 * p2) + m14;
                r[3] = (m3 * p0) + (m7 * p1) + (m11 * p2) + m15;
            }

            result.length = len;

            return result;
        },

        /**
         * Transforms an array of positions by a 4x4 matrix.
         * @method transformPositions3
         * @static
         */
        transformPositions3: function (m, p, p2) {

            p2 = p2 || p;

            var i;
            var len = p.length;

            var x;
            var y;
            var z;

            var m0 = m[0];
            var m1 = m[1];
            var m2 = m[2];
            var m3 = m[3];
            var m4 = m[4];
            var m5 = m[5];
            var m6 = m[6];
            var m7 = m[7];
            var m8 = m[8];
            var m9 = m[9];
            var m10 = m[10];
            var m11 = m[11];
            var m12 = m[12];
            var m13 = m[13];
            var m14 = m[14];
            var m15 = m[15];

            for (i = 0; i < len; i += 3) {

                x = p[i + 0];
                y = p[i + 1];
                z = p[i + 2];

                p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;
                p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;
                p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;
                p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;
            }

            return p2;
        },

        /**
         * Transforms a three-element vector by a 4x4 matrix.
         * @method transformVec3
         * @static
         */
        transformVec3: function (m, v, dest) {
            var v0 = v[0], v1 = v[1], v2 = v[2];
            dest = dest || this.vec3();
            dest[0] = (m[0] * v0) + (m[4] * v1) + (m[8] * v2);
            dest[1] = (m[1] * v0) + (m[5] * v1) + (m[9] * v2);
            dest[2] = (m[2] * v0) + (m[6] * v1) + (m[10] * v2);
            return dest;
        },

        /**
         * Transforms a four-element vector by a 4x4 matrix.
         * @method transformVec4
         * @static
         */
        transformVec4: function (m, v, dest) {
            var v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];
            dest = dest || math.vec4();
            dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;
            dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;
            dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;
            dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;
            return dest;
        },

        /**
         * Rotate a 3D vector around the x-axis
         *
         * @method rotateVec3X
         * @param {Float32Array} a The vec3 point to rotate
         * @param {Float32Array} b The origin of the rotation
         * @param {Number} c The angle of rotation
         * @param {Float32Array} dest The receiving vec3
         * @returns {Float32Array} dest
         * @static
         */
        rotateVec3X: function (a, b, c, dest) {

            var p = [], r = [];

            //Translate point to the origin
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];

            //perform rotation
            r[0] = p[0];
            r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
            r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);

            //translate to correct position
            dest[0] = r[0] + b[0];
            dest[1] = r[1] + b[1];
            dest[2] = r[2] + b[2];

            return dest;
        },

        /**
         * Rotate a 3D vector around the y-axis
         *
         * @method rotateVec3Y
         * @param {Float32Array} a The vec3 point to rotate
         * @param {Float32Array} b The origin of the rotation
         * @param {Number} c The angle of rotation
         * @param {Float32Array} dest The receiving vec3
         * @returns {Float32Array} dest
         * @static
         */
        rotateVec3Y: function (a, b, c, dest) {

            var p = [], r = [];

            //Translate point to the origin
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];

            //perform rotation
            r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
            r[1] = p[1];
            r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);

            //translate to correct position
            dest[0] = r[0] + b[0];
            dest[1] = r[1] + b[1];
            dest[2] = r[2] + b[2];

            return dest;
        },

        /**
         * Rotate a 3D vector around the z-axis
         *
         * @method rotateVec3Z
         * @param {Float32Array} a The vec3 point to rotate
         * @param {Float32Array} b The origin of the rotation
         * @param {Number} c The angle of rotation
         * @param {Float32Array} dest The receiving vec3
         * @returns {Float32Array} dest
         * @static
         */
        rotateVec3Z: function (a, b, c, dest) {

            var p = [], r = [];

            //Translate point to the origin
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];

            //perform rotation
            r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
            r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
            r[2] = p[2];

            //translate to correct position
            dest[0] = r[0] + b[0];
            dest[1] = r[1] + b[1];
            dest[2] = r[2] + b[2];

            return dest;
        },

        /**
         * Transforms a four-element vector by a 4x4 projection matrix.
         *
         * @method projectVec4
         * @param {Float32Array} p 3D View-space coordinate
         * @param {Float32Array} q 2D Projected coordinate
         * @returns {Float32Array} 2D Projected coordinate
         * @static
         */
        projectVec4: function (p, q) {
            var f = 1.0 / p[3];
            q = q || math.vec2();
            q[0] = v[0] * f;
            q[1] = v[1] * f;
            return q;
        },

        /**
         * Linearly interpolates between two 3D vectors.
         * @method lerpVec3
         * @static
         */
        lerpVec3: function (t, t1, t2, p1, p2, dest) {
            var result = dest || math.vec3();
            var f = (t - t1) / (t2 - t1);
            result[0] = p1[0] + (f * (p2[0] - p1[0]));
            result[1] = p1[1] + (f * (p2[1] - p1[1]));
            result[2] = p1[2] + (f * (p2[2] - p1[2]));
            return result;
        },


        /**
         * Flattens a two-dimensional array into a one-dimensional array.
         *
         * @method flatten
         * @static
         * @param {Array of Arrays} a A 2D array
         * @returns Flattened 1D array
         */
        flatten: function (a) {

            var result = [];

            var i;
            var leni;
            var j;
            var lenj;
            var item;

            for (i = 0, leni = a.length; i < leni; i++) {
                item = a[i];
                for (j = 0, lenj = item.length; j < lenj; j++) {
                    result.push(item[j]);
                }
            }

            return result;
        },


        identityQuaternion: function (dest) {
            dest = dest || math.vec4();
            dest[0] = 0.0;
            dest[1] = 0.0;
            dest[2] = 0.0;
            dest[3] = 1.0;
            return dest;
        },

        /**
         * Initializes a quaternion from Euler angles.
         *
         * @param {Float32Array} euler The Euler angles.
         * @param {String} order Euler angle order: "XYZ", "YXZ", "ZXY" etc.
         * @param {Float32Array} [dest] Destination quaternion, created by default.
         * @returns {Float32Array} The quaternion.
         */
        eulerToQuaternion: function (euler, order, dest) {

            dest = dest || math.vec4();

            // https://www.mathworks.com/matlabcentral/fileexchange/
            // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
            //	content/SpinCalc.m

            var c1 = Math.cos(euler[0] / 2);
            var c2 = Math.cos(euler[1] / 2);
            var c3 = Math.cos(euler[2] / 2);
            var s1 = Math.sin(euler[0] / 2);
            var s2 = Math.sin(euler[1] / 2);
            var s3 = Math.sin(euler[2] / 2);

            if (order === 'XYZ') {

                dest[0] = s1 * c2 * c3 + c1 * s2 * s3;
                dest[1] = c1 * s2 * c3 - s1 * c2 * s3;
                dest[2] = c1 * c2 * s3 + s1 * s2 * c3;
                dest[3] = c1 * c2 * c3 - s1 * s2 * s3;

            } else if (order === 'YXZ') {

                dest[0] = s1 * c2 * c3 + c1 * s2 * s3;
                dest[1] = c1 * s2 * c3 - s1 * c2 * s3;
                dest[2] = c1 * c2 * s3 - s1 * s2 * c3;
                dest[3] = c1 * c2 * c3 + s1 * s2 * s3;

            } else if (order === 'ZXY') {

                dest[0] = s1 * c2 * c3 - c1 * s2 * s3;
                dest[1] = c1 * s2 * c3 + s1 * c2 * s3;
                dest[2] = c1 * c2 * s3 + s1 * s2 * c3;
                dest[3] = c1 * c2 * c3 - s1 * s2 * s3;

            } else if (order === 'ZYX') {

                dest[0] = s1 * c2 * c3 - c1 * s2 * s3;
                dest[1] = c1 * s2 * c3 + s1 * c2 * s3;
                dest[2] = c1 * c2 * s3 - s1 * s2 * c3;
                dest[3] = c1 * c2 * c3 + s1 * s2 * s3;

            } else if (order === 'YZX') {

                dest[0] = s1 * c2 * c3 + c1 * s2 * s3;
                dest[1] = c1 * s2 * c3 + s1 * c2 * s3;
                dest[2] = c1 * c2 * s3 - s1 * s2 * c3;
                dest[3] = c1 * c2 * c3 - s1 * s2 * s3;

            } else if (order === 'XZY') {

                dest[0] = s1 * c2 * c3 - c1 * s2 * s3;
                dest[1] = c1 * s2 * c3 - s1 * c2 * s3;
                dest[2] = c1 * c2 * s3 + s1 * s2 * c3;
                dest[3] = c1 * c2 * c3 + s1 * s2 * s3;
            }

            return dest;
        },

        mat4ToQuaternion: function (m, dest) {

            dest = dest || math.vec4();

            // https://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

            // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

            var m11 = m[0];
            var m12 = m[4];
            var m13 = m[8];
            var m21 = m[1];
            var m22 = m[5];
            var m23 = m[9];
            var m31 = m[2];
            var m32 = m[6];
            var m33 = m[10];
            var s;

            var trace = m11 + m22 + m33;

            if (trace > 0) {

                s = 0.5 / Math.sqrt(trace + 1.0);

                dest[3] = 0.25 / s;
                dest[0] = ( m32 - m23 ) * s;
                dest[1] = ( m13 - m31 ) * s;
                dest[2] = ( m21 - m12 ) * s;

            } else if (m11 > m22 && m11 > m33) {

                s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);

                dest[3] = ( m32 - m23 ) / s;
                dest[0] = 0.25 * s;
                dest[1] = ( m12 + m21 ) / s;
                dest[2] = ( m13 + m31 ) / s;

            } else if (m22 > m33) {

                s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);

                dest[3] = ( m13 - m31 ) / s;
                dest[0] = ( m12 + m21 ) / s;
                dest[1] = 0.25 * s;
                dest[2] = ( m23 + m32 ) / s;

            } else {

                s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);

                dest[3] = ( m21 - m12 ) / s;
                dest[0] = ( m13 + m31 ) / s;
                dest[1] = ( m23 + m32 ) / s;
                dest[2] = 0.25 * s;
            }

            return dest;
        },

        vec3PairToQuaternion: function (u, v, dest) {

            dest = dest || math.vec4();

            var norm_u_norm_v = Math.sqrt(math.dotVec3(u, u) * math.dotVec3(v, v));
            var real_part = norm_u_norm_v + math.dotVec3(u, v);

            if (real_part < 0.00000001 * norm_u_norm_v) {

                // If u and v are exactly opposite, rotate 180 degrees
                // around an arbitrary orthogonal axis. Axis normalisation
                // can happen later, when we normalise the quaternion.

                real_part = 0.0;

                if (Math.abs(u[0]) > Math.abs(u[2])) {

                    dest[0] = -u[1];
                    dest[1] = u[0];
                    dest[2] = 0;

                } else {
                    dest[0] = 0;
                    dest[1] = -u[2];
                    dest[2] = u[1]
                }

            } else {

                // Otherwise, build quaternion the standard way.
                math.cross3Vec3(u, v, dest);
            }

            dest[3] = real_part;

            return math.normalizeQuaternion(dest);
        },

        angleAxisToQuaternion: function (angleAxis, dest) {
            dest = dest || math.vec4();
            var halfAngle = angleAxis[3] / 2.0;
            var fsin = Math.sin(halfAngle);
            dest[0] = fsin * angleAxis[0];
            dest[1] = fsin * angleAxis[1];
            dest[2] = fsin * angleAxis[2];
            dest[3] = Math.cos(halfAngle);
            return dest;
        },

        quaternionToEuler: function (euler, order, dest) {
            dest = dest || math.vec4();
            var halfAngle = euler[3] / 2.0;
            var fsin = Math.sin(halfAngle);
            dest[0] = fsin * euler[0];
            dest[1] = fsin * euler[1];
            dest[2] = fsin * euler[2];
            dest[3] = Math.cos(halfAngle);
            return dest;
        },

        mulQuaternions: function (p, q, dest) {
            dest = dest || math.vec4();
            var p0 = p[0], p1 = p[1], p2 = p[2], p3 = p[3];
            var q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
            dest[0] = p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1;
            dest[1] = p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2;
            dest[2] = p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0;
            dest[3] = p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2;
            return dest;
        },

        vec3ApplyQuaternion: function (q, vec, dest) {

            dest = dest || math.vec3();

            var x = vec[0];
            var y = vec[1];
            var z = vec[2];

            var qx = q[0];
            var qy = q[1];
            var qz = q[2];
            var qw = q[3];

            // calculate quat * vector

            var ix = qw * x + qy * z - qz * y;
            var iy = qw * y + qz * x - qx * z;
            var iz = qw * z + qx * y - qy * x;
            var iw = -qx * x - qy * y - qz * z;

            // calculate result * inverse quat

            dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
            dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
            dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;

            return dest;
        },

        quaternionToMat4: function (q, dest) {

            dest = math.identityMat4(dest);

            var q0 = q[0];  //x
            var q1 = q[1];  //y
            var q2 = q[2];  //z
            var q3 = q[3];  //w

            var tx = 2.0 * q0;
            var ty = 2.0 * q1;
            var tz = 2.0 * q2;

            var twx = tx * q3;
            var twy = ty * q3;
            var twz = tz * q3;

            var txx = tx * q0;
            var txy = ty * q0;
            var txz = tz * q0;

            var tyy = ty * q1;
            var tyz = tz * q1;
            var tzz = tz * q2;

            dest[0] = 1.0 - (tyy + tzz);
            dest[1] = txy + twz;
            dest[2] = txz - twy;

            dest[4] = txy - twz;
            dest[5] = 1.0 - (txx + tzz);
            dest[6] = tyz + twx;

            dest[8] = txz + twy;
            dest[9] = tyz - twx;

            dest[10] = 1.0 - (txx + tyy);

            return dest;
        },

        quaternionToRotationMat4: function (q, m) {

            var x = q[0];
            var y = q[1];
            var z = q[2];
            var w = q[3];

            var x2 = x + x, y2 = y + y, z2 = z + z;
            var xx = x * x2, xy = x * y2, xz = x * z2;
            var yy = y * y2, yz = y * z2, zz = z * z2;
            var wx = w * x2, wy = w * y2, wz = w * z2;

            m[0] = 1 - ( yy + zz );
            m[4] = xy - wz;
            m[8] = xz + wy;

            m[1] = xy + wz;
            m[5] = 1 - ( xx + zz );
            m[9] = yz - wx;

            m[2] = xz - wy;
            m[6] = yz + wx;
            m[10] = 1 - ( xx + yy );

            // last column
            m[3] = 0;
            m[7] = 0;
            m[11] = 0;

            // bottom row
            m[12] = 0;
            m[13] = 0;
            m[14] = 0;
            m[15] = 1;

            return m;
        },

        normalizeQuaternion: function (q, dest) {
            dest = dest || q;
            var len = math.lenVec4([q[0], q[1], q[2], q[3]]);
            dest[0] = q[0] / len;
            dest[1] = q[1] / len;
            dest[2] = q[2] / len;
            dest[3] = q[3] / len;
            return dest;
        },

        conjugateQuaternion: function (q, dest) {
            dest = dest || q;
            dest[0] = -q[0];
            dest[1] = -q[1];
            dest[2] = -q[2];
            dest[3] = q[3];
            return dest;
        },

        inverseQuaternion: function (q, dest) {
            return math.normalizeQuaternion(math.conjugateQuaternion(q, dest));
        },

        quaternionToAngleAxis: function (q, angleAxis) {
            angleAxis = angleAxis || math.vec4();
            q = math.normalizeQuaternion(q, tempVec4);
            var q3 = q[3];
            var angle = 2 * Math.acos(q3);
            var s = Math.sqrt(1 - q3 * q3);
            if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt
                angleAxis[0] = q[0];
                angleAxis[1] = q[1];
                angleAxis[2] = q[2];
            } else {
                angleAxis[0] = q[0] / s;
                angleAxis[0] = q[1] / s;
                angleAxis[0] = q[2] / s;
            }
            angleAxis[3] = angle; // * 57.295779579;
            return angleAxis;
        }
    };

})();;/**
 * Boundary math functions.
 */
(function () {

    "use strict";

    var math = xeogl.math;

    /**
     * Returns a new, uninitialized 3D axis-aligned bounding box.
     *
     * @private
     */
    math.AABB3 = function (values) {
        return new Float32Array(values || 6);
    };

    /**
     * Returns a new, uninitialized 2D axis-aligned bounding box.
     *
     * @private
     */
    math.AABB2 = function (values) {
        return new Float32Array(values || 4);
    };

    /**
     * Returns a new, uninitialized 3D oriented bounding box (OBB).
     *
     * @private
     */
    math.OBB3 = function (values) {
        return new Float32Array(values || 32);
    };

    /**
     * Returns a new, uninitialized 2D oriented bounding box (OBB).
     *
     * @private
     */
    math.OBB2 = function (values) {
        return new Float32Array(values || 16);
    };


    /**
     * Transforms an OBB3 by a 4x4 matrix.
     *
     * @private
     */
    math.transformOBB3 = function (m, p, p2) {

        p2 = p2 || p;

        var i;
        var len = p.length;

        var x;
        var y;
        var z;

        var m0 = m[0];
        var m1 = m[1];
        var m2 = m[2];
        var m3 = m[3];
        var m4 = m[4];
        var m5 = m[5];
        var m6 = m[6];
        var m7 = m[7];
        var m8 = m[8];
        var m9 = m[9];
        var m10 = m[10];
        var m11 = m[11];
        var m12 = m[12];
        var m13 = m[13];
        var m14 = m[14];
        var m15 = m[15];

        for (i = 0; i < len; i += 4) {

            x = p[i + 0];
            y = p[i + 1];
            z = p[i + 2];

            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;
            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;
            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;
            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;
        }

        return p2;
    };

    /**
     * Gets the diagonal size of an AABB3 given as minima and maxima.
     *
     * @private
     */
    math.getAABB3Diag = (function () {

        var min = new Float32Array(3);
        var max = new Float32Array(3);
        var tempVec3 = new Float32Array(3);

        return function (aabb) {

            min[0] = aabb[0];
            min[1] = aabb[1];
            min[2] = aabb[2];

            max[0] = aabb[3];
            max[1] = aabb[4];
            max[2] = aabb[5];

            math.subVec3(max, min, tempVec3);

            return Math.abs(math.lenVec3(tempVec3));
        };
    })();

    /**
     * Get a diagonal boundary size that is symmetrical about the given point.
     *
     * @private
     */
    math.getAABB3DiagPoint = (function () {

        var min = new Float32Array(3);
        var max = new Float32Array(3);
        var tempVec3 = new Float32Array(3);

        return function (aabb, p) {

            min[0] = aabb[0];
            min[1] = aabb[1];
            min[2] = aabb[2];

            max[0] = aabb[3];
            max[1] = aabb[4];
            max[2] = aabb[5];

            var diagVec = math.subVec3(max, min, tempVec3);

            var xneg = p[0] - aabb[0];
            var xpos = aabb[3] - p[0];
            var yneg = p[1] - aabb[1];
            var ypos = aabb[4] - p[1];
            var zneg = p[2] - aabb[2];
            var zpos = aabb[5] - p[2];

            diagVec[0] += (xneg > xpos) ? xneg : xpos;
            diagVec[1] += (yneg > ypos) ? yneg : ypos;
            diagVec[2] += (zneg > zpos) ? zneg : zpos;

            return Math.abs(math.lenVec3(diagVec));
        };
    })();

    /**
     * Gets the center of an AABB.
     *
     * @private
     */
    math.getAABB3Center = function (aabb, dest) {
        var r = dest || math.vec3();

        r[0] = (aabb[3] + aabb[0] ) * 0.5;
        r[1] = (aabb[4] + aabb[1] ) * 0.5;
        r[2] = (aabb[5] + aabb[2] ) * 0.5;

        return r;
    };

    /**
     * Gets the center of a 2D AABB.
     *
     * @private
     */
    math.getAABB2Center = function (aabb, dest) {
        var r = dest || math.vec2();

        r[0] = (aabb[2] + aabb[0] ) / 2;
        r[1] = (aabb[3] + aabb[1] ) / 2;

        return r;
    };

    /**
     * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.
     * Creates new AABB if none supplied.
     *
     * @private
     */
    math.collapseAABB3 = function (aabb) {

        aabb = aabb || math.AABB3();

        aabb[0] = 10000000;
        aabb[1] = 10000000;
        aabb[2] = 10000000;
        aabb[3] = -10000000;
        aabb[4] = -10000000;
        aabb[5] = -10000000;

        return aabb;
    };

    /**
     * Converts an axis-aligned 3D boundary into an oriented boundary consisting of
     * an array of eight 3D positions, one for each corner of the boundary.
     *
     * @private
     */
    math.AABB3ToOBB3 = function (aabb, obb) {

        obb = obb || math.OBB3();

        obb[0] = aabb[0];
        obb[1] = aabb[1];
        obb[2] = aabb[2];
        obb[3] = 1;

        obb[4] = aabb[3];
        obb[5] = aabb[1];
        obb[6] = aabb[2];
        obb[7] = 1;

        obb[8] = aabb[3];
        obb[9] = aabb[4];
        obb[10] = aabb[2];
        obb[11] = 1;

        obb[12] = aabb[0];
        obb[13] = aabb[4];
        obb[14] = aabb[2];
        obb[15] = 1;

        obb[16] = aabb[0];
        obb[17] = aabb[1];
        obb[18] = aabb[5];
        obb[19] = 1;

        obb[20] = aabb[3];
        obb[21] = aabb[1];
        obb[22] = aabb[5];
        obb[23] = 1;

        obb[24] = aabb[3];
        obb[25] = aabb[4];
        obb[26] = aabb[5];
        obb[27] = 1;

        obb[28] = aabb[0];
        obb[29] = aabb[4];
        obb[30] = aabb[5];
        obb[31] = 1;

        return obb;
    };

    /**
     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.
     *
     * @private
     */
    math.positions3ToAABB3 = function (positions, aabb) {

        aabb = aabb || math.AABB3();

        var xmin = 100000;
        var ymin = 100000;
        var zmin = 100000;
        var xmax = -100000;
        var ymax = -100000;
        var zmax = -100000;

        var x, y, z;

        for (var i = 0, len = positions.length; i < len; i += 3) {

            x = positions[i + 0];
            y = positions[i + 1];
            z = positions[i + 2];

            if (x < xmin) {
                xmin = x;
            }

            if (y < ymin) {
                ymin = y;
            }

            if (z < zmin) {
                zmin = z;
            }

            if (x > xmax) {
                xmax = x;
            }

            if (y > ymax) {
                ymax = y;
            }

            if (z > zmax) {
                zmax = z;
            }
        }

        aabb[0] = xmin;
        aabb[1] = ymin;
        aabb[2] = zmin;
        aabb[3] = xmax;
        aabb[4] = ymax;
        aabb[5] = zmax;

        return aabb;
    };

    /**
     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.
     *
     * @private
     */
    math.OBB3ToAABB3 = function (obb, aabb) {

        aabb = aabb || math.AABB3();

        var xmin = 100000;
        var ymin = 100000;
        var zmin = 100000;
        var xmax = -100000;
        var ymax = -100000;
        var zmax = -100000;

        var x, y, z;

        for (var i = 0, len = obb.length; i < len; i += 4) {

            x = obb[i + 0];
            y = obb[i + 1];
            z = obb[i + 2];

            if (x < xmin) {
                xmin = x;
            }

            if (y < ymin) {
                ymin = y;
            }

            if (z < zmin) {
                zmin = z;
            }

            if (x > xmax) {
                xmax = x;
            }

            if (y > ymax) {
                ymax = y;
            }

            if (z > zmax) {
                zmax = z;
            }
        }

        aabb[0] = xmin;
        aabb[1] = ymin;
        aabb[2] = zmin;
        aabb[3] = xmax;
        aabb[4] = ymax;
        aabb[5] = zmax;

        return aabb;
    };

    /**
     * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.
     *
     * @private
     */
    math.points3ToAABB3 = function (points, aabb) {

        aabb = aabb || math.AABB3();

        var xmin = 100000;
        var ymin = 100000;
        var zmin = 100000;
        var xmax = -100000;
        var ymax = -100000;
        var zmax = -100000;

        var x, y, z;

        for (var i = 0, len = points.length; i < len; i++) {

            x = points[i][0];
            y = points[i][1];
            z = points[i][2];

            if (x < xmin) {
                xmin = x;
            }

            if (y < ymin) {
                ymin = y;
            }

            if (z < zmin) {
                zmin = z;
            }

            if (x > xmax) {
                xmax = x;
            }

            if (y > ymax) {
                ymax = y;
            }

            if (z > zmax) {
                zmax = z;
            }
        }

        aabb[0] = xmin;
        aabb[1] = ymin;
        aabb[2] = zmin;
        aabb[3] = xmax;
        aabb[4] = ymax;
        aabb[5] = zmax;

        return aabb;
    };

    /**
     * Finds the minimum boundary sphere enclosing the given 3D points.
     *
     * @private
     */
    math.points3ToSphere3 = (function () {

        var tempVec3 = new Float32Array(3);

        return function (points, sphere) {

            sphere = sphere || math.vec4();

            var x = 0;
            var y = 0;
            var z = 0;

            var i;
            var numPoints = points.length;

            for (i = 0; i < numPoints; i++) {
                x += points[i][0];
                y += points[i][1];
                z += points[i][2];
            }

            sphere[0] = x / numPoints;
            sphere[1] = y / numPoints;
            sphere[2] = z / numPoints;

            var radius = 0;
            var dist;

            for (i = 0; i < numPoints; i++) {

                dist = Math.abs(math.lenVec3(math.subVec3(points[i], sphere, tempVec3)));

                if (dist > radius) {
                    radius = dist;
                }
            }

            sphere[3] = radius;

            return sphere;
        };
    })();

    /**
     * Finds the minimum boundary sphere enclosing the given 3D points.
     *
     * @private
     */
    math.OBB3ToSphere3 = (function () {

        var point = new Float32Array(3);
        var tempVec3 = new Float32Array(3);

        return function (points, sphere) {

            sphere = sphere || math.vec4();

            var x = 0;
            var y = 0;
            var z = 0;

            var i;
            var lenPoints = points.length;
            var numPoints = lenPoints / 4;

            for (i = 0; i < lenPoints; i += 4) {
                x += points[i + 0];
                y += points[i + 1];
                z += points[i + 2];
            }

            sphere[0] = x / numPoints;
            sphere[1] = y / numPoints;
            sphere[2] = z / numPoints;

            var radius = 0;
            var dist;

            for (i = 0; i < lenPoints; i += 4) {

                point[0] = points[i + 0];
                point[1] = points[i + 1];
                point[2] = points[i + 2];

                dist = Math.abs(math.lenVec3(math.subVec3(point, sphere, tempVec3)));

                if (dist > radius) {
                    radius = dist;
                }
            }

            sphere[3] = radius;

            return sphere;
        };
    })();

    /**
     * Gets the center of a bounding sphere.
     *
     * @private
     */
    math.getSphere3Center = function (sphere, dest) {
        dest = dest || math.vec3();

        dest[0] = sphere[0];
        dest[1] = sphere[1];
        dest[2] = sphere[2];

        return dest;
    };

    /**
     * Expands the first axis-aligned 3D boundary to enclose the second, if required.
     *
     * @private
     */
    math.expandAABB3 = function (aabb1, aabb2) {

        if (aabb1[0] > aabb2[0]) {
            aabb1[0] = aabb2[0];
        }

        if (aabb1[1] > aabb2[1]) {
            aabb1[1] = aabb2[1];
        }

        if (aabb1[2] > aabb2[2]) {
            aabb1[2] = aabb2[2];
        }

        if (aabb1[3] < aabb2[3]) {
            aabb1[3] = aabb2[3];
        }

        if (aabb1[4] < aabb2[4]) {
            aabb1[4] = aabb2[4];
        }

        if (aabb1[5] < aabb2[5]) {
            aabb1[5] = aabb2[5];
        }

        return aabb1;
    };

    /**
     * Expands an axis-aligned 3D boundary to enclose the given point, if needed.
     *
     * @private
     */
    math.expandAABB3Point3 = function (aabb, p) {

        if (aabb[0] < p[0]) {
            aabb[0] = p[0];
        }

        if (aabb[1] < p[1]) {
            aabb[1] = p[1];
        }

        if (aabb[2] < p[2]) {
            aabb[2] = p[2];
        }

        if (aabb[3] > p[0]) {
            aabb[3] = p[0];
        }

        if (aabb[4] > p[1]) {
            aabb[4] = p[1];
        }

        if (aabb[5] > p[2]) {
            aabb[5] = p[2];
        }

        return aabb;
    };

    /**
     * Collapses a 2D axis-aligned boundary, ready to expand to fit 2D points.
     * Creates new AABB if none supplied.
     *
     * @private
     */
    math.collapseAABB2 = function (aabb) {

        aabb = aabb || math.AABB2();

        aabb[0] = 10000000;
        aabb[1] = 10000000;
        aabb[2] = -10000000;
        aabb[3] = -10000000;

        return aabb;
    };

    /**
     * Finds the minimum 2D projected axis-aligned boundary enclosing the given 3D points.
     *
     * @private
     */
    math.OBB3ToAABB2 = function (points, aabb) {

        aabb = aabb || math.AABB2();

        var xmin = 10000000;
        var ymin = 10000000;
        var xmax = -10000000;
        var ymax = -10000000;

        var x;
        var y;
        var w;
        var f;

        for (var i = 0, len = points.length; i < len; i += 4) {

            x = points[i + 0];
            y = points[i + 1];
            w = points[i + 3] || 1.0;

            f = 1.0 / w;

            x *= f;
            y *= f;

            if (x < xmin) {
                xmin = x;
            }

            if (y < ymin) {
                ymin = y;
            }

            if (x > xmax) {
                xmax = x;
            }

            if (y > ymax) {
                ymax = y;
            }
        }

        aabb[0] = xmin;
        aabb[1] = ymin;
        aabb[2] = xmax;
        aabb[3] = ymax;

        return aabb;
    };

    /**
     * Expands the first axis-aligned 2D boundary to enclose the second, if required.
     *
     * @private
     */
    math.expandAABB2 = function (aabb1, aabb2) {

        if (aabb1[0] > aabb2[0]) {
            aabb1[0] = aabb2[0];
        }

        if (aabb1[1] > aabb2[1]) {
            aabb1[1] = aabb2[1];
        }

        if (aabb1[2] < aabb2[2]) {
            aabb1[2] = aabb2[2];
        }

        if (aabb1[3] < aabb2[3]) {
            aabb1[3] = aabb2[3];
        }

        return aabb1;
    };

    /**
     * Expands an axis-aligned 2D boundary to enclose the given point, if required.
     *
     * @private
     */
    math.expandAABB2Point2 = function (aabb, p) {

        if (aabb[0] > p[0]) {
            aabb[0] = p[0];
        }

        if (aabb[1] > p[1]) {
            aabb[1] = p[1];
        }

        if (aabb[2] < p[0]) {
            aabb[2] = p[0];
        }

        if (aabb[3] < p[1]) {
            aabb[3] = p[1];
        }

        return aabb;
    };

    math.AABB2ToCanvas = function (aabb, canvasWidth, canvasHeight, aabb2) {

        aabb2 = aabb2 || aabb;

        var xmin = (aabb[0] + 1.0) * 0.5;
        var ymin = (aabb[1] + 1.0) * 0.5;
        var xmax = (aabb[2] + 1.0) * 0.5;
        var ymax = (aabb[3] + 1.0) * 0.5;

        aabb2[0] = Math.floor(xmin * canvasWidth);
        aabb2[1] = canvasHeight - Math.floor(ymax * canvasHeight);
        aabb2[2] = Math.floor(xmax * canvasWidth);
        aabb2[3] = canvasHeight - Math.floor(ymin * canvasHeight);

        return aabb2;
    };

})();;/**
 * Boundary math functions.
 */
(function () {

    "use strict";

    var math = xeogl.math;

    /**
     * Calculates the normal vector of a trianglel.
     *
     * @private
     */
    math.triangleNormal = function (a, b, c, normal) {

        normal = normal || math.vec3();

        var p1x = b[0] - a[0];
        var p1y = b[1] - a[1];
        var p1z = b[2] - a[2];

        var p2x = c[0] - a[0];
        var p2y = c[1] - a[1];
        var p2z = c[2] - a[2];

        var p3x = p1y * p2z - p1z * p2y;
        var p3y = p1z * p2x - p1x * p2z;
        var p3z = p1x * p2y - p1y * p2x;

        var mag = Math.sqrt(p3x * p3x + p3y * p3y + p3z * p3z);
        if (mag === 0) {
            normal[0] = 0;
            normal[1] = 0;
            normal[2] = 0;
        } else {
            normal[0] = p3x / mag;
            normal[1] = p3y / mag;
            normal[2] = p3z / mag;
        }

        return normal
    };

    /**
     * Finds the intersection of a 3D ray with a 3D triangle.
     *
     * @private
     */
    math.rayTriangleIntersect = (function() {

        var tempVec3 = new Float32Array(3);
        var tempVec3b = new Float32Array(3);
        var tempVec3c = new Float32Array(3);
        var tempVec3d = new Float32Array(3);
        var tempVec3e = new Float32Array(3);

        return function (origin, dir, a, b, c, isect) {

            isect = isect || math.vec3();

            var EPSILON = 0.000001;

            var edge1 = math.subVec3(b, a, tempVec3);
            var edge2 = math.subVec3(c, a, tempVec3b);

            var pvec = math.cross3Vec3(dir, edge2, tempVec3c);
            var det = math.dotVec3(edge1, pvec);
            if (det < EPSILON) {
                return null;
            }

            var tvec = math.subVec3(origin, a, tempVec3d);
            var u = math.dotVec3(tvec, pvec);
            if (u < 0 || u > det) {
                return null;
            }

            var qvec = math.cross3Vec3(tvec, edge1, tempVec3e);
            var v = math.dotVec3(dir, qvec);
            if (v < 0 || u + v > det) {
                return null;
            }

            var t = math.dotVec3(edge2, qvec) / det;
            isect[0] = origin[0] + t * dir[0];
            isect[1] = origin[1] + t * dir[1];
            isect[2] = origin[2] + t * dir[2];

            return isect;
        };
    })();

    /**
     * Finds the intersection of a 3D ray with a plane defined by 3 points.
     *
     * @private
     */
    math.rayPlaneIntersect = (function() {

        var tempVec3 = new Float32Array(3);
        var tempVec3b = new Float32Array(3);
        var tempVec3c = new Float32Array(3);
        var tempVec3d = new Float32Array(3);

        return function (origin, dir, a, b, c, isect) {

            isect = isect || math.vec3();

            dir = math.normalizeVec3(dir, tempVec3);

            var edge1 = math.subVec3(b, a, tempVec3b);
            var edge2 = math.subVec3(c, a, tempVec3c);

            var n = math.cross3Vec3(edge1, edge2, tempVec3d);
            math.normalizeVec3(n, n);

            var d = -math.dotVec3(a, n);

            var t = -(math.dotVec3(origin, n) + d) / math.dotVec3(dir, n);

            isect[0] = origin[0] + t * dir[0];
            isect[1] = origin[1] + t * dir[1];
            isect[2] = origin[2] + t * dir[2];

            return isect;
        };
    })();

    /**
     * Gets barycentric coordinates from cartesian coordinates within a triangle.
     *
     * @private
     */
    math.cartesianToBarycentric = (function() {

        var tempVec3 = new Float32Array(3);
        var tempVec3b = new Float32Array(3);
        var tempVec3c = new Float32Array(3);

        return function (cartesian, a, b, c, dest) {

            var v0 = math.subVec3(c, a, tempVec3);
            var v1 = math.subVec3(b, a, tempVec3b);
            var v2 = math.subVec3(cartesian, a, tempVec3c);

            var dot00 = math.dotVec3(v0, v0);
            var dot01 = math.dotVec3(v0, v1);
            var dot02 = math.dotVec3(v0, v2);
            var dot11 = math.dotVec3(v1, v1);
            var dot12 = math.dotVec3(v1, v2);

            var denom = ( dot00 * dot11 - dot01 * dot01 );

            // Colinear or singular triangle

            if (denom === 0) {

                // Arbitrary location outside of triangle

                return null;
            }

            var invDenom = 1 / denom;

            var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
            var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

            dest[0] = 1 - u - v;
            dest[1] = v;
            dest[2] = u;

            return dest;
        };
    })();

    /**
     * Returns true if the given barycentric coordinates are within their triangle.
     *
     * @private
     */
    math.barycentricInsideTriangle = function (bary) {

        var v = bary[1];
        var u = bary[2];

        return (u >= 0) && (v >= 0) && (u + v < 1);
    };

    /**
     * Gets cartesian coordinates from barycentric coordinates within a triangle.
     *
     * @private
     */
    math.barycentricToCartesian = function (bary, a, b, c, cartesian) {

        cartesian = cartesian || math.vec3();

        var u = bary[0];
        var v = bary[1];
        var w = bary[2];

        cartesian[0] = a[0] * u + b[0] * v + c[0] * w;
        cartesian[1] = a[1] * u + b[1] * v + c[1] * w;
        cartesian[2] = a[2] * u + b[2] * v + c[2] * w;

        return cartesian;
    };

})();;/**
 * Boundary math functions.
 */
(function () {

    "use strict";

    var math = xeogl.math;

    /**
     * Builds normal vectors from positions and indices.
     *
     * @private
     */
    math.buildNormals = (function () {

        var a = math.vec3();
        var b = math.vec3();
        var c = math.vec3();
        var ab = math.vec3();
        var ac = math.vec3();
        var crossVec = math.vec3();
        var normVec = math.vec3();

        return function (positions, indices) {

            var i;
            var len;
            var nvecs = new Array(positions.length / 3);
            var j0;
            var j1;
            var j2;

            for (i = 0, len = indices.length; i < len; i += 3) {

                j0 = indices[i];
                j1 = indices[i + 1];
                j2 = indices[i + 2];

                a[0] = positions[j0 * 3];
                a[1] = positions[j0 * 3 + 1];
                a[2] = positions[j0 * 3 + 2];

                b[0] = positions[j1 * 3];
                b[1] = positions[j1 * 3 + 1];
                b[2] = positions[j1 * 3 + 2];

                c[0] = positions[j2 * 3];
                c[1] = positions[j2 * 3 + 1];
                c[2] = positions[j2 * 3 + 2];

                math.subVec3(b, a, ab);
                math.subVec3(c, a, ac);

                math.normalizeVec3(math.cross3Vec3(ab, ac, crossVec), normVec);

                if (!nvecs[j0]) {
                    nvecs[j0] = [];
                }
                if (!nvecs[j1]) {
                    nvecs[j1] = [];
                }
                if (!nvecs[j2]) {
                    nvecs[j2] = [];
                }

                nvecs[j0].push(normVec);
                nvecs[j1].push(normVec);
                nvecs[j2].push(normVec);
            }

            var normals = new Float32Array(positions.length);

            // now go through and average out everything
            for (i = 0, len = nvecs.length; i < len; i++) {
                var count = nvecs[i].length;
                var x = 0;
                var y = 0;
                var z = 0;
                for (var j = 0; j < count; j++) {
                    x += nvecs[i][j][0];
                    y += nvecs[i][j][1];
                    z += nvecs[i][j][2];
                }
                normals[i * 3] = (x / count);
                normals[i * 3 + 1] = (y / count);
                normals[i * 3 + 2] = (z / count);
            }

            return normals;
        };
    })();

    /**
     * Builds vertex tangent vectors from positions, UVs and indices.
     *
     * @private
     */
    math.buildTangents = (function () {

        var tempVec3 = new Float32Array(3);
        var tempVec3b = new Float32Array(3);
        var tempVec3c = new Float32Array(3);
        var tempVec3d = new Float32Array(3);
        var tempVec3e = new Float32Array(3);
        var tempVec3f = new Float32Array(3);
        var tempVec3g = new Float32Array(3);

        return function (positions, indices, uv) {

            var tangents = new Float32Array(positions.length);

            // The vertex arrays needs to be calculated
            // before the calculation of the tangents

            for (var location = 0; location < indices.length; location += 3) {

                // Recontructing each vertex and UV coordinate into the respective vectors

                var index = indices[location];

                var v0 = positions.subarray(index * 3, index * 3 + 3);
                var uv0 = uv.subarray(index * 2, index * 2 + 2);

                index = indices[location + 1];

                var v1 = positions.subarray(index * 3, index * 3 + 3);
                var uv1 = uv.subarray(index * 2, index * 2 + 2);

                index = indices[location + 2];

                var v2 = positions.subarray(index * 3, index * 3 + 3);
                var uv2 = uv.subarray(index * 2, index * 2 + 2);

                var deltaPos1 = math.subVec3(v1, v0, tempVec3);
                var deltaPos2 = math.subVec3(v2, v0, tempVec3b);

                var deltaUV1 = math.subVec2(uv1, uv0, tempVec3c);
                var deltaUV2 = math.subVec2(uv2, uv0, tempVec3d);

                var r = 1 / ((deltaUV1[0] * deltaUV2[1]) - (deltaUV1[1] * deltaUV2[0]));

                var tangent = math.mulVec3Scalar(
                    math.subVec3(
                        math.mulVec3Scalar(deltaPos1, deltaUV2[1], tempVec3e),
                        math.mulVec3Scalar(deltaPos2, deltaUV1[1], tempVec3f),
                        tempVec3g
                    ),
                    r,
                    tempVec3f
                );

                // Average the value of the vectors

                var addTo;

                for (var v = 0; v < 3; v++) {
                    addTo = indices[location + v] * 3;
                    tangents[addTo] += tangent[0];
                    tangents[addTo + 1] += tangent[1];
                    tangents[addTo + 2] += tangent[2];
                }
            }

            return tangents;
        };
    })();

    /**
     * Builds vertex and index arrays needed by color-indexed triangle picking.
     *
     * @private
     */
    math.buildPickTriangles = function (positions, indices) {

        var numIndices = indices.length;
        var pickPositions = new Float32Array(numIndices * 30); // FIXME: Why do we need to extend size like this to make large meshes pickable?
        var pickColors = new Float32Array(numIndices * 40);
        var primIndex = 0;
        var vi;// Positions array index
        var pvi;// Picking positions array index
        var pci; // Picking color array index

        // Triangle indices
        var i;
        var r;
        var g;
        var b;
        var a;

        for (var location = 0; location < numIndices; location += 3) {

            pvi = location * 3;
            pci = location * 4;

            // Primitive-indexed triangle pick color

            a = (primIndex >> 24 & 0xFF) / 255.0;
            b = (primIndex >> 16 & 0xFF) / 255.0;
            g = (primIndex >> 8 & 0xFF) / 255.0;
            r = (primIndex & 0xFF) / 255.0;

            // A

            i = indices[location];
            vi = i * 3;

            pickPositions[pvi] = positions[vi];
            pickPositions[pvi + 1] = positions[vi + 1];
            pickPositions[pvi + 2] = positions[vi + 2];

            pickColors[pci] = r;
            pickColors[pci + 1] = g;
            pickColors[pci + 2] = b;
            pickColors[pci + 3] = a;

            // B

            i = indices[location + 1];
            vi = i * 3;

            pickPositions[pvi + 3] = positions[vi];
            pickPositions[pvi + 4] = positions[vi + 1];
            pickPositions[pvi + 5] = positions[vi + 2];

            pickColors[pci + 4] = r;
            pickColors[pci + 5] = g;
            pickColors[pci + 6] = b;
            pickColors[pci + 7] = a;

            // C

            i = indices[location + 2];
            vi = i * 3;

            pickPositions[pvi + 6] = positions[vi];
            pickPositions[pvi + 7] = positions[vi + 1];
            pickPositions[pvi + 8] = positions[vi + 2];

            pickColors[pci + 8] = r;
            pickColors[pci + 9] = g;
            pickColors[pci + 10] = b;
            pickColors[pci + 11] = a;

            primIndex++;
        }

        return {
            positions: pickPositions,
            colors: pickColors
        };
    };
}());;/**
 * Curve math functions.
 */
(function () {

    "use strict";

    var math = xeogl.math;

    math.tangentQuadraticBezier = function (t, p0, p1, p2) {
        return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );
    };

    math.tangentQuadraticBezier = function (t, p0, p1, p2, p3) {
        return -3 * p0 * (1 - t) * (1 - t) +
            3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) +
            6 * t * p2 * (1 - t) - 3 * t * t * p2 +
            3 * t * t * p3;
    };

    math.tangentSpline = function (t) {
        var h00 = 6 * t * t - 6 * t;
        var h10 = 3 * t * t - 4 * t + 1;
        var h01 = -6 * t * t + 6 * t;
        var h11 = 3 * t * t - 2 * t;
        return h00 + h10 + h01 + h11;
    };

    math.catmullRomInterpolate = function (p0, p1, p2, p3, t) {
        var v0 = ( p2 - p0 ) * 0.5;
        var v1 = ( p3 - p1 ) * 0.5;
        var t2 = t * t;
        var t3 = t * t2;
        return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( -3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
    };

    // Bezier Curve formulii from https://en.wikipedia.org/wiki/B%C3%A9zier_curve

    // Quad Bezier Functions

    math.b2p0 = function (t, p) {
        var k = 1 - t;
        return k * k * p;

    };

    math.b2p1 = function (t, p) {
        return 2 * ( 1 - t ) * t * p;
    };

    math.b2p2 = function (t, p) {
        return t * t * p;
    };

    math.b2 = function (t, p0, p1, p2) {
        return this.b2p0(t, p0) + this.b2p1(t, p1) + this.b2p2(t, p2);
    };

    // Cubic Bezier Functions

    math.b3p0 = function (t, p) {
        var k = 1 - t;
        return k * k * k * p;
    };

    math.b3p1 = function (t, p) {
        var k = 1 - t;
        return 3 * k * k * t * p;
    };

    math.b3p2 = function (t, p) {
        var k = 1 - t;
        return 3 * k * t * t * p;
    };

    math.b3p3 = function (t, p) {
        return t * t * t * p;
    };

    math.b3 = function (t, p0, p1, p2, p3) {
        return this.b3p0(t, p0) + this.b3p1(t, p1) + this.b3p2(t, p2) + this.b3p3(t, p3);
    };
})();;(function () {

    "use strict";

    xeogl.renderer = xeogl.renderer || {};

    /**
     *
     */
    xeogl.renderer.Renderer = function (stats, canvas, gl, options) {

        options = options || {};

        this.stats = stats || {};

        this.gl = gl;
        this.canvas = canvas;

        this._programFactory = new xeogl.renderer.ProgramFactory(this.stats, gl);
        this._objectFactory = new xeogl.renderer.ObjectFactory();
        this._chunkFactory = new xeogl.renderer.ChunkFactory();

        /**
         * Indicates if the canvas is transparent
         * @type {boolean}
         */
        this.transparent = options.transparent === true;

        /**
         * Optional callback to fire when renderer wants to
         * bind an output framebuffer. This is useful when we need to bind a stereo output buffer for WebVR.
         *
         * When this is missing, the renderer will implicitly bind
         * WebGL's default framebuffer.
         *
         * The callback takes one parameter, which is the index of the current
         * rendering pass in which the buffer is to be bound.
         *
         * Use like this: myRenderer.bindOutputFramebuffer = function(pass) { .. });
         */
        this.bindOutputFramebuffer = null;

        /**
         * Optional callback to fire when renderer wants to
         * unbind any output drawing framebuffer that was
         * previously bound with #bindOutputFramebuffer.
         *
         * The callback takes one parameter, which is the index of the current
         * rendering pass in which the buffer is to be bound.
         *
         * Use like this: myRenderer.unbindOutputFramebuffer = function(pass) { .. });
         *
         * Callback takes no parameters.
         */
        this.unbindOutputFramebuffer = null;

        // Objects mapped to their IDs
        this.objects = {};

        // The current ambient color, if available
        this._ambient = null;

        /**
         * The current ambient color.
         * @type Float32Array
         */
        this.ambientColor = xeogl.math.vec4([0,0,0,1]);

        // Objects in a list, ordered by state
        this._objectList = [];
        this._objectListLen = 0;

        // List of objects that were rendered in the last picking pass,
        // for indexing when using color-index picking
        this._objectPickList = [];
        this._objectPickListLen = 0;

        // The frame context holds state shared across a single render of the
        // draw list, along with any results of the render, such as pick hits
        this._frameCtx = {
            canvas: this.canvas,
            renderTarget: null,
            renderBuf: null,
            depthbufEnabled: null,
            clearDepth: null,
            depthFunc: null,
            blendEnabled: false,
            backfaces: true,
            frontface: true, // true = "ccw" else "cw"
            textureUnit: 0,
            transparent: false, // True while rendering transparency bin
            ambientColor: null,
            drawElements: 0,
            useProgram: 0,
            bindTexture: 0,
            bindArray: null,
            pass: null,
            bindOutputFramebuffer: null,
            pickIndex: 0
        };

        //----------------- Render states --------------------------------------

        /**
         Visibility render state.
         @property visibility
         @type {renderer.Visibility}
         */
        this.visibility = null;

        /**
         Culling render state.
         @property cull
         @type {renderer.Cull}
         */
        this.cull = null;

        /**
         Modes render state.
         @property modes
         @type {renderer.Modes}
         */
        this.modes = null;

        /**
         Render state for an effects layer.
         @property layer
         @type {renderer.Layer}
         */
        this.layer = null;

        /**
         Render state for an effects pipeline stage.
         @property stage
         @type {renderer.Layer}
         */
        this.stage = null;

        /**
         Depth buffer render state.
         @property depthBuf
         @type {renderer.DepthBuf}
         */
        this.depthBuf = null;

        /**
         Color buffer render state.
         @property colorBuf
         @type {renderer.ColorBuf}
         */
        this.colorBuf = null;

        /**
         Lights render state.
         @property lights
         @type {renderer.Lights}
         */
        this.lights = null;

        /**
         Material render state.
         @property material
         @type {renderer.Material}
         */
        this.material = null;

        /**
         Environmental reflection render state.
         @property reflection
         @type {renderer.Reflect}
         */
        this.reflect = null;

        /**
         Modelling transform render state.
         @property modelTransform
         @type {renderer.Transform}
         */
        this.modelTransform = null;

        /**
         View transform render state.
         @property viewTransform
         @type {renderer.Transform}
         */
        this.viewTransform = null;

        /**
         Projection transform render state.
         @property projTransform
         @type {renderer.Transform}
         */
        this.projTransform = null;

        /**
         Billboard render state.
         @property billboard
         @type {renderer.Billboard}
         */
        this.billboard = null;

        /**
         Stationary render state.
         @property stationary
         @type {renderer.Stationary}
         */
        this.stationary = null;

        /**
         Color target render state.
         @property colorTarget
         @type {renderer.RenderTarget}
         */
        this.colorTarget = null;

        /**
         Depth target render state.
         @property depthTarget
         @type {renderer.RenderTarget}
         */
        this.depthTarget = null;

        /**
         Cross-section planes render state.
         @property clips
         @type {renderer.Clips}
         */
        this.clips = null;

        /**
         Custom shader render state.
         @property shader
         @type {renderer.Shader}
         */
        this.shader = null;

        /**
         Render state providing custom shader params.
         @property shaderParams
         @type {renderer.Shader}
         */
        this.shaderParams = null;

        /**
         Geometry render state.
         @property geometry
         @type {renderer.Geometry}
         */
        this.geometry = null;

        /**
         Viewport render state.
         @property viewport
         @type {renderer.Viewport}
         */
        this.viewport = null;

        //----------------- Renderer dirty flags -------------------------------

        /**
         * Flags the object list as needing to be rebuilt from the object map.
         */
        this.objectListDirty = true;

        /**
         * Flags the object list as needing state orders to be recomputed.
         */
        this.stateOrderDirty = true;

        /**
         * Flags the object list as needing to be state-sorted.
         */
        this.stateSortDirty = true;

        /**
         * Flags the image as needing to be redrawn from the object list.
         */
        this.imageDirty = true;
    };

    /**
     * Reallocates WebGL resources for objects within this renderer.
     */
    xeogl.renderer.Renderer.prototype.webglRestored = function (gl) {

        this.gl = gl;

        // Re-allocate programs
        this._programFactory.webglRestored(gl);

        // Re-bind chunks to the programs
        this._chunkFactory.webglRestored();

        // Rebuild pick buffer

        if (this.pickBuf) {
            this.pickBuf.webglRestored(gl);
        }

        // Need redraw

        this.imageDirty = true;
    };

    /**
     * Internally creates (or updates) a {@link xeogl.renderer.Object} of the given
     * ID from whatever component state cores are currently set on this {@link xeogl.Renderer}.
     * The object is created if it does not already exist in the display, otherwise
     * it is updated with the current states, possibly replacing states already
     * referenced by the object.
     *
     * @param {String} objectId ID of object to create or update
     */
    xeogl.renderer.Renderer.prototype.buildObject = function (objectId) {

        var object = this.objects[objectId];

        if (!object) {
            object = this._objectFactory.get(objectId);
            object.hash = "";
        }

        // Attach to the object any states that we need to get off it later.
        // Most of these will be used when composing the object's shader.

        object.stage = this.stage;
        object.layer = this.layer;
        object.colorTarget = this.colorTarget;
        object.depthTarget = this.depthTarget;
        object.material = this.material;
        object.reflect = this.reflect;
        object.geometry = this.geometry;
        object.visibility = this.visibility;
        object.cull = this.cull;
        object.modes = this.modes;
        object.billboard = this.billboard;
        object.stationary = this.stationary;
        object.viewport = this.viewport;

        // Build hash of the object's state configuration. This is used
        // to hash the object's shader so that it may be reused by other
        // objects that have the same state configuration.

        var hash = ([

            // Make sure that every state type
            // with a hash is concatenated here

            this.geometry.hash,
            this.shader.hash,
            this.clips.hash,
            this.material.hash,
            this.lights.hash,
            this.billboard.hash,
            this.stationary.hash

        ]).join(";");

        var newProgram = false;

        if (hash !== object.hash) {

            // Get new program for object

            if (object.program) {
                this._programFactory.put(object.program);
            }

            object.program = this._programFactory.get(hash, this);
            object.hash = hash;

            newProgram = true;

            // Handle shader error

            var programState = object.program;
            if (programState) {
                var program = programState.program;
                if (!program.allocated || !program.compiled || !program.validated || !program.linked) {
                    if (this.objects[objectId]) {
                        this.removeObject(objectId); // Don't keep faulty objects in the renderer
                    }
                    return {
                        error: true,
                        errorLog: program.errorLog
                    }
                }
            }
        }

        // Build list of draw chunks on the object

        // The order of some of these is important because some chunks will set
        // state on this._frameCtx to be consumed by other chunks downstream

        this._setChunk(object, 0, "program", object.program); // Must be first
        this._setChunk(object, 1, "modelTransform", this.modelTransform);
        this._setChunk(object, 2, "viewTransform", this.viewTransform);
        this._setChunk(object, 3, "projTransform", this.projTransform);
        this._setChunk(object, 4, "modes", this.modes);
        this._setChunk(object, 5, "shader", this.shader);
        this._setChunk(object, 6, "shaderParams", this.shaderParams);
        this._setChunk(object, 7, "depthBuf", this.depthBuf);
        this._setChunk(object, 8, "colorBuf", this.colorBuf);
        this._setChunk(object, 9, "lights", this.lights);
        this._setChunk(object, 10, this.material.type, this.material); // Supports different material systems
        this._setChunk(object, 11, "clips", this.clips);
        this._setChunk(object, 12, "viewport", this.viewport);
        this._setChunk(object, 13, "geometry", this.geometry);
        this._setChunk(object, 14, "draw", this.geometry, true); // Must be last

        // Ambient light is global across everything in display, and
        // can never be disabled, so grab it now because we want to
        // feed it to gl.clearColor before each display list render

        this._setAmbient(this.lights);

        if (!this.objects[objectId]) {
            this.objects[objectId] = object;
            this.objectListDirty = true;

        } else {

            // At the very least, the object sort order will need be recomputed
            this.stateOrderDirty = true;
        }

        object.compiled = true;

        return object;
    };

    /** Adds a render state chunk to a render graph object.
     */
    xeogl.renderer.Renderer.prototype._setChunk = function (object, order, type, state, neg) {

        var id;

        var chunkType = this._chunkFactory.types[type];

        if (type === "program") {
            id = (object.program.id + 1) * 100000000;

        } else if (chunkType.constructor.prototype.programGlobal) {
            id = state.id;

        } else {
            id = ((object.program.id + 1) * 100000000) + ((state.id + 1));
        }

        if (neg) {
            id *= 100000;
        }

        var oldChunk = object.chunks[order];

        if (oldChunk) {
            this._chunkFactory.putChunk(oldChunk);
        }

        // Attach new chunk

        object.chunks[order] = this._chunkFactory.getChunk(id, type, object.program.program, state);
    };

    // Sets the singular ambient light.
    xeogl.renderer.Renderer.prototype._setAmbient = function (state) {

        var lights = state.lights;
        var light;

        for (var i = 0, len = lights.length; i < len; i++) {

            light = lights[i];

            if (light.type === "ambient") {

                this._ambient = light;
            }
        }
    };

    /**
     * Removes an object from this Renderer
     *
     * @param {String} objectId ID of object to remove
     */
    xeogl.renderer.Renderer.prototype.removeObject = function (objectId) {

        var object = this.objects[objectId];

        if (!object) {

            // Object not found
            return;
        }

        // Release draw chunks
        var chunks = object.chunks;
        for (var i = 0, len = chunks.length; i < len; i++) {
            this._chunkFactory.putChunk(chunks[i]);
        }

        // Release object's shader
        this._programFactory.put(object.program);

        object.program = null;
        object.hash = null;

        // Release object
        this._objectFactory.put(object);

        delete this.objects[objectId];

        // Need to repack object map into fast iteration list
        this.objectListDirty = true;
    };

    /**
     * Renders a new frame, if neccessary.
     */
    xeogl.renderer.Renderer.prototype.render = function (params) {

        params = params || {};

        if (this.objectListDirty) {
            this._buildObjectList(); // Build the scene object list
            this.objectListDirty = false;
            this.stateOrderDirty = true; // Now needs state ordering
        }

        if (this.stateOrderDirty) {
            this._makeStateSortKeys(); // Determine the state sort order
            this.stateOrderDirty = false;
            this.stateSortDirty = true; // Now needs state sorting
        }

        if (this.stateSortDirty) {
            this._stateSort(); // State sort the scene object list
            this.stateSortDirty = false;
            this.imageDirty = true; // Now need to build object draw list
        }

        if (this.imageDirty || params.force) {
            this._renderObjectList({ // Render the draw list
                clear: (params.clear !== false), // Clear buffers by default
                opaqueOnly: params.opaqueOnly,
                pass: params.pass
            });
            this.stats.frame.frameCount++;
            this.imageDirty = false;
        }
    };

    /**
     * Builds the object list from the object map
     */
    xeogl.renderer.Renderer.prototype._buildObjectList = function () {
        this._objectListLen = 0;
        for (var objectId in this.objects) {
            if (this.objects.hasOwnProperty(objectId)) {
                this._objectList[this._objectListLen++] = this.objects[objectId];
            }
        }
    };

    /**
     * Generates object state sort keys
     */
    xeogl.renderer.Renderer.prototype._makeStateSortKeys = function () {
        var object;
        for (var i = 0, len = this._objectListLen; i < len; i++) {
            object = this._objectList[i];
            if (!object.program) { // Non-visual object (eg. sound)
                object.sortKey = -1;
            } else {
                object.sortKey =
                    ((object.stage.priority + 1) * 10000000000000000)
                    + ((object.modes.transparent ? 2 : 1) * 100000000000000)
                    + ((object.layer.priority + 1) * 10000000000000)
                    + ((object.program.id + 1) * 100000000)
                    + ((object.material.id + 1) * 10000)
                    + object.geometry.id;
            }
        }
    };

    /**
     * State-sorts the object list
     */
    xeogl.renderer.Renderer.prototype._stateSort = function () {
        this._objectList.length = this._objectListLen;
        this._objectList.sort(function (a, b) {
            return a.sortKey - b.sortKey;
        });
    };

    xeogl.renderer.Renderer.prototype._renderObjectList = function (params) {

        var gl = this.gl;

        // The extensions needs to be re-queried in case the context was lost and has been recreated.
        if (xeogl.WEBGL_INFO.SUPPORTED_EXTENSIONS["OES_element_index_uint"]) {
            gl.getExtension("OES_element_index_uint");
        }

        var ambient = this._ambient;
        var ambientColor;
        if (ambient) {
            var color = ambient.color;
            var intensity = ambient.intensity;
            this.ambientColor[0] = color[0] * intensity;
            this.ambientColor[1] = color[1] * intensity;
            this.ambientColor[2] = color[2] * intensity;
        } else {
            this.ambientColor[0] = 0;
            this.ambientColor[1] = 0;
            this.ambientColor[2] = 0;
        }

        var frameCtx = this._frameCtx;

        frameCtx.renderTarget = null;
        frameCtx.renderBuf = null;
        frameCtx.depthbufEnabled = null;
        frameCtx.clearDepth = null;
        frameCtx.depthFunc = gl.LESS;
        frameCtx.blendEnabled = false;
        frameCtx.backfaces = true;
        frameCtx.frontface = true; // true == "ccw" else "cw"
        frameCtx.textureUnit = 0;
        frameCtx.transparent = false; // True while rendering transparency bin
        frameCtx.ambientColor = this.ambientColor;
        frameCtx.drawElements = 0;
        frameCtx.useProgram = 0;
        frameCtx.bindTexture = 0;
        frameCtx.bindArray = 0;
        frameCtx.pass = params.pass;
        frameCtx.bindOutputFramebuffer = this.bindOutputFramebuffer;
        frameCtx.pickViewMatrix = params.pickViewMatrix;
        frameCtx.pickProjMatrix = params.pickProjMatrix;
        frameCtx.pickIndex = 0;

        // The extensions needs to be re-queried in case the context was lost and has been recreated.
        if (xeogl.WEBGL_INFO.SUPPORTED_EXTENSIONS["OES_element_index_uint"]) {
            gl.getExtension("OES_element_index_uint");
        }

        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);

        if (this.transparent || params.pickObject || params.pickSurface) {

            // Canvas is transparent - set clear color with zero alpha
            // to allow background to show through
            gl.clearColor(0, 0, 0, 0);
        } else {

            // Canvas is opaque - set clear color to the current ambient
            gl.clearColor(this.ambientColor[0], this.ambientColor[1], this.ambientColor[2], 1.0);
        }


        gl.enable(gl.DEPTH_TEST);
        gl.frontFace(gl.CCW);
        gl.disable(gl.CULL_FACE);
        gl.disable(gl.BLEND);

        var i;
        var len;
        var j;
        var lenj;
        var chunks;
        var chunk;

        var lastChunkId = this._lastChunkId = this._lastChunkId || new Int32Array(30);
        for (i = 0; i < 20; i++) {
            lastChunkId[i] = -9999999999999;
        }

        if (params.pickObject) {

            // Pick an object

            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            this._objectPickListLen = 0;

            var object;

            for (i = 0, len = this._objectListLen; i < len; i++) {

                object = this._objectList[i];

                if (!object.compiled) {
                    continue;
                }

                if (object.cull.culled === true) {
                    continue;
                }

                if (object.visibility.visible === false) {
                    continue;
                }

                if (object.modes.pickable === false) {
                    continue;
                }

                this._objectPickList[this._objectPickListLen++] = object;

                chunks = object.chunks;

                for (j = 0, lenj = chunks.length; j < lenj; j++) {

                    chunk = chunks[j];

                    if (chunk) {

                        // As we apply the state chunk lists we track the ID of most types
                        // of chunk in order to cull redundant re-applications of runs
                        // of the same chunk - except for those chunks with a 'unique' flag,
                        // because we don't want to collapse runs of draw chunks because
                        // they contain the GL drawElements calls which render the objects.

                        if (chunk.pickObject && (chunk.unique || lastChunkId[j] !== chunk.id)) {
                            chunk.pickObject(frameCtx);
                            lastChunkId[j] = chunk.id;
                        }
                    }
                }
            }

        } else if (params.pickSurface) {

            // Pick a triangle on an object

            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            if (params.object) {

                chunks = params.object.chunks;

                for (i = 0, len = chunks.length; i < len; i++) {
                    chunk = chunks[i];
                    if (chunk.pickPrimitive) {
                        chunk.pickPrimitive(frameCtx);
                    }
                }
            }

        } else {

            // Render all objects

            var startTime = (new Date()).getTime();

            if (this.bindOutputFramebuffer) {
                this.bindOutputFramebuffer(params.pass);
            }

            if (params.clear) {
                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            }

            for (i = 0, len = this._objectListLen; i < len; i++) {

                object = this._objectList[i];

                if (!object.compiled) {
                    continue;
                }

                if (object.cull.culled === true) {
                    continue;
                }

                if (object.visibility.visible === false) {
                    continue;
                }

                chunks = object.chunks;

                for (j = 0, lenj = chunks.length; j < lenj; j++) {

                    chunk = chunks[j];

                    if (chunk) {

                        // As we apply the state chunk lists we track the ID of most types
                        // of chunk in order to cull redundant re-applications of runs
                        // of the same chunk - except for those chunks with a 'unique' flag,
                        // because we don't want to collapse runs of draw chunks because
                        // they contain the GL drawElements calls which render the objects.

                        if (chunk.draw && (chunk.unique || lastChunkId[j] !== chunk.id)) {
                            chunk.draw(frameCtx);
                            lastChunkId[j] = chunk.id;
                        }
                    }
                }
            }

            var endTime = Date.now();

            var frameStats = this.stats.frame;

            frameStats.renderTime = (endTime - startTime) / 1000.0;
            frameStats.drawElements = frameCtx.drawElements;
            frameStats.useProgram = frameCtx.useProgram;
            frameStats.bindTexture = frameCtx.bindTexture;
            frameStats.bindArray = frameCtx.bindArray;

            if (frameCtx.renderBuf) {
                frameCtx.renderBuf.unbind();
            }

            var numTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);

            for (var ii = 0; ii < numTextureUnits; ++ii) {
                gl.activeTexture(gl.TEXTURE0 + ii);
                gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
                gl.bindTexture(gl.TEXTURE_2D, null);
            }

            if (this.unbindOutputFramebuffer) {
                this.unbindOutputFramebuffer(params.pass);
            }
        }
    };

    /**
     * Attempts to pick an object.
     *
     * @param {*} params Picking params.
     * @returns {*} Hit result, if any.
     */
    xeogl.renderer.Renderer.prototype.pick = (function () {

        var math = xeogl.math;

        var tempVec3a = math.vec3();
        var tempMat4a = math.mat4();
        var up = math.vec3([0, 1, 0]);
        var pickFrustumMatrix = math.frustumMat4(-1, 1, -1, 1, 0.1, 10000);

        return function (params) {

            var hit = null;
            var pickBuf = this.pickBuf;

            if (!pickBuf) {  // Lazy-create the pick buffer
                pickBuf = new xeogl.renderer.webgl.RenderBuffer(this.canvas, this.gl);
                this.pickBuf = pickBuf;
            }

            // Do any pending render
            this.render();

            pickBuf.bind();
            pickBuf.clear();


            var pickBufX;
            var pickBufY;
            var origin;
            var direction;
            var look;
            var pickViewMatrix = null;
            var pickProjMatrix = null;

            if (!params.canvasPos) {

                // Ray-picking with arbitrarily World-space ray

                origin = params.origin || math.vec3([0, 0, 0]);
                direction = params.direction || math.vec3([0, 0, 1]);
                look = math.addVec3(origin, direction, tempVec3a);

                pickViewMatrix = math.lookAtMat4v(origin, look, up, tempMat4a);
                pickProjMatrix = pickFrustumMatrix;

                pickBufX = this.canvas.clientWidth * 0.5;
                pickBufY = this.canvas.clientHeight * 0.5;

            } else {

                if (params.canvasPos) {
                    pickBufX = params.canvasPos[0];
                    pickBufY = params.canvasPos[1];

                } else {
                    pickBufX = this.canvas.clientWidth * 0.5;
                    pickBufY = this.canvas.clientHeight * 0.5;
                }
            }

            this._renderObjectList({
                pickObject: true,
                clear: true,
                pickViewMatrix: pickViewMatrix,
                pickProjMatrix: pickProjMatrix
            });

            //     gl.finish();

            // Convert picked pixel color to object index

            var pix = pickBuf.read(pickBufX, pickBufY);
            var pickedObjectIndex = pix[0] + pix[1] * 256 + pix[2] * 65536;
            pickedObjectIndex = (pickedObjectIndex >= 1) ? pickedObjectIndex - 1 : -1;

            var object = this._objectPickList[pickedObjectIndex];

            if (object) {

                // Object was picked

                hit = {
                    entity: object.id
                };

                // Now do a primitive-pick if requested

                if (params.pickSurface) {

                    pickBuf.clear();

                    this._renderObjectList({
                        pickSurface: true,
                        object: object,
                        pickViewMatrix: pickViewMatrix,
                        pickProjMatrix: pickProjMatrix,
                        clear: true
                    });

                    this.gl.finish();

                    // Convert picked pixel color to primitive index

                    pix = pickBuf.read(pickBufX, pickBufY);
                    var primIndex = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);
                    primIndex *= 3; // Convert from triangle number to first vertex in indices

                    hit.primIndex = primIndex;

                    if (pickViewMatrix) {
                        hit.origin = origin;
                        hit.direction = direction;
                    }
                }
            }

            pickBuf.unbind();

            return hit;
        };
    })();

    /**
     * Reads the colors of some pixels in the last rendered frame.
     *
     * @param {Float32Array} pixels
     * @param {Float32Array} colors
     * @param {Number} len
     * @param {Boolean} opaqueOnly
     */
    xeogl.renderer.Renderer.prototype.readPixels = function (pixels, colors, len, opaqueOnly) {

        if (!this._readPixelBuf) {
            this._readPixelBuf = new xeogl.renderer.webgl.RenderBuffer(this.canvas, this.gl);
        }

        this._readPixelBuf.bind();

        this._readPixelBuf.clear();

        this.render({
            force: true,
            opaqueOnly: opaqueOnly
        });

        var color;
        var i;
        var j;
        var k;

        for (i = 0; i < len; i++) {

            j = i * 2;
            k = i * 4;

            color = this._readPixelBuf.read(pixels[j], pixels[j + 1]);

            colors[k] = color[0];
            colors[k + 1] = color[1];
            colors[k + 2] = color[2];
            colors[k + 3] = color[3];
        }

        this._readPixelBuf.unbind();
    };

    /**
     * Destroys this Renderer.
     */
    xeogl.renderer.Renderer.prototype.destroy = function () {
        this._programFactory.destroy();
    };
})();
;(function () {

    "use strict";

    xeogl.renderer.webgl = {

        /** Maps xeogl component parameter names to WebGL enum names
         */
        enums: {
            funcAdd: "FUNC_ADD",
            funcSubtract: "FUNC_SUBTRACT",
            funcReverseSubtract: "FUNC_REVERSE_SUBTRACT",
            zero: "ZERO",
            one: "ONE",
            srcColor: "SRC_COLOR",
            oneMinusSrcColor: "ONE_MINUS_SRC_COLOR",
            dstColor: "DST_COLOR",
            oneMinusDstColor: "ONE_MINUS_DST_COLOR",
            srcAlpha: "SRC_ALPHA",
            oneMinusSrcAlpha: "ONE_MINUS_SRC_ALPHA",
            dstAlpha: "DST_ALPHA",
            oneMinusDstAlpha: "ONE_MINUS_DST_ALPHA",
            contantColor: "CONSTANT_COLOR",
            oneMinusConstantColor: "ONE_MINUS_CONSTANT_COLOR",
            constantAlpha: "CONSTANT_ALPHA",
            oneMinusConstantAlpha: "ONE_MINUS_CONSTANT_ALPHA",
            srcAlphaSaturate: "SRC_ALPHA_SATURATE",
            front: "FRONT",
            back: "BACK",
            frontAndBack: "FRONT_AND_BACK",
            never: "NEVER",
            less: "LESS",
            equal: "EQUAL",
            lequal: "LEQUAL",
            greater: "GREATER",
            notequal: "NOTEQUAL",
            gequal: "GEQUAL",
            always: "ALWAYS",
            cw: "CW",
            ccw: "CCW",
            linear: "LINEAR",
            nearest: "NEAREST",
            linearMipmapNearest: "LINEAR_MIPMAP_NEAREST",
            nearestMipmapNearest: "NEAREST_MIPMAP_NEAREST",
            nearestMipmapLinear: "NEAREST_MIPMAP_LINEAR",
            linearMipmapLinear: "LINEAR_MIPMAP_LINEAR",
            repeat: "REPEAT",
            clampToEdge: "CLAMP_TO_EDGE",
            mirroredRepeat: "MIRRORED_REPEAT",
            alpha: "ALPHA",
            rgb: "RGB",
            rgba: "RGBA",
            luminance: "LUMINANCE",
            luminanceAlpha: "LUMINANCE_ALPHA",
            textureBinding2D: "TEXTURE_BINDING_2D",
            textureBindingCubeMap: "TEXTURE_BINDING_CUBE_MAP",
            compareRToTexture: "COMPARE_R_TO_TEXTURE", // Hardware Shadowing Z-depth,
            unsignedByte: "UNSIGNED_BYTE"
        }
    };

})();;(function () {

    "use strict";

    /**
     * Buffer for vertices and indices
     *
     * @param gl WebGL
     * @param type  Eg. ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER
     * @param data  WebGL array wrapper
     * @param numItems Count of items in array wrapper
     * @param itemSize Size of each item
     * @param usage Eg. STATIC_DRAW
     */
    xeogl.renderer.webgl.ArrayBuffer = function (gl, type, data, numItems, itemSize, usage) {

        /**
         * True when this buffer is allocated and ready to go
         * @type {boolean}
         */
        this.allocated = false;

        this.gl = gl;

        this.type = type;

        this.itemType = data.constructor == Uint8Array   ? gl.UNSIGNED_BYTE :
            data.constructor == Uint16Array  ? gl.UNSIGNED_SHORT :
                data.constructor == Uint32Array  ? gl.UNSIGNED_INT :
                    gl.FLOAT;

        this.usage = usage;

        this.length = 0;
        this.numItems = 0;
        this.itemSize = itemSize;

        this._allocate(data);
    };

    /**
     * Allocates this buffer
     *
     * @param data
     * @private
     */
    xeogl.renderer.webgl.ArrayBuffer.prototype._allocate = function (data) {

        this.allocated = false;

        this._handle = this.gl.createBuffer();

        if (!this._handle) {
            throw "Failed to allocate WebGL ArrayBuffer";
        }

        if (this._handle) {

            this.gl.bindBuffer(this.type, this._handle);
            this.gl.bufferData(this.type, data, this.usage);
            this.gl.bindBuffer(this.type, null);

            this.length = data.length;
            this.numItems = this.length / this.itemSize;

            this.allocated = true;
        }
    };

    /**
     * Updates data within this buffer, reallocating if needed.
     *
     * @param data
     * @param offset
     */
    xeogl.renderer.webgl.ArrayBuffer.prototype.setData = function (data, offset) {

        if (!this.allocated) {
            return;
        }

        if (data.length > this.length) {

            // Needs reallocation

            this.destroy();

            this._allocate(data, data.length);

        } else {

            // No reallocation needed

            if (offset || offset === 0) {

                this.gl.bufferSubData(this.type, offset, data);

            } else {

                this.gl.bufferData(this.type, data);
            }
        }
    };

    /**
     * Binds this buffer
     */
    xeogl.renderer.webgl.ArrayBuffer.prototype.bind = function () {

        if (!this.allocated) {
            return;
        }

        this.gl.bindBuffer(this.type, this._handle);
    };

    /**
     * Unbinds this buffer
     */
    xeogl.renderer.webgl.ArrayBuffer.prototype.unbind = function () {

        if (!this.allocated) {
            return;
        }

        this.gl.bindBuffer(this.type, null);
    };

    /**
     * Destroys this buffer
     */
    xeogl.renderer.webgl.ArrayBuffer.prototype.destroy = function () {

        if (!this.allocated) {
            return;
        }

        this.gl.deleteBuffer(this._handle);

        this._handle = null;

        this.allocated = false;
    };

})();

;(function () {

    "use strict";

    /**
     * An attribute within a {@link xeogl.renderer.webgl.Shader}
     */
    xeogl.renderer.webgl.Attribute = function (gl, location) {

        this.gl = gl;

        this.location = location;
    };

    xeogl.renderer.webgl.Attribute.prototype.bindFloatArrayBuffer = function (buffer) {

        if (buffer) {

            buffer.bind();

            this.gl.enableVertexAttribArray(this.location);

            // Vertices are not homogeneous - no w-element
            this.gl.vertexAttribPointer(this.location, buffer.itemSize, this.gl.FLOAT, false, 0, 0);
        }
    };

    xeogl.renderer.webgl.Attribute.prototype.bindInterleavedFloatArrayBuffer = function (components, stride, byteOffset) {

        this.gl.enableVertexAttribArray(this.location);

        // Vertices are not homogeneous - no w-element
        this.gl.vertexAttribPointer(this.location, components, this.gl.FLOAT, false, stride, byteOffset);
    };

})();;(function () {

    "use strict";

    function joinSansComments(srcLines) {
        var src = [];
        var line;
        var n;
        for (var i = 0, len = srcLines.length; i < len; i++) {
            line = srcLines[i];
            n = line.indexOf("/");
            if (n > 0) {
                if (line.charAt(n + 1) === "/") {
                    line = line.substring(0, n);
                }
            }
            src.push(line);
        }
        return src.join("\n");
    }

    /**
     * Wrapper for a WebGL program
     *
     * @param stats Collects runtime statistics
     * @param gl WebGL gl
     * @param vertex Source code for vertex shader
     * @param fragment Source code for fragment shader
     */
    xeogl.renderer.webgl.Program = function (stats, gl, vertex, fragment) {

        this.stats = stats;

        this.gl = gl;

        /**
         * True when successfully allocated
         * @type {boolean}
         */
        this.allocated = false;

        /**
         * True when successfully compiled
         * @type {boolean}
         */
        this.compiled = false;

        /**
         * True when successfully linked
         * @type {boolean}
         */
        this.linked = false;

        /**
         * True when successfully validated
         * @type {boolean}
         */
        this.validated = false;

        /**
         * Contains error log on failure to allocate, compile, validate or link
         * @type {boolean}
         */
        this.errorLog = null;

        // Inputs for this program

        this.uniforms = {};
        this.samplers = {};
        this.attributes = {};

        // Shaders

        this._vertexShader = new xeogl.renderer.webgl.Shader(gl, gl.VERTEX_SHADER, joinSansComments(vertex));
        this._fragmentShader = new xeogl.renderer.webgl.Shader(gl, gl.FRAGMENT_SHADER, joinSansComments(fragment));

        if (!this._vertexShader.allocated) {
            this.errorLog = ["Vertex shader failed to allocate"].concat(this._vertexShader.errorLog);
            return;
        }

        if (!this._fragmentShader.allocated) {
            this.errorLog = ["Fragment shader failed to allocate"].concat(this._fragmentShader.errorLog);
            return;
        }

        this.allocated = true;

        if (!this._vertexShader.compiled) {
            this.errorLog = ["Vertex shader failed to compile"].concat(this._vertexShader.errorLog);
            return;
        }

        if (!this._fragmentShader.compiled) {
            this.errorLog = ["Fragment shader failed to compile"].concat(this._fragmentShader.errorLog);
            return;
        }

        this.compiled = true;


        var a;
        var i;
        var u;
        var uName;
        var location;

        // Program

        this.handle = gl.createProgram();

        if (!this.handle) {
            this.errorLog = ["Failed to allocate program"];
            return;
        }

        gl.attachShader(this.handle, this._vertexShader.handle);
        gl.attachShader(this.handle, this._fragmentShader.handle);

        gl.linkProgram(this.handle);

        this.linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);

        // HACK: Disable validation temporarily: https://github.com/xeolabs/xeogl/issues/5
        // Perhaps we should defer validation until render-time, when the program has values set for all inputs?

        //this.validated = this.linked ? gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS) : false;
        this.validated = true;

        if (!this.linked || !this.validated) {

            this.errorLog = [];

            this.errorLog.push("");
            this.errorLog.push(gl.getProgramInfoLog(this.handle));

            this.errorLog.push("\nVertex shader:\n");
            this.errorLog = this.errorLog.concat(vertex);

            this.errorLog.push("\nFragment shader:\n");
            this.errorLog = this.errorLog.concat(fragment);

            return;
        }


        // Discover uniforms and samplers

        var numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);

        for (i = 0; i < numUniforms; ++i) {

            u = gl.getActiveUniform(this.handle, i);

            if (u) {

                uName = u.name;

                if (uName[uName.length - 1] === "\u0000") {
                    uName = uName.substr(0, uName.length - 1);
                }

                location = gl.getUniformLocation(this.handle, uName);

                if ((u.type === gl.SAMPLER_2D) || (u.type === gl.SAMPLER_CUBE) || (u.type === 35682)) {

                    this.samplers[uName] = new xeogl.renderer.webgl.Sampler(gl, location);

                } else {

                    this.uniforms[uName] = new xeogl.renderer.webgl.Uniform(stats.frame, gl, u.type, location);
                }
            }
        }

        // Discover attributes

        var numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);

        for (i = 0; i < numAttribs; i++) {

            a = gl.getActiveAttrib(this.handle, i);

            if (a) {

                location = gl.getAttribLocation(this.handle, a.name);

                this.attributes[a.name] = new xeogl.renderer.webgl.Attribute(gl, location);
            }
        }

        this.allocated = true;
    };

    xeogl.renderer.webgl.Program.prototype.bind = function () {

        if (!this.allocated) {
            return;
        }

        this.gl.useProgram(this.handle);
    };

    xeogl.renderer.webgl.Program.prototype.setUniform = function (name, value) {

        if (!this.allocated) {
            return;
        }

        var u = this.uniforms[name];

        if (u) {
            u.setValue(value);
        }
    };

    xeogl.renderer.webgl.Program.prototype.getUniform = function (name) {

        if (!this.allocated) {
            return;
        }

        return this.uniforms[name];
    };

    xeogl.renderer.webgl.Program.prototype.getAttribute = function (name) {

        if (!this.allocated) {
            return;
        }

        return this.attributes[name];
    };

    xeogl.renderer.webgl.Program.prototype.bindTexture = function (name, texture, unit) {

        if (!this.allocated) {
            return false;
        }

        var sampler = this.samplers[name];

        if (sampler) {
            return sampler.bindTexture(texture, unit);

        } else {
            return false;
        }
    };

    xeogl.renderer.webgl.Program.prototype.destroy = function () {

        if (!this.allocated) {
            return;
        }

        this.gl.deleteProgram(this.handle);
        this.gl.deleteShader(this._vertexShader.handle);
        this.gl.deleteShader(this._fragmentShader.handle);

        this.handle = null;
        this.attributes = null;
        this.uniforms = null;
        this.samplers = null;

        this.allocated = false;
    };

})();
;(function () {

    "use strict";

    xeogl.renderer.webgl.RenderBuffer = function (canvas, gl, options) {

        options = options || {};

        /**
         * True as soon as this buffer is allocated and ready to go
         */
        this.allocated = false;

        /**
         * The HTMLCanvasElement
         */
        this.canvas = canvas;

        /**
         * WebGL context
         */
        this.gl = gl;

        /**
         * Buffer resources, set up in #_touch
         */
        this.buffer = null;

        /**
         * True while this buffer is bound
         */
        this.bound = false;

        /**
         * Optional explicit buffer size - when omitted, buffer defaults to canvas size
         */
        this.size = options.size;
    };

    /**
     * Sets custom dimensions for this buffer.
     *
     * Buffer dynamically re-sizes to canvas when size is null.
     *
     * @param size {Array of Number} Two-element size vector
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.setSize = function (size) {
        this.size = size;
    };

    /**
     * Called after WebGL context is restored.
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.webglRestored = function (gl) {
        this.gl = gl;
        this.buffer = null;
        this.allocated = false;
        this.bound = false;
    };

    /**
     * Binds this buffer
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.bind = function () {

        this._touch();

        if (this.bound) {
            return;
        }

        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buffer.framebuf);

        this.bound = true;
    };

    xeogl.renderer.webgl.RenderBuffer.prototype._touch = function () {

        var width;
        var height;

        if (this.size) {

            // Buffer sized to custom dimensions

            width = this.size[0];
            height = this.size[1];

        } else {

            // Buffer sized to canvas (default)

            width = this.canvas.clientWidth;
            height = this.canvas.clientHeight;
        }

        if (this.buffer) {

            // Currently have a buffer

            if (this.buffer.width === width && this.buffer.height === height) {

                // Canvas size unchanged, buffer still good

                return;

            } else {

                // Buffer needs reallocation for new canvas size

                this.gl.deleteTexture(this.buffer.texture);
                this.gl.deleteFramebuffer(this.buffer.framebuf);
                this.gl.deleteRenderbuffer(this.buffer.renderbuf);
            }
        }

        this.buffer = {
            framebuf: this.gl.createFramebuffer(),
            renderbuf: this.gl.createRenderbuffer(),
            texture: this.gl.createTexture(),
            width: width,
            height: height
        };

        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buffer.framebuf);
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.buffer.texture);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);

        try {
            // Do it the way the spec requires
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, width, height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
        } catch (exception) {
            // Workaround for what appears to be a Minefield bug.
            var textureStorage = new WebGLUnsignedByteArray(width * height * 3);
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, width, height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, textureStorage);
        }


        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.buffer.renderbuf);
        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);
        this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this.buffer.texture, 0);
        this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.buffer.renderbuf);
        this.gl.bindTexture(this.gl.TEXTURE_2D, null);
        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);

        // Verify framebuffer is OK
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.buffer.framebuf);

        if (!this.gl.isFramebuffer(this.buffer.framebuf)) {
            throw "Invalid framebuffer";
        }
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);

        var status = this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER);

        switch (status) {

            case this.gl.FRAMEBUFFER_COMPLETE:
                break;

            case this.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT";

            case this.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";

            case this.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                throw "Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS";

            case this.gl.FRAMEBUFFER_UNSUPPORTED:
                throw "Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED";

            default:
                throw "Incomplete framebuffer: " + status;
        }

        this.bound = false;
    };

    /**
     * Clears this renderbuffer
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.clear = function () {
        if (!this.bound) {
            throw "Render buffer not bound";
        }
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        this.gl.disable(this.gl.BLEND);
    };

    /**
     * Reads buffer pixel at given coordinates
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.read = function (pickX, pickY) {
        var x = pickX;
        var y = this.canvas.height - pickY;
        var pix = new Uint8Array(4);
        this.gl.readPixels(x, y, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, pix);
        return pix;
    };

    /**
     * Unbinds this renderbuffer
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.unbind = function () {
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
        this.bound = false;
    };

    /** Returns the texture
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.getTexture = function () {

        var self = this;

        return {

            renderBuffer: this,

            bind: function (unit) {
                if (self.buffer && self.buffer.texture) {
                    self.gl.activeTexture(self.gl["TEXTURE" + unit]);
                    self.gl.bindTexture(self.gl.TEXTURE_2D, self.buffer.texture);
                    return true;
                }
                return false;
            },

            unbind: function (unit) {
                if (self.buffer && self.buffer.texture) {
                    self.gl.activeTexture(self.gl["TEXTURE" + unit]);
                    self.gl.bindTexture(self.gl.TEXTURE_2D, null);
                }
            }
        };
    };

    /** Destroys this buffer
     */
    xeogl.renderer.webgl.RenderBuffer.prototype.destroy = function () {

        if (this.allocated) {

            this.gl.deleteTexture(this.buffer.texture);
            this.gl.deleteFramebuffer(this.buffer.framebuf);
            this.gl.deleteRenderbuffer(this.buffer.renderbuf);

            this.allocated = false;
            this.buffer = null;
            this.bound = false;
        }
    };

})();
;(function () {

    "use strict";

    xeogl.renderer.webgl.Sampler = function (gl, location) {

        this.bindTexture = function (texture, unit) {

            if (texture.bind(unit)) {

                gl.uniform1i(location, unit);

                return true;
            }

            return false;
        };
    };

})();;(function () {

    "use strict";

    /**
     * A vertex/fragment shader in a program
     *
     * @param gl WebGL gl
     * @param type gl.VERTEX_SHADER | gl.FRAGMENT_SHADER
     * @param source Source code for shader
     */
    xeogl.renderer.webgl.Shader = function (gl, type, source) {

        /**
         * True if this shader successfully allocated. When false,
         * #error will contain WebGL the error log.
         * @type {boolean}
         */
        this.allocated = false;

        /**
         * True if this shader successfully compiled. When false,
         * #error will contain WebGL the error log.
         * @type {boolean}
         */
        this.compiled = false;

        /**
         * Saves the WebGL error log when this shader failed to allocate or compile.
         * @type {boolean}
         */
        this.errorLog = null;

        /**
         * The GLSL for this shader.
         * @type {Array of String}
         */
        this.source = source;

        /**
         * WebGL handle to this shader's GPU resource
         */
        this.handle = gl.createShader(type);

        if (!this.handle) {
            this.errorLog = [
                "Failed to allocate"
            ];
            return;
        }

        this.allocated = true;

        gl.shaderSource(this.handle, source);
        gl.compileShader(this.handle);

        this.compiled = gl.getShaderParameter(this.handle, gl.COMPILE_STATUS);

        if (!this.compiled) {

            if (!gl.isContextLost()) { // Handled explicitly elsewhere, so won't re-handle here

                this.errorLog = [];
                this.errorLog.push("");
                this.errorLog.push(gl.getShaderInfoLog(this.handle));
                this.errorLog = this.errorLog.concat(this.source);
            }
        }
    };

})();;(function () {

    "use strict";

    xeogl.renderer.webgl.Texture2D = function (gl) {

        this.gl = gl;

        this.target = gl.TEXTURE_2D;

        this.texture = gl.createTexture();

        this.allocated = true;
    };

    xeogl.renderer.webgl.Texture2D.prototype.setImage = function (image, props) {

        var gl = this.gl;

        gl.bindTexture(this.target, this.texture);

        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, props.flipY);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

        gl.bindTexture(this.target, null);
    };

    xeogl.renderer.webgl.Texture2D.prototype.setProps = function (props) {

        var gl = this.gl;

        gl.bindTexture(this.target, this.texture);

        if (props.minFilter) {

            var minFilter = this._getGLEnum(props.minFilter);

            if (minFilter) {

                gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);

                if (minFilter === gl.NEAREST_MIPMAP_NEAREST ||
                    minFilter === gl.LINEAR_MIPMAP_NEAREST ||
                    minFilter === gl.NEAREST_MIPMAP_LINEAR ||
                    minFilter === gl.LINEAR_MIPMAP_LINEAR) {

                    gl.generateMipmap(this.target);
                }
            }
        }

        if (props.magFilter) {
            var magFilter = this._getGLEnum(props.magFilter);
            if (magFilter) {
                gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);
            }
        }

        if (props.wrapS) {
            var wrapS = this._getGLEnum(props.wrapS);
            if (wrapS) {
                gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);
            }
        }

        if (props.wrapT) {
            var wrapT = this._getGLEnum(props.wrapT);
            if (wrapT) {
                gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);
            }
        }

        gl.bindTexture(this.target, null);
    };

    xeogl.renderer.webgl.Texture2D.prototype._getGLEnum = function (name, defaultVal) {

        if (name === undefined) {
            return defaultVal;
        }

        var glName = xeogl.renderer.webgl.enums[name];

        if (glName === undefined) {
            return defaultVal;
        }

        return this.gl[glName];
    };


    xeogl.renderer.webgl.Texture2D.prototype.bind = function (unit) {

        if (!this.allocated) {
            return;
        }

        if (this.texture) {

            var gl = this.gl;

            gl.activeTexture(gl["TEXTURE" + unit]);

            gl.bindTexture(this.target, this.texture);

            return true;
        }

        return false;
    };

    xeogl.renderer.webgl.Texture2D.prototype.unbind = function (unit) {

        if (!this.allocated) {
            return;
        }

        if (this.texture) {

            var gl = this.gl;

            gl.activeTexture(gl["TEXTURE" + unit]);

            gl.bindTexture(this.target, null);
        }
    };

    xeogl.renderer.webgl.Texture2D.prototype.destroy = function () {

        if (!this.allocated) {
            return;
        }

        if (this.texture) {

            this.gl.deleteTexture(this.texture);

            this.texture = null;
        }
    };


    xeogl.renderer.webgl.clampImageSize = function (image, numPixels) {

        var n = image.width * image.height;

        if (n > numPixels) {

            var ratio = numPixels / n;

            var width = image.width * ratio;
            var height = image.height * ratio;

            var canvas = document.createElement("canvas");

            canvas.width = xeogl.renderer.webgl.nextHighestPowerOfTwo(width);
            canvas.height = xeogl.renderer.webgl.nextHighestPowerOfTwo(height);

            var ctx = canvas.getContext("2d");

            ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);

            image = canvas;
        }

        return image;
    };

    xeogl.renderer.webgl.ensureImageSizePowerOfTwo = function (image) {

        if (!xeogl.renderer.webgl.isPowerOfTwo(image.width) || !xeogl.renderer.webgl.isPowerOfTwo(image.height)) {

            var canvas = document.createElement("canvas");

            canvas.width = xeogl.renderer.webgl.nextHighestPowerOfTwo(image.width);
            canvas.height = xeogl.renderer.webgl.nextHighestPowerOfTwo(image.height);

            var ctx = canvas.getContext("2d");

            ctx.drawImage(image,
                0, 0, image.width, image.height,
                0, 0, canvas.width, canvas.height);
            image = canvas;
        }

        return image;
    };

    xeogl.renderer.webgl.isPowerOfTwo = function (x) {
        return (x & (x - 1)) === 0;
    };

    xeogl.renderer.webgl.nextHighestPowerOfTwo = function (x) {
        --x;
        for (var i = 1; i < 32; i <<= 1) {
            x = x | x >> i;
        }
        return x + 1;
    };

})();
;(function () {

    "use strict";

    xeogl.renderer.webgl.Uniform = function (renderStats, gl, type, location) {

        var func = null;
        var value = null;

        if (type === gl.BOOL) {

            func = function (v) {
                if (value === v) {
                    return;
                }
                value = v;
                gl.uniform1i(location, v);
            };

        } else if (type === gl.BOOL_VEC2) {
            value = new Array(2);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1]) {
                    return;
                }
                value[0] = v[0];
                value[1] = v[1];
                gl.uniform2iv(location, v);
            };

        } else if (type === gl.BOOL_VEC3) {
            value = new Array(3);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2]) {
                    return;
                }
                value[0] = v[0];
                value[1] = v[1];
                value[2] = v[2];
                gl.uniform3iv(location, v);
            };

        } else if (type === gl.BOOL_VEC4) {
            value = new Array(4);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2] && value[3] === v[3]) {
                    return;
                }
                value[0] = v[0];
                value[1] = v[1];
                value[2] = v[2];
                value[3] = v[3];
                gl.uniform4iv(location, v);
            };

        } else if (type === gl.INT) {

            func = function (v) {
                if (value === v) {
                    return;
                }
                value = v;
                gl.uniform1iv(location, v);
            };

        } else if (type === gl.INT_VEC2) {
            value = new Uint32Array(2);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1]) {
                    return;
                }
                value.set(v);
                gl.uniform2iv(location, v);
            };

        } else if (type === gl.INT_VEC3) {
            value = new Uint32Array(3);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2]) {
                    return;
                }
                value.set(v);
                gl.uniform3iv(location, v);
            };

        } else if (type === gl.INT_VEC4) {
            value = new Uint32Array(4);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2] && value[3] === v[3]) {
                    return;
                }
                value.set(v);
                gl.uniform4iv(location, v);
            };

        } else if (type === gl.FLOAT) {

            func = function (v) {
                if (value === v) {
                    return;
                }
                value = v;
                gl.uniform1f(location, v);
            };

        } else if (type === gl.FLOAT_VEC2) {
            value = new Float32Array(2);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1]) {
                    return;
                }
                value.set(v);
                gl.uniform2fv(location, v);
            };

        } else if (type === gl.FLOAT_VEC3) {
            value = new Float32Array(3);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2]) {
                    return;
                }
                value.set(v);
                gl.uniform3fv(location, v);
            };

        } else if (type === gl.FLOAT_VEC4) {
            value = new Float32Array(4);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2] && value[3] === v[3]) {
                    return;
                }
                value.set(v);
                gl.uniform4fv(location, v);
            };

        } else if (type === gl.FLOAT_MAT2) {
            value = new Float32Array(4);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] &&
                    value[2] === v[2] && value[3] === v[3]) {
                    return;
                }
                value.set(v);
                gl.uniformMatrix2fv(location, gl.FALSE, v);
            };

        } else if (type === gl.FLOAT_MAT3) {
            value = new Float32Array(9);

            func = function (v) {
                if (value[0] === v[0] && value[1] === v[1] && value[2] === v[2] &&
                    value[3] === v[3] && value[4] === v[4] && value[5] === v[5] &&
                    value[6] === v[6] && value[7] === v[7] && value[8] === v[8]) {
                    return;
                }
                value.set(v);
                gl.uniformMatrix3fv(location, gl.FALSE, v);
            };

        } else if (type === gl.FLOAT_MAT4) {
            value = new Float32Array(16);

            func = function (v) {
                if (value[0] === v[0]   && value[1] === v[1]   && value[2] === v[2]   && value[3] === v[3]   &&
                    value[4] === v[4]   && value[5] === v[5]   && value[6] === v[6]   && value[7] === v[7]   &&
                    value[8] === v[8]   && value[9] === v[9]   && value[10] === v[10] && value[11] === v[11] &&
                    value[12] === v[12] && value[13] === v[13] && value[14] === v[14] && value[15] === v[15]) {
                    return;
                }
                value.set(v);
                gl.uniformMatrix4fv(location, gl.FALSE, v);
            };

        } else {
            throw "Unsupported shader uniform type: " + type;
        }

        this.setValue = func;

        this.getLocation = function () {
            return location;
        };
    };

})();









;/**
 * Renderer states
 */
(function () {

    "use strict";

    xeogl.renderer = xeogl.renderer || {};


    /**

     Base class for Renderer states.

     renderer.State
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     */
    xeogl.renderer.State = Class.extend({

        __init: function (cfg) {

            this.id = this._ids.addItem({});

            this.hash = cfg.hash || "" + this.id; // Not used by all sub-classes

            for (var key in cfg) {
                if (cfg.hasOwnProperty(key)) {
                    this[key] = cfg[key];
                }
            }
        },

        destroy: function () {
            this._ids.removeItem(this.id);
        }
    });

    //xeogl.renderer.State.prototype.destroy = function () {
    //    states.removeItem(this.id);
    //};

    /**

     Visibility state.

     renderer.Visibility
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.visible {Boolean} Flag which controls visibility of the associated render objects.
     @extends renderer.State
     */
    xeogl.renderer.Visibility = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Culling state.

     renderer.Cull
     @module xeogl

     @constructor
     @param cfg {*} Configs
     @param cfg.culled {Boolean} Flag which controls cull state of the associated render objects.
     @extends renderer.State
     */
    xeogl.renderer.Cull = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Modes state.

     renderer.Mode
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.pickable {Boolean} Flag which controls pickability of the associated render objects.
     @param cfg.clipping {Boolean} Flag which controls whether associated render objects are clippable.
     @param cfg.transparent {Boolean} Flag which controls transparency of the associated render objects.
     @param cfg.frontFace {Boolean} Flag which determines winding order of backfaces on the associated render objects - true == "ccw", false == "cw".
     @extends renderer.State
     */
    xeogl.renderer.Modes = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Layer state.

     renderer.Layer
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.priority {Number} Layer render priority.
     @extends renderer.State
     */
    xeogl.renderer.Layer = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Stage state.

     renderer.Stage
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.priority {Number} Stage render priority.
     @extends renderer.State
     */
    xeogl.renderer.Stage = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Depth buffer state.

     renderer.DepthBuf
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.clearDepth {Number} Clear depth
     @param cfg.depthBuf {String} Depth function
     @extends renderer.State
     */
    xeogl.renderer.DepthBuf = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Color buffer state.

     renderer.ColorBuf
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.blendEnabled {Boolean} Indicates if blending is enebled for
     @param cfg.colorMask {Array of String} The color mask
     @extends renderer.State
     */
    xeogl.renderer.ColorBuf = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Renderer lights state.

     renderer.Lights
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @param cfg.colorMask {Array of Object} The light sources
     @extends renderer.State
     */
    xeogl.renderer.Lights = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     PhongMaterial state.

     renderer.PhongMaterial
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.PhongMaterial = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Environmental reflection state.

     renderer.Reflect
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Reflect = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Transform state.

     renderer.Transform
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Transform = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Billboard transform state.

     renderer.Billboard
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Billboard = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Stationary transform state.

     renderer.Stationary
     @module xeogl

     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Stationary = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });


    /**

     Render target state.

     renderer.RenderTarget
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.RenderTarget = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    xeogl.renderer.RenderTarget.DEPTH = 0;
    xeogl.renderer.RenderTarget.COLOR = 1;

    /**

     Clip planes state.

     renderer.Clips
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Clips = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Renderer morph targets state.

     renderer.MorphTargets
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.MorphTargets = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Shader state.

     renderer.Shader
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Shader = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Shader parameters state.

     renderer.ShaderParams
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.ShaderParams = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Texture state.

     renderer.Texture
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Texture = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });


    /**

     Fresnel state.

     renderer.Fresnel
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Fresnel = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });


    /**

     Geometry state.

     renderer.Geometry
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.Geometry = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Program state.

     renderer.ProgramState
     @module xeogl
     
     @constructor
     @param cfg {*} Configs
     @extends renderer.State
     */
    xeogl.renderer.ProgramState = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });

    /**

     Viewport state.

     renderer.Viewport
     @module xeogl

     @constructor
     @param cfg {*} Configs
     @param cfg.boundary {Float32Array} Canvas-space viewport extents.
     @extends renderer.State
     */
    xeogl.renderer.Viewport = xeogl.renderer.State.extend({
        _ids: new xeogl.utils.Map({})
    });
})();


;(function () {

    "use strict";

    /**
     * An object within a xeogl.renderer.Renderer
     */
    xeogl.renderer.Object = function (id) {

        /**
         * ID for this object, unique among all objects in the Renderer
         */
        this.id = id;

        /**
         * Hash code for this object, unique among all objects in the Renderer
         */
        this.hash = null;

        /**
         * State sort key, computed from #layer, #program and #material
         * @type Number
         */
        this.sortKey = null;

        /**
         * Sequence of state chunks applied to render this object
         */
        this.chunks = [];

        /**
         * Shader programs that render this object, also used for (re)computing #sortKey
         */
        this.program = null;

        /**
         * State for the xeogl.renderer.Stage that this object was compiled from, used for (re)computing #sortKey and visibility cull
         */
        this.stage = null;

        /**
         * State for the xeogl.renderer.Modes that this object was compiled from, used for visibility cull
         */
        this.modes = null;

        /**
         * State for the xeogl.renderer.Layer that this object was compiled from, used for (re)computing #sortKey and visibility cull
         */
        this.layer = null;

        /**
         * State for the xeogl.renderer.Material that this object was compiled from, used for (re)computing #sortKey
         */
        this.material = null;

        /**
         * True once the object has been compiled within the renderer display list.
         */
        this.compiled = false;
    };
})();;                (function () {

    "use strict";

    xeogl.renderer.ObjectFactory = function () {

        var freeObjects = [];
        var numFreeObjects = 0;

        this.get = function (id) {

            var object;

            if (numFreeObjects > 0) {

                object = freeObjects[--numFreeObjects];

                object.id = id;

                object.compiled = false;

                return object;
            }

            return new xeogl.renderer.Object(id);
        };

        this.put = function (object) {
            freeObjects[numFreeObjects++] = object;
        };
    };

})();


;(function () {

    "use strict";

    xeogl.renderer = xeogl.renderer || {};

    /**
     *  Vertex and fragment shaders for pick and draw
     *
     * @param {*} stats Collects runtime statistics
     * @param {String} hash Hash code which uniquely identifies the capabilities of the program, computed from hashes on the {@link Scene_Core}s that the {@link xeogl.renderer.ProgramSource} composed to render
     * @param {xeogl.renderer.ProgramSource} source Sourcecode from which the the program is compiled in {@link #build}
     * @param {WebGLRenderingContext} gl WebGL context
     */
    xeogl.renderer.Program = function (stats, hash, source, gl) {

        this.stats = stats;

        /**
         * Hash code for this program's capabilities, same as the hash on {@link #source}
         * @type String
         */
        this.hash = source.hash;

        /**
         * Source code for this program's shaders
         * @type renderer.ProgramSource
         */
        this.source = source;

        /**
         * WebGL context on which this program's shaders are allocated
         * @type WebGLRenderingContext
         */
        this.gl = gl;

        /**
         * The drawing program
         * @type webgl.Program
         */
        this.draw = null;

        /**
         * The object picking program
         * @type webgl.Program
         */
        this.pickObject = null;

        /**
         * The primitive picking program
         * @type webgl.Program
         */
        this.pickPrimitive = null;

        /**
         * The count of display objects using this program
         * @type Number
         */
        this.useCount = 0;

        /**
         * True when successfully allocated
         * @type {boolean}
         */
        this.allocated = false;

        /**
         * True when successfully compiled
         * @type {boolean}
         */
        this.compiled = false;

        /**
         * True when successfully linked
         * @type {boolean}
         */
        this.linked = false;

        /**
         * True when successfully validated
         * @type {boolean}
         */
        this.validated = false;

        /**
         * Contains error log on failure to allocate, compile, validate or link
         * @type {boolean}
         */
        this.errorLog = null;


        this.build(gl);
    };

    /**
     *  Creates the render and pick programs.
     * This is also re-called to re-create them after WebGL context loss.
     */
    xeogl.renderer.Program.prototype.build = function (gl) {

        this.gl = gl;

        this.allocated = false;
        this.compiled = false;
        this.linked = false;
        this.validated = false;
        this.errorLog = null;

        this.draw = new xeogl.renderer.webgl.Program(this.stats, gl, this.source.vertexDraw, this.source.fragmentDraw);
        this.pickObject = new xeogl.renderer.webgl.Program(this.stats, gl, this.source.vertexPickObject, this.source.fragmentPickObject);
        this.pickPrimitive = new xeogl.renderer.webgl.Program(this.stats, gl, this.source.vertexPickPrimitive, this.source.fragmentPickPrimitive);

        if (!this.draw.allocated) {
            this.errorLog = ["Draw program failed to allocate"].concat(this.draw.errorLog);
            return;
        }

        if (!this.pickObject.allocated) {
            this.errorLog = ["Object-picking program failed to allocate"].concat(this.pickObject.errorLog);
            return;
        }

        if (!this.pickPrimitive.allocated) {
            this.errorLog = ["Primitive-picking program failed to allocate"].concat(this.pickPrimitive.errorLog);
            return;
        }

        this.allocated = true;

        if (!this.draw.compiled) {
            this.errorLog = ["Draw program failed to compile"].concat(this.draw.errorLog);
            return;
        }

        if (!this.pickObject.compiled) {
            this.errorLog = ["Object-picking program failed to compile"].concat(this.pickObject.errorLog);
            return;
        }

        if (!this.pickPrimitive.compiled) {
            this.errorLog = ["Primitive-picking program failed to compile"].concat(this.pickPrimitive.errorLog);
            return;
        }

        this.compiled = true;

        if (!this.draw.linked) {
            this.errorLog = ["Draw program failed to link"].concat(this.draw.errorLog);
            return;
        }

        if (!this.pickObject.linked) {
            this.errorLog = ["Object-picking program failed to link"].concat(this.pickObject.errorLog);
            return;
        }

        if (!this.pickPrimitive.linked) {
            this.errorLog = ["Primitive-picking program failed to link"].concat(this.pickPrimitive.errorLog);
            return;
        }

        this.linked = true;

        if (!this.draw.validated) {
            this.errorLog = ["Draw program failed to validate"].concat(this.draw.errorLog);
            return;
        }

        if (!this.pickObject.validated) {
            this.errorLog = ["Object-picking program failed to validate"].concat(this.pickObject.errorLog);
            return;
        }

        if (!this.pickPrimitive.validated) {
            this.errorLog = ["Primitive-picking program failed to validate"].concat(this.pickPrimitive.errorLog);
            return;
        }

        this.validated = true;
    };

})();
;(function () {

    "use strict";

    /**
     *  Manages {@link xeogl.renderer.ProgramState} instances.
     * @param stats Collects runtime statistics
     * @param gl WebGL context
     */
    xeogl.renderer.ProgramFactory = function (stats, gl) {

        this.stats = stats;

        this._gl = gl;

        this._programStates = {};
    };


    /**
     * Get a program that fits the given set of states.
     * Reuses any free program in the pool that matches the given hash.
     */
    xeogl.renderer.ProgramFactory.prototype.get = function (hash, states) {

        var programState = this._programStates[hash];

        if (!programState) {

            // No program exists for the states

            // Create it and map it to the hash

            var source = xeogl.renderer.ProgramSourceFactory.getSource(hash, states);

            var program = new xeogl.renderer.Program(this.stats, hash, source, this._gl);

            programState = new xeogl.renderer.ProgramState({
                program: program,
                useCount: 0
            });

            this._programStates[hash] = programState;

            this.stats.memory.programs++;
        }

        programState.useCount++;

        return programState;
    };

    /**
     * Release a program back to the pool.
     */
    xeogl.renderer.ProgramFactory.prototype.put = function (programState) {

        if (--programState.useCount <= 0) {

            var program = programState.program;

            program.draw.destroy();
            program.pickObject.destroy();
            program.pickPrimitive.destroy();

            xeogl.renderer.ProgramSourceFactory.putSource(program.hash);

            delete this._programStates[program.hash];

            this.stats.memory.programs--;
        }
    };

    /**
     * Rebuild all programs in the pool after WebGL context was lost and restored.
     */
    xeogl.renderer.ProgramFactory.prototype.webglRestored = function (gl) {

        this._gl = gl;

        for (var id in this._programStates) {
            if (this._programStates.hasOwnProperty(id)) {

                this._programStates[id].build(gl);
            }
        }
    };

    xeogl.renderer.ProgramFactory.prototype.destroy = function () {
    };

})();
;(function () {

    "use strict";

    /**
     *  Source code for pick and draw shader programs, to be compiled into one or more {@link xeogl.renderer.Program}s
     *
     * @param {String} hash Hash code identifying the rendering capabilities of the programs
     * @param {String} vertexPickObject Vertex shader source for object picking.
     * @param {String} fragmentPickObject Fragment shader source for object picking.
     * @param {String} vertexPickPrimitive Vertex shader source for primitive picking.
     * @param {String} fragmentPickPrimitive Fragment shader source for primitive picking.
     * @param {String} vertexDraw Vertex shader source for drawing.
     * @param {String} fragmentDraw Fragment shader source for drawing.
     */
    xeogl.renderer.ProgramSource = function (hash,
                                           vertexPickObject, fragmentPickObject,
                                           vertexPickPrimitive, fragmentPickPrimitive,
                                           vertexDraw, fragmentDraw) {

        /**
         * Hash code identifying the capabilities of the {@link xeogl.renderer.Program} that is compiled from this source
         * @type String
         */
        this.hash = hash;

        /**
         * Vertex shader source for object picking
         * @type {Array of String]
         */
        this.vertexPickObject = vertexPickObject;

        /**
         * Fragment shader source for object picking.
         * @type {Array of String}
         */
        this.fragmentPickObject = fragmentPickObject;

        /**
         * Vertex shader source for primitive picking.
         * @type {Array of String]
         */
        this.vertexPickPrimitive = vertexPickPrimitive;

        /**
         * Fragment shader source for primitive picking.
         * @type {Array of String}
         */
        this.fragmentPickPrimitive = fragmentPickPrimitive;

        /**
         * Vertex shader source for drawing.
         * @type {Array of String}
         */
        this.vertexDraw = vertexDraw;

        /**
         * Fragment shader source for drawing.
         * @type {Array of String}
         */
        this.fragmentDraw = fragmentDraw;

        /**
         * Count of {@link xeogl.renderer.Program}s compiled from this program source code
         * @type Number
         */
        this.useCount = 0;
    };

})();

;(function () {

    "use strict";

    /**
     *  Manages creation, sharing and recycle of {@link xeogl.renderer.ProgramSource} instances
     */
    xeogl.renderer.ProgramSourceFactory = new (function () {

        var cache = {}; // Caches source code against hashes

        var src = ""; // Accumulates source code as it's being built

        var states; // Cache rendering state
        var texturing; // True when rendering state contains textures
        var normals; // True when rendering state contains normals
        var normalMapping; // True when rendering state contains tangents
        var reflection; // True when rendering state contains reflections
        var diffuseFresnel;
        var specularFresnel;
        var opacityFresnel;
        var reflectivityFresnel;
        var emissiveFresnel;

        var vertexPickObjectSrc;
        var fragmentPickObjectSrc;
        var vertexPickPrimSrc;
        var fragmentPickPrimSrc;

        /**
         * Get source code for a program to render the given states.
         * Attempts to reuse cached source code for the given hash.
         */
        this.getSource = function (hash, _states) {

            var source = cache[hash];

            if (source) {
                source.useCount++;
                return source;
            }

            states = _states;

            texturing = hasTextures();
            normals = hasNormals();
            normalMapping = hasNormalMap();
            reflection = hasReflection();
            diffuseFresnel = states.material.diffuseFresnel;
            specularFresnel = states.material.specularFresnel;
            opacityFresnel = states.material.opacityFresnel;
            reflectivityFresnel = states.material.reflectivityFresnel;
            emissiveFresnel = states.material.emissiveFresnel;

            source = new xeogl.renderer.ProgramSource(
                hash,
                vertexPickObject(),
                fragmentPickObject(),
                vertexPickPrimitive(),
                fragmentPickPrimitive(),
                vertexDraw(),
                fragmentDraw()
            );

            cache[hash] = source;

            return source;
        };

        function hasTextures() {
            if (!states.geometry.uv) {
                return false;
            }
            var material = states.material;
            return material.ambientMap ||
                material.diffuseMap ||
                material.specularMap ||
                material.emissiveMap ||
                material.opacityMap ||
                material.reflectivityMap ||
                states.material.normalMap;
        }

        function hasReflection() {
            return false;
            //return (states.cubemap.layers && states.cubemap.layers.length > 0 && states.geometry.normalBuf);
        }

        function hasNormals() {
            var primitive = states.geometry.primitiveName;
            if (states.geometry.normals && (primitive === "triangles" || primitive === "triangle-strip" || primitive === "triangle-fan")) {
                return true;
            }
            return false;
        }

        function hasNormalMap() {
            var geometry = states.geometry;
            return (geometry.positions && geometry.indices && geometry.normals && geometry.uv && states.material.normalMap);
        }

        /**
         * Releases program source code back to this factory.
         */
        this.putSource = function (hash) {
            var source = cache[hash];
            if (source) {
                if (--source.useCount === 0) {
                    cache[source.hash] = null;
                }
            }
        };


        // NOTE: Picking shaders will become more complex and will eventually be
        // composed from state, in the same manner as the draw shaders.

        function vertexPickObject() {
            if (vertexPickObjectSrc) {
                return vertexPickObjectSrc;
            }
            begin();
            add("// Object picking vertex shader");
            add("attribute vec3 xeo_aPosition;");
            add("uniform mat4 xeo_uModelMatrix;");
            add("uniform mat4 xeo_uViewMatrix;");
            add("uniform mat4 xeo_uViewNormalMatrix;");
            add("uniform mat4 xeo_uProjMatrix;");
            add("varying vec4 xeo_vWorldPosition;");
            add("varying vec4 xeo_vViewPosition;");
            add("void main(void) {");
            add("   vec4 tmpVertex = vec4(xeo_aPosition, 1.0); ");
            add("   xeo_vWorldPosition = xeo_uModelMatrix * tmpVertex; ");
            add("   xeo_vViewPosition = xeo_uViewMatrix * xeo_vWorldPosition;");
            add("   gl_Position = xeo_uProjMatrix * xeo_vViewPosition;");
            add("}");
            return vertexPickObjectSrc = end();
        }

        function fragmentPickObject() {
            if (fragmentPickObjectSrc) {
                return fragmentPickObjectSrc;
            }
            begin();
            add("// Object picking fragment shader");
            add("precision " + getFSFloatPrecision(states.gl) + " float;");
            add("uniform vec4 xeo_uPickColor;");
            add("void main(void) {");
            add("   gl_FragColor = xeo_uPickColor; ");
            add("}");
            return fragmentPickObjectSrc = end();
        }

        function vertexPickPrimitive() {
            if (vertexPickPrimSrc) {
                return vertexPickPrimSrc;
            }
            begin();
            add("// Triangle picking vertex shader");
            add("attribute vec3 xeo_aPosition;");
            add("attribute vec4 xeo_aColor;");
            add("uniform vec3 xeo_uPickColor;");
            add("uniform mat4 xeo_uModelMatrix;");
            add("uniform mat4 xeo_uViewMatrix;");
            add("uniform mat4 xeo_uProjMatrix;");
            add("varying vec4 xeo_vWorldPosition;");
            add("varying vec4 xeo_vViewPosition;");
            add("varying vec4 xeo_vColor;");
            add("void main(void) {");
            add("   vec4 tmpVertex = vec4(xeo_aPosition, 1.0); ");
            add("   vec4 worldPosition = xeo_uModelMatrix * tmpVertex; ");
            add("   vec4 viewPosition = xeo_uViewMatrix * worldPosition;");
            add("   xeo_vColor = xeo_aColor;");
            add("   gl_Position = xeo_uProjMatrix * viewPosition;");
            add("}");
            return vertexPickPrimSrc = end();
        }

        function fragmentPickPrimitive() {
            if (fragmentPickPrimSrc) {
                return fragmentPickPrimSrc;
            }
            begin();
            add("// Triangle picking fragment shader");
            add("precision " + getFSFloatPrecision(states.gl) + " float;");
            add("varying vec4 xeo_vColor;");
            add("void main(void) {");
            add("   gl_FragColor = xeo_vColor;");
            add("}");
            return fragmentPickPrimSrc = end();
        }

        function vertexDraw() {

            var vertex = states.shader.vertex;

            if (vertex) {

                // Custom vertex shader
                return vertex;
            }

            var i;
            var len;
            var light;

            begin();

            add("// Drawing vertex shader");

            add("uniform mat4 xeo_uModelMatrix;          // Modeling matrix");
            add("uniform mat4 xeo_uViewMatrix;           // Viewing matrix");
            add("uniform mat4 xeo_uProjMatrix;           // Projection matrix");

            add("attribute vec3 xeo_aPosition;           // Local-space vertex position");

            add();

            add("varying vec4 xeo_vViewPosition;         // Output: View-space fragment position");

            if (normals) {

                add();

                add("attribute vec3 xeo_aNormal;             // Local-space vertex normal");

                add("uniform mat4 xeo_uModelNormalMatrix;    // Modeling normal matrix");
                add("uniform mat4 xeo_uViewNormalMatrix;     // Viewing normal matrix");

                add("varying vec3 xeo_vViewEyeVec;           // Output: View-space vector from fragment position to eye");
                add("varying vec3 xeo_vViewNormal;           // Output: View-space normal");

                // Lights
                for (i = 0, len = states.lights.lights.length; i < len; i++) {

                    light = states.lights.lights[i];

                    if (light.type === "ambient") {
                        continue;
                    }

                    if (light.type === "dir") {
                        add("uniform vec3 xeo_uLightDir" + i + ";   // Directional light direction");
                    }

                    if (light.type === "point") {
                        add("uniform vec3 xeo_uLightPos" + i + ";   // Positional light position");
                    }

                    if (light.type === "spot") {
                        add("uniform vec3 xeo_uLightPos" + i + ";   // Spot light position");
                    }

                    add("varying vec4 xeo_vViewLightVecAndDist" + i + "; // Output: Vector from vertex to light, packaged with the pre-computed length of that vector");
                }
            }

            if (normalMapping) {
                add("attribute vec3 xeo_aTangent;");
            }

            if (texturing) {

                add();

                // Vertex UV coordinate
                add("attribute vec2 xeo_aUV;");

                // Fragment UV coordinate
                add("varying vec2 xeo_vUV;");
            }

            if (states.geometry.colors) {

                // Vertex color
                add("attribute vec4 xeo_aColor;");

                // Fragment color
                add("varying vec4 xeo_vColor;");
            }

            if (states.geometry.primitiveName === "points") {
                add("uniform float xeo_uPointSize;");
            }

            if (states.billboard.active) {

                add("void billboard(inout mat4 mat) {");
                add("   mat[0][0] = 1.0;");
                add("   mat[0][1] = 0.0;");
                add("   mat[0][2] = 0.0;");
                if (states.billboard.spherical) {
                    add("   mat[1][0] = 0.0;");
                    add("   mat[1][1] = 1.0;");
                    add("   mat[1][2] = 0.0;");
                }
                add("   mat[2][0] = 0.0;");
                add("   mat[2][1] = 0.0;");
                add("   mat[2][2] =1.0;");
                add("}");
            }

            // ------------------- main -------------------------------

            add();
            add("void main(void) {");
            add();
            add("   vec4 localPosition = vec4(xeo_aPosition, 1.0); ");

            if (normals) {

                add("   vec4 localNormal = vec4(xeo_aNormal, 0.0); ");
                add("   mat4 modelNormalMatrix = xeo_uModelNormalMatrix;");
                add("   mat4 viewNormalMatrix = xeo_uViewNormalMatrix;");
            }

            add("   mat4 modelMatrix = xeo_uModelMatrix;");
            add("   mat4 viewMatrix = xeo_uViewMatrix;");
            add("   vec4 worldPosition;");

            if (states.stationary.active) {
                add("   viewMatrix[3][0] = viewMatrix[3][1] = viewMatrix[3][2] = 0.0;")
            }

            if (states.billboard.active) {

                add("   mat4 modelViewMatrix =  xeo_uViewMatrix * xeo_uModelMatrix;");

                add("   billboard(modelMatrix);");
                add("   billboard(viewMatrix);");
                add("   billboard(modelViewMatrix);");

                if (normals) {

                    add("   mat4 modelViewNormalMatrix =  xeo_uViewNormalMatrix * xeo_uModelNormalMatrix;");

                    add("   billboard(modelNormalMatrix);");
                    add("   billboard(viewNormalMatrix);");
                    add("   billboard(modelViewNormalMatrix);");
                }

                add("   worldPosition = modelMatrix * localPosition;");
                add("   vec4 viewPosition = modelViewMatrix * localPosition;");

            } else {

                add("   worldPosition = modelMatrix * localPosition;");
                add("   vec4 viewPosition  = viewMatrix * worldPosition; ");
            }

            if (normals) {

                add("   vec3 worldNormal = (modelNormalMatrix * localNormal).xyz; ");
                add("   xeo_vViewNormal = normalize((viewNormalMatrix * vec4(worldNormal, 1.0)).xyz);");

                if (normalMapping) {

                    // Compute the tangent-bitangent-normal (TBN) matrix

                    add("   vec3 tangent = normalize((xeo_uViewNormalMatrix * xeo_uModelNormalMatrix * vec4(xeo_aTangent, 1.0)).xyz);");
                    add("   vec3 bitangent = cross(xeo_vViewNormal, tangent);");
                    add("   mat3 TBN = mat3(tangent, bitangent, xeo_vViewNormal);");
                }

                add("   vec3 tmpVec3;");
                add("   float lightDist;");

                // Lights

                for (i = 0, len = states.lights.lights.length; i < len; i++) {

                    light = states.lights.lights[i];

                    if (light.type === "ambient") {
                        continue;
                    }

                    if (light.type === "dir") {

                        // Directional light

                        if (light.space === "world") {

                            // World space light

                            add("   tmpVec3 = xeo_uLightDir" + i + ";");

                            // Transform to View space
                            add("   tmpVec3 = vec3(viewMatrix * vec4(tmpVec3, 1.0)).xyz;");

                            if (normalMapping) {

                                // Transform to Tangent space
                                add("   tmpVec3 *= TBN;");
                            }

                        } else {

                            // View space light

                            add("   tmpVec3 = xeo_uLightDir" + i + ";");

                            if (normalMapping) {

                                // Transform to Tangent space
                                add("   tmpVec3 *= TBN;");
                            }
                        }

                        // Pipe the light direction and zero distance through to the fragment shader
                        add("   xeo_vViewLightVecAndDist" + i + " = vec4(tmpVec3, 0.0);");
                    }

                    if (light.type === "point") {

                        // Positional light

                        if (light.space === "world") {

                            // World space

                            // Get vertex -> light vector in View space
                            // Transform light pos to View space first
                            add("   tmpVec3 = (viewMatrix * vec4(xeo_uLightPos" + i + ", 1.0)).xyz - viewPosition.xyz;"); // Vector from World coordinate to light pos

                            // Get distance to light
                            add("   lightDist = abs(length(tmpVec3));");

                            if (normalMapping) {

                                // Transform light vector to Tangent space
                                add("   tmpVec3 *= TBN;");
                            }

                        } else {

                            // View space

                            // Get vertex -> light vector in View space
                            add("   tmpVec3 = xeo_uLightPos" + i + ".xyz - viewPosition.xyz;"); // Vector from View coordinate to light pos

                            // Get distance to light
                            add("   lightDist = abs(length(tmpVec3));");

                            if (normalMapping) {

                                // Transform light vector to tangent space
                                add("   tmpVec3 *= TBN;");
                            }
                        }

                        // Pipe the light direction and distance through to the fragment shader
                        add("   xeo_vViewLightVecAndDist" + i + " = vec4(tmpVec3, lightDist);");
                    }
                }

                add("   xeo_vViewEyeVec = -viewPosition.xyz;");

                if (normalMapping) {

                    // Transform vertex->eye vector to tangent space
                    add("   xeo_vViewEyeVec *= TBN;");
                }
            }

            if (texturing) {
                add("   xeo_vUV = xeo_aUV;");
            }

            if (states.geometry.colors) {
                add("   xeo_vColor = xeo_aColor;");
            }

            if (states.geometry.primitiveName === "points") {
                add("   gl_PointSize = xeo_uPointSize;");
            }

            add("   xeo_vViewPosition = viewPosition;");

            add("   gl_Position = xeo_uProjMatrix * viewPosition;");

            add("}");

            return end();
        }


        function fragmentDraw() {

            var fragment = states.shader.fragment;
            if (fragment) {
                // Custom fragment shader
                return fragment;
            }

            var i;
            var len;

            var light;

            begin();

            add("// Drawing fragment shader");

            add("precision " + getFSFloatPrecision(states.gl) + " float;");
            add();

            if (normals) {

                add("varying vec4 xeo_vViewPosition;");

                add();

                add("uniform vec3 xeo_uSpecular;");
                add("uniform float xeo_uShininess;");
                add("uniform float xeo_uReflectivity;");
            }

            if (normalMapping) {
                //    add("varying vec3 xeo_vTangent;");
            }

            add("uniform vec3 xeo_uEmissive;");
            add("uniform float xeo_uOpacity;");
            add("uniform vec3 xeo_uDiffuse;");

            add();

            if (states.geometry.colors) {
                add("varying vec4 xeo_vColor;");
            }

            if (texturing) {

                add();
                comment("Texture variables");
                add();

                if (states.geometry.uv) {
                    add("varying vec2 xeo_vUV;");
                }

                if (states.material.emissiveMap) {
                    add("uniform sampler2D xeo_uEmissiveMap;");
                    if (states.material.emissiveMap.matrix) {
                        add("uniform mat4 xeo_uEmissiveMapMatrix;");
                    }
                }

                if (states.material.opacityMap) {
                    add("uniform sampler2D xeo_uOpacityMap;");
                    if (states.material.opacityMap.matrix) {
                        add("uniform mat4 xeo_uOpacityMapMatrix;");
                    }
                }

                if (states.material.ambientMap) {
                    add("uniform sampler2D xeo_uAmbientMap;");
                    if (states.material.ambientMap.matrix) {
                        add("uniform mat4 xeo_uAmbientMapMatrix;");
                    }
                }

                if (states.material.diffuseMap) {
                    add("uniform sampler2D xeo_uDiffuseMap;");
                    if (states.material.diffuseMap.matrix) {
                        add("uniform mat4 xeo_uDiffuseMapMatrix;");
                    }
                }

                if (normals) {

                    if (states.material.specularMap) {
                        add("uniform sampler2D xeo_uSpecularMap;");
                        if (states.material.specularMap.matrix) {
                            add("uniform mat4 xeo_uSpecularMapMatrix;");
                        }
                    }

                    if (states.material.reflectivityMap) {
                        add("uniform sampler2D xeo_uTextureReflectivity;");
                        if (states.material.reflectivityMap.matrix) {
                            add("uniform mat4 xeo_uTextureReflectivityMatrix;");
                        }
                    }

                    if (normalMapping) {
                        add("uniform sampler2D xeo_uNormalMap;");
                        if (states.material.normalMap.matrix) {
                            add("uniform mat4 xeo_uNormalMapMatrix;");
                        }
                    }
                }
            }

            add("uniform vec3 xeo_uLightAmbientColor;");
            add("uniform float xeo_uLightAmbientIntensity;");

            if (normals) {

                // View-space vector from fragment to eye

                add("varying vec3 xeo_vViewEyeVec;");

                // View-space fragment normal

                add("varying vec3 xeo_vViewNormal;");

                // Light sources

                for (i = 0, len = states.lights.lights.length; i < len; i++) {

                    light = states.lights.lights[i];

                    if (light.type === "ambient") {
                        continue;
                    }

                    add("uniform vec3 xeo_uLightColor" + i + ";");
                    add("uniform float xeo_uLightIntensity" + i + ";");
                    if (light.type === "point") {
                        add("uniform vec3 xeo_uLightAttenuation" + i + ";");
                    }
                    add("varying vec4 xeo_vViewLightVecAndDist" + i + ";");         // Vector from light to vertex
                }

                if (diffuseFresnel || specularFresnel || opacityFresnel || emissiveFresnel || reflectivityFresnel) {

                    add();
                    comment("Fresnel variables");
                    add();

                    if (diffuseFresnel) {
                        add("uniform float xeo_uDiffuseFresnelCenterBias;");
                        add("uniform float xeo_uDiffuseFresnelEdgeBias;");
                        add("uniform float xeo_uDiffuseFresnelPower;");
                        add("uniform vec3 xeo_uDiffuseFresnelCenterColor;");
                        add("uniform vec3 xeo_uDiffuseFresnelEdgeColor;");
                        add();
                    }

                    if (specularFresnel) {
                        add("uniform float xeo_uSpecularFresnelCenterBias;");
                        add("uniform float xeo_uSpecularFresnelEdgeBias;");
                        add("uniform float xeo_uSpecularFresnelPower;");
                        add("uniform vec3 xeo_uSpecularFresnelCenterColor;");
                        add("uniform vec3 xeo_uSpecularFresnelEdgeColor;");
                        add();
                    }

                    if (opacityFresnel) {
                        add("uniform float xeo_uOpacityFresnelCenterBias;");
                        add("uniform float xeo_uOpacityFresnelEdgeBias;");
                        add("uniform float xeo_uOpacityFresnelPower;");
                        add("uniform vec3 xeo_uOpacityFresnelCenterColor;");
                        add("uniform vec3 xeo_uOpacityFresnelEdgeColor;");
                        add();
                    }

                    if (reflectivityFresnel) {
                        add("uniform float xeo_uReflectivityFresnelCenterBias;");
                        add("uniform float xeo_uReflectivityFresnelEdgeBias;");
                        add("uniform float xeo_uReflectivityFresnelPower;");
                        add("uniform vec3 xeo_uReflectivityFresnelCenterColor;");
                        add("uniform vec3 xeo_uReflectivityFresnelEdgeColor;");
                        add();
                    }

                    if (emissiveFresnel) {
                        add("uniform float xeo_uEmissiveFresnelCenterBias;");
                        add("uniform float xeo_uEmissiveFresnelEdgeBias;");
                        add("uniform float xeo_uEmissiveFresnelPower;");
                        add("uniform vec3 xeo_uEmissiveFresnelCenterColor;");
                        add("uniform vec3 xeo_uEmissiveFresnelEdgeColor;");
                        add();
                    }

                    comment("Fresnel calculation");
                    add();
                    add("float fresnel(vec3 eyeDir, vec3 normal, float edgeBias, float centerBias, float power) {");
                    add("    float fr = abs(dot(eyeDir, normal));");
                    add("    float finalFr = clamp((fr - edgeBias) / (centerBias - edgeBias), 0.0, 1.0);");
                    add("    return pow(finalFr, power);");
                    add("}");
                }
            }

            add();

            add("void main(void) {");

            add();

            add("   vec3 ambient = xeo_uLightAmbientColor;");
            add("   vec3 emissive = xeo_uEmissive;");
            add("   float opacity = xeo_uOpacity;");

            if (states.geometry.colors) {
                add("   vec3 diffuse = xeo_vColor.rgb;"); // Diffuse color from vertex colors
            } else {
                add("   vec3 diffuse = xeo_uDiffuse;");
            }

            if (normals) {

                add("vec3 viewEyeVec = normalize(xeo_vViewEyeVec);");

                add("   vec3 specular = xeo_uSpecular;");
                add("   float shininess = xeo_uShininess;");
                add("   float reflectivity = xeo_uReflectivity;");

                if (normalMapping) {

                    add("   vec3 viewNormal = vec3(0.0, 1.0, 0.0);");

                } else {

                    // Normalize the interpolated normals in the per-fragment-fragment-shader,
                    // because if we linear interpolated two nonparallel normalized vectors,
                    // the resulting vector won’t be of length 1

                    add("   vec3 viewNormal = normalize(xeo_vViewNormal);");
                }
            }

            if (texturing) {

                // Apply textures

                add();
                comment("   Apply textures");
                add();

                add("   vec4 texturePos = vec4(xeo_vUV.s, xeo_vUV.t, 1.0, 1.0);");
                add("   vec2 textureCoord;");

                var material = states.material;

                // Opacity and emissive lighting and mapping are independent of normals

                if (material.emissiveMap) {
                    add();
                    if (material.emissiveMap.matrix) {
                        add("   textureCoord = (xeo_uEmissiveMapMatrix * texturePos).xy;");
                    } else {
                        add("   textureCoord = texturePos.xy;");
                    }
                    add("   textureCoord.y = -textureCoord.y;");
                    add("   emissive = texture2D(xeo_uEmissiveMap, textureCoord).rgb;");
                }

                if (material.opacityMap) {
                    add();
                    if (material.opacityMap.matrix) {
                        add("   textureCoord = (xeo_uOpacityMapMatrix * texturePos).xy;");
                    } else {
                        add("   textureCoord = texturePos.xy;");
                    }
                    add("   textureCoord.y = -textureCoord.y;");
                    add("   opacity = texture2D(xeo_uOpacityMap, textureCoord).b;");
                }

                if (material.ambientMap) {
                    add();
                    if (material.ambientMap.matrix) {
                        add("   textureCoord = (xeo_uAmbientMapMatrix * texturePos).xy;");
                    } else {
                        add("   textureCoord = texturePos.xy;");
                    }
                    add("   textureCoord.y = -textureCoord.y;");
                    add("   ambient = texture2D(xeo_uAmbientMap, textureCoord).rgb;");
                }

                if (material.diffuseMap) {
                    add();
                    if (material.diffuseMap.matrix) {
                        add("   textureCoord = (xeo_uDiffuseMapMatrix * texturePos).xy;");
                    } else {
                        add("   textureCoord = texturePos.xy;");
                    }
                    add("   textureCoord.y = -textureCoord.y;");
                    add("   diffuse = texture2D(xeo_uDiffuseMap, textureCoord).rgb;");
                }

                if (normals) {

                    if (material.specularMap) {
                        add();
                        if (material.specularMap.matrix) {
                            add("   textureCoord = (xeo_uSpecularMapMatrix * texturePos).xy;");
                        } else {
                            add("   textureCoord = texturePos.xy;");
                        }
                        add("   textureCoord.y = -textureCoord.y;");
                        add("   specular = texture2D(xeo_uSpecularMap, textureCoord).rgb;");
                    }

                    if (material.reflectivityMap) {
                        add();
                        if (material.reflectivityMap.matrix) {
                            add("   textureCoord = (xeo_uReflectivityMapMatrix * texturePos).xy;");
                        } else {
                            add("   textureCoord = texturePos.xy;");
                        }
                        add("   textureCoord.y = -textureCoord.y;");
                        add("   reflectivity = texture2D(xeo_uReflectivityMap, textureCoord).b;");
                    }
                }

                if (normalMapping) {
                    add();
                    if (material.normalMap.matrix) {
                        add("   textureCoord = (xeo_uNormalMapMatrix * texturePos).xy;");
                    } else {
                        add("   textureCoord = texturePos.xy;");
                    }
                    add("   textureCoord.y = -textureCoord.y;");
                    add("   viewNormal = normalize(texture2D(xeo_uNormalMap, vec2(textureCoord.x, textureCoord.y)).xyz * 2.0 - 1.0);");
                }
            }

            add("   vec4 fragColor;");

            if (normals) {

                // Get Lambertian shading terms

                add();
                add("   vec3  diffuseLight = vec3(0.0, 0.0, 0.0);");
                add("   vec3  specularLight = vec3(0.0, 0.0, 0.0);");

                add();
                add("   vec3  viewLightVec;");
                add("   float specAngle;");
                add("   float lightDist;");
                add("   float attenuation;");


                for (i = 0, len = states.lights.lights.length; i < len; i++) {

                    light = states.lights.lights[i];

                    if (light.type === "ambient") {
                        continue;
                    }

                    // If normal mapping, the fragment->light vector will be in tangent space
                    add("   viewLightVec = normalize(xeo_vViewLightVecAndDist" + i + ".xyz);");


                    if (light.type === "point") {
                        add();

                        add("   specAngle = max(dot(viewNormal, viewLightVec), 0.0);");

                        add("   lightDist = xeo_vViewLightVecAndDist" + i + ".w;");

                        add("   attenuation = 1.0 - (" +
                            "  xeo_uLightAttenuation" + i + "[0] + " +
                            "  xeo_uLightAttenuation" + i + "[1] * lightDist + " +
                            "  xeo_uLightAttenuation" + i + "[2] * lightDist * lightDist);");

                        add("   diffuseLight += xeo_uLightIntensity" + i + " * specAngle * xeo_uLightColor" + i + " * attenuation;");

                        add("   specularLight += xeo_uLightIntensity" + i + " *  pow(max(dot(reflect(-viewLightVec, -viewNormal), viewEyeVec), 0.0), shininess) * attenuation;");
                    }

                    if (light.type === "dir") {

                        add("   specAngle = max(dot(viewNormal, -viewLightVec), 0.0);");

                        add("   diffuseLight += xeo_uLightIntensity" + i + " * specAngle * xeo_uLightColor" + i + ";");

                        add("   specularLight += xeo_uLightIntensity" + i + " * pow(max(dot(reflect(viewLightVec, -viewNormal), viewEyeVec), 0.0), shininess);");
                    }
                }

                add();

                // Get Fresnel terms

                if (diffuseFresnel || specularFresnel || opacityFresnel || emissiveFresnel || reflectivityFresnel) {

                    add();
                    comment("   Apply Fresnels");

                    if (diffuseFresnel) {
                        add();
                        add("float diffuseFresnel = fresnel(viewEyeVec, viewNormal, xeo_uDiffuseFresnelEdgeBias, xeo_uDiffuseFresnelCenterBias, xeo_uDiffuseFresnelPower);");
                        add("diffuse *= mix(xeo_uDiffuseFresnelEdgeColor, xeo_uDiffuseFresnelCenterColor, diffuseFresnel);");
                    }

                    if (specularFresnel) {
                        add();
                        add("float specularFresnel = fresnel(viewEyeVec, viewNormal, xeo_uSpecularFresnelEdgeBias, xeo_uSpecularFresnelCenterBias, xeo_uSpecularFresnelPower);");
                        add("specular *= mix(xeo_uSpecularFresnelEdgeColor, xeo_uSpecularFresnelCenterColor, specularFresnel);");
                    }

                    if (opacityFresnel) {
                        add();
                        add("float opacityFresnel = fresnel(viewEyeVec, viewNormal, xeo_uOpacityFresnelEdgeBias, xeo_uOpacityFresnelCenterBias, xeo_uOpacityFresnelPower);");
                        add("opacity *= mix(xeo_uOpacityFresnelEdgeColor.r, xeo_uOpacityFresnelCenterColor.r, opacityFresnel);");
                    }

                    if (emissiveFresnel) {
                        add();
                        add("float emissiveFresnel = fresnel(viewEyeVec, viewNormal, xeo_uEmissiveFresnelEdgeBias, xeo_uEmissiveFresnelCenterBias, xeo_uEmissiveFresnelPower);");
                        add("emissive *= mix(xeo_uEmissiveFresnelEdgeColor, xeo_uEmissiveFresnelCenterColor, emissiveFresnel);");
                    }
                }

                // Combine terms with Blinn-Phong BRDF

                add();
                comment("   Phong BRDF");
                add();
                add("   fragColor = vec4((specular * specularLight) + ((diffuseLight + (ambient * xeo_uLightAmbientIntensity) ) * diffuse) + emissive, opacity);");

            } else {

                // No normals
                add();
                comment("   Non-Lambertian BRDF");
                add();
                add("   fragColor = vec4(emissive + diffuse, opacity);");
            }

            add("   fragColor.rgb *= fragColor.a;");

            add("   gl_FragColor = fragColor;");

            add("}");

            return end();
        }

        // Start fresh program source
        function begin() {
            src = [];
        }

        // Append to program source
        function add(txt) {
            src.push(txt || "");
        }

        // Append to program source
        function comment(txt) {
            if (txt) {
                var c = 0;
                for (var i = 0, len = txt.length; i < len; i++) {
                    if (txt.charAt(i) === " ") {
                        c++;
                    }
                }
                var pad = c > 0 ? txt.substring(0, c - 1) : "";
                src.push(pad + "// " + txt.substring(c - 1));
            }
        }

        // Finish building program source
        function end() {
            return src;
        }

        function getFSFloatPrecision(gl) {

            if (!gl.getShaderPrecisionFormat) {
                return "mediump";
            }

            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
                return "highp";
            }

            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
                return "mediump";
            }

            return "lowp";
        }

    })();

})();;(function () {

    "use strict";

    /**
     * A chunk of WebGL state changes to render a xeogl.renderer.State.
     *
     * @private
     */
    xeogl.renderer.Chunk = function () {
    };

    /**
     * Initialises the chunk.
     *
     * @param {Number} id Chunk ID
     * @param {xeogl.renderer.Program} program Program to render this chunk
     * @param {xeogl.renderer.State} state The state rendered by this chunk
     */
    xeogl.renderer.Chunk.prototype.init = function (id, program, state) {

        this.id = id;

        this.program = program;

        this.state = state;

        this.useCount = 0;

        if (this.build) {
            this.build();
        }
    };

})();
;(function () {

    "use strict";

    /**
     *  Manages creation, reuse and destruction of {@link xeogl.renderer.Chunk}s.
     */
    xeogl.renderer.ChunkFactory = function () {
        this.types = xeogl.renderer.ChunkFactory.types;
    };

    /**
     * Sub-classes of {@link xeogl.renderer.Chunk} provided by this factory
     */
    xeogl.renderer.ChunkFactory.types = {};   // Supported chunk classes, installed by #createChunkType

    /**
     * Creates a chunk type.
     *
     * @param params Members to augment the chunk class prototype with
     * @param params.type Type name for the new chunk class
     * @param params.draw Method to render the chunk in draw render
     * @param params.pickObject
     * @param params.pickPrimitive
     */
    xeogl.renderer.ChunkFactory.createChunkType = function (params) {

        if (!params.type) {
            throw "'type' expected in params";
        }

        var supa = xeogl.renderer.Chunk;

        var chunkClass = function () { // Create the class
            this.useCount = 0;
            this.init.apply(this, arguments);
        };

        chunkClass.prototype = new supa();              // Inherit from base class
        chunkClass.prototype.constructor = chunkClass;

        xeogl._apply(params, chunkClass.prototype);   // Augment subclass

        xeogl.renderer.ChunkFactory.types[params.type] = {
            constructor: chunkClass,
            chunks: {},
            freeChunks: [],
            freeChunksLen: 0
        };

        return chunkClass;
    };

    /**
     * Gets a chunk from this factory.
     */
    xeogl.renderer.ChunkFactory.prototype.getChunk = function (id, type, program, state) {

        var chunkType = this.types[type];

        if (!chunkType) {
            throw "chunk type not supported: '" + type + "'";
        }

        var chunk = chunkType.chunks[id];

        if (chunk) {
            chunk.useCount++;
            return chunk;
        }

        // Try to recycle a free chunk

        if (chunkType.freeChunksLen > 0) {
            chunk = chunkType.freeChunks[--chunkType.freeChunksLen];
        }

        if (chunk) {

            // Reinitialise the free chunk

            chunk.init(id, program, state);

        } else {

            // No free chunk, create a new one

            chunk = new chunkType.constructor(id, program, state);
        }

        chunk.useCount = 1;

        chunkType.chunks[id] = chunk;

        return chunk;
    };

    /**
     * Releases a chunk back to this factory.
     *
     * @param {xeogl.renderer.Chunk} chunk Chunk to release
     */
    xeogl.renderer.ChunkFactory.prototype.putChunk = function (chunk) {

        if (chunk.useCount === 0) { // In case of excess puts
            return;
        }

        // Free the chunk if use count now zero

        if (--chunk.useCount <= 0) {

            var chunkType = this.types[chunk.type];

            delete chunkType.chunks[chunk.id];

            chunkType.freeChunks[chunkType.freeChunksLen++] = chunk;
        }
    };

    /**
     * Restores the chunks in this factory after a WebGL context recovery.
     */
    xeogl.renderer.ChunkFactory.prototype.webglRestored = function (gl) {

        var types = this.types;
        var chunkType;
        var chunks;
        var chunk;

        for (var type in types) {

            if (types.hasOwnProperty(type)) {

                chunkType = types[type];

                chunks = chunkType.chunks;

                for (var id in chunks) {

                    if (chunks.hasOwnProperty(id)) {

                        chunk = chunks[id];

                        if (chunk.build) {
                            chunk.build();
                        }
                    }
                }
            }
        }
    };

})();
;(function () {

    "use strict";

    /**
     * Create display state chunk type for draw and pick render of user clipping planes
     */
    xeogl.renderer.ChunkFactory.createChunkType({

        type: "clips",

        build: function () {

            var i;
            var len;

            this._uClipModeDraw = this._uClipModeDraw || [];
            this._uClipPlaneDraw = this._uClipPlaneDraw || [];

            var draw = this.program.draw;

            for (i = 0, len = this.state.clips.length; i < len; i++) {
                this._uClipModeDraw[i] = draw.getUniform("xeo_uClipMode" + i);
                this._uClipPlaneDraw[i] = draw.getUniform("xeo_uClipPlane" + i)
            }

            this._uClipModePick = this._uClipModePick || [];
            this._uClipPlanePick = this._uClipPlanePick || [];

            var pick = this.program.pick;

            for (i = 0, len = this.state.clips.length; i < len; i++) {
                this._uClipModePick[i] = pick.getUniform("xeo_uClipMode" + i);
                this._uClipPlanePick[i] = pick.getUniform("xeo_uClipPlane" + i)
            }
        },

        drawPick: function (frameCtx) {

            return;

            var uClipMode = (frameCtx.pick) ? this._uClipModePick : this._uClipModeDraw;
            var uClipPlane = (frameCtx.pick) ? this._uClipPlanePick : this._uClipPlaneDraw;

            var mode;
            var plane;
            var clips = this.state.clips;
            var clip;

            for (var i = 0, len = clips.length; i < len; i++) {

                mode = uClipMode[i];
                plane = uClipPlane[i];

                if (mode && plane) {

                    clip = clips[i];

                    if (clip.mode === "inside") {

                        mode.setValue(2);
                        plane.setValue(clip.plane);

                    } else if (clip.mode === "outside") {

                        mode.setValue(1);
                        plane.setValue(clip.plane);

                    } else {

                        // Disabled

                        mode.setValue(0);
                    }
                }
            }
        }
    });

})();;(function () {

    "use strict";

    /**
     *
     */
    xeogl.renderer.ChunkFactory.createChunkType({

        type: "colorBuf",

        // Avoid re-application of this chunk after a program switch.

        programGlobal: true,

        draw: function (frameCtx) {

            if (!frameCtx.transparent) {

                // Blending forced while rendering a transparent bin

                var state = this.state;
                var blendEnabled = state.blendEnabled;

                var gl = this.program.gl;

                if (frameCtx.blendEnabled !== blendEnabled) {

                    if (blendEnabled) {
                        gl.enable(gl.BLEND);

                    } else {
                        gl.disable(gl.BLEND);
                    }

                    frameCtx.blendEnabled = blendEnabled;
                }

                var colorMask = state.colorMask;

                gl.colorMask(colorMask[0], colorMask[1], colorMask[2], colorMask[3]);
            }
        }
    });

})();
;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "cubemap",

        build: function () {
//            this._uCubeMapSampler = this._uCubeMapSampler || [];
//            this._uCubeMapIntensity = this._uCubeMapIntensity || [];
//            var layers = this.state.layers;
//            if (layers) {
//                var layer;
//                var draw = this.program.draw;
//                for (var i = 0, len = layers.length; i < len; i++) {
//                    layer = layers[i];
//                    this._uCubeMapSampler[i] = "xeo_uCubeMapSampler" + i;
//                    this._uCubeMapIntensity[i] = draw.getUniform("xeo_uCubeMapIntensity" + i);
//                }
//            }
        },

        draw: function (frameCtx) {
//            var layers = this.state.layers;
//            if (layers) {
//                var layer;
//                var draw = this.program.draw;
//                for (var i = 0, len = layers.length; i < len; i++) {
//                    layer = layers[i];
//                    if (this._uCubeMapSampler[i] && layer.texture) {
//                        draw.bindTexture(this._uCubeMapSampler[i], layer.texture, frameCtx.textureUnit++);
//                        if (this._uCubeMapIntensity[i]) {
//                            this._uCubeMapIntensity[i].setValue(layer.intensity);
//                        }
//                    }
//                }
//            }
//
//            if (frameCtx.textureUnit > 10) { // TODO: Find how many textures allowed
//                frameCtx.textureUnit = 0;
//            }
        }
    });

})();;(function () {

    "use strict";

    /**
     *
     */
    xeogl.renderer.ChunkFactory.createChunkType({

        type: "depthBuf",

        // Avoid reapplication of this chunk after a program switch.

        programGlobal: true,

        draw: function (frameCtx) {

            var gl = this.program.gl;

            var state = this.state;
            var active = state.active;

            if (frameCtx.depthbufEnabled !== active) {

                if (active) {
                    gl.enable(gl.DEPTH_TEST);

                } else {
                    gl.disable(gl.DEPTH_TEST);
                }

                frameCtx.depthbufEnabled = active;
            }

            var clearDepth = state.clearDepth;

            if (frameCtx.clearDepth !== clearDepth) {
                gl.clearDepth(clearDepth);
                frameCtx.clearDepth = clearDepth;
            }

            var depthFunc = state.depthFunc;

            if (frameCtx.depthFunc !== depthFunc) {
                gl.depthFunc(depthFunc);
                frameCtx.depthFunc = depthFunc;
            }

            if (state.clear) {
                gl.clear(gl.DEPTH_BUFFER_BIT);
            }
        }
    });

})();
;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "draw",

        // As we apply a list of state chunks in a {@link xeogl.renderer.Renderer},
        // we track the ID of each chunk in order to avoid redundantly re-applying
        // the same chunk. We don't want that for draw chunks however, because
        // they contain drawElements calls, which we need to do for each object.

        unique: true,

        build: function () {
            this._uPickColorObject = this.program.pickObject.getUniform("xeo_uPickColor");
        },

        draw: function (frameCtx) {
            var state = this.state;
            var gl = this.program.gl;

            if (state.indices) {
                gl.drawElements(state.primitive, state.indices.numItems, state.indices.itemType, 0);
                frameCtx.drawElements++;
            }
        },

        pickObject: function (frameCtx) {

            var state = this.state;
            var gl = this.program.gl;

            if (this._uPickColorObject) {

                frameCtx.pickIndex++;

                var b = frameCtx.pickIndex >> 16 & 0xFF;
                var g = frameCtx.pickIndex >> 8 & 0xFF;
                var r = frameCtx.pickIndex & 0xFF;

                this._uPickColorObject.setValue([r / 255, g / 255, b / 255, 1]);
            }

            if (state.indices) {
                gl.drawElements(state.primitive, state.indices.numItems, state.indices.itemType, 0);
                frameCtx.drawElements++;
            }
        },

        pickPrimitive: function () {

            var state = this.state;
            var gl = this.program.gl;

            var pickPositions = state.getPickPositions();

            if (pickPositions) {
                gl.drawArrays(state.primitive, 0, pickPositions.numItems / 3);
            }
        }
    });

})();
;(function () {

    "use strict";

    /**
     *  Create display state chunk type for draw and pick render of geometry
     */
    xeogl.renderer.ChunkFactory.createChunkType({

        type: "geometry",

        build: function () {

            var draw = this.program.draw;
            this._aPositionDraw = draw.getAttribute("xeo_aPosition");
            this._aNormalDraw = draw.getAttribute("xeo_aNormal");
            this._aUVDraw = draw.getAttribute("xeo_aUV");
            this._aTangentDraw = draw.getAttribute("xeo_aTangent");
            this._aColorDraw = draw.getAttribute("xeo_aColor");

            var pickObject = this.program.pickObject;
            this._aPositionPickObject = pickObject.getAttribute("xeo_aPosition");

            var pickPrimitive = this.program.pickPrimitive;
            this._aPositionPickPrimitive = pickPrimitive.getAttribute("xeo_aPosition");
            this._aColorPickPrimitive = pickPrimitive.getAttribute("xeo_aColor");
        },

        draw: function (frameCtx) {

            var state = this.state;

            if (this._aPositionDraw) {
                this._aPositionDraw.bindFloatArrayBuffer(state.positions);
                frameCtx.bindArray++;
            }

            if (this._aNormalDraw) {
                this._aNormalDraw.bindFloatArrayBuffer(state.normals);
                frameCtx.bindArray++;
            }

            if (this._aUVDraw) {
                this._aUVDraw.bindFloatArrayBuffer(state.uv);
                frameCtx.bindArray++;
            }

            if (this._aColorDraw) {
                this._aColorDraw.bindFloatArrayBuffer(state.colors);
                frameCtx.bindArray++;
            }

            if (this._aTangentDraw) {

                // Tangents array is lazy-built from UVs and normals,
                // now that we know that we need it

                this._aTangentDraw.bindFloatArrayBuffer(state.getTangents());
                frameCtx.bindArray++;
            }

            if (state.indices) {
                state.indices.bind();
                frameCtx.bindArray++;
            }
        },

        pickObject: function () {

            var state = this.state;

            if (this._aPositionPickObject) {
                this._aPositionPickObject.bindFloatArrayBuffer(state.positions);
            }

            if (state.indices) {
                state.indices.bind();
            }
        },

        pickPrimitive: function () {

            var state = this.state;

            // Arrays for primitive-picking are lazy-built
            // now that we know we need them

            if (this._aPositionPickPrimitive) {
                this._aPositionPickPrimitive.bindFloatArrayBuffer(state.getPickPositions());
            }

            if (this._aColorPickPrimitive) {
                this._aColorPickPrimitive.bindFloatArrayBuffer(state.getPickColors());
            }
        }
    });

})();;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "lights",

        build: function () {

            this._uLightAmbientColor = this._uLightAmbientColor || [];
            this._uLightAmbientIntensity = this._uLightAmbientIntensity || [];

            this._uLightColor = this._uLightColor || [];
            this._uLightIntensity = this._uLightIntensity || [];

            this._uLightDir = this._uLightDir || [];
            this._uLightPos = this._uLightPos || [];

            this._uLightAttenuation = this._uLightAttenuation || [];

            var lights = this.state.lights;
            var program = this.program;

            for (var i = 0, len = lights.length; i < len; i++) {

                switch (lights[i].type) {

                    case "ambient":
                        this._uLightAmbientColor[i] = program.draw.getUniform("xeo_uLightAmbientColor");
                        this._uLightAmbientIntensity[i] = program.draw.getUniform("xeo_uLightAmbientIntensity");
                        break;

                    case "dir":
                        this._uLightColor[i] = program.draw.getUniform("xeo_uLightColor" + i);
                        this._uLightIntensity[i] = program.draw.getUniform("xeo_uLightIntensity" + i);
                        this._uLightPos[i] = null;
                        this._uLightDir[i] = program.draw.getUniform("xeo_uLightDir" + i);
                        break;

                    case "point":
                        this._uLightColor[i] = program.draw.getUniform("xeo_uLightColor" + i);
                        this._uLightIntensity[i] = program.draw.getUniform("xeo_uLightIntensity" + i);
                        this._uLightPos[i] = program.draw.getUniform("xeo_uLightPos" + i);
                        this._uLightDir[i] = null;
                        this._uLightAttenuation[i] = program.draw.getUniform("xeo_uLightAttenuation" + i);
                        break;
                }
            }
        },

        draw: function () {

            var lights = this.state.lights;
            var light;

            for (var i = 0, len = lights.length; i < len; i++) {

                light = lights[i];

                // Ambient color

                if (this._uLightAmbientColor[i]) {
                    this._uLightAmbientColor[i].setValue(light.color);

                    if (this._uLightAmbientIntensity[i]) {
                        this._uLightAmbientIntensity[i].setValue(light.intensity);
                    }

                } else {

                    // Color and intensity

                    if (this._uLightColor[i]) {
                        this._uLightColor[i].setValue(light.color);
                    }

                    if (this._uLightIntensity[i]) {
                        this._uLightIntensity[i].setValue(light.intensity);
                    }

                    if (this._uLightPos[i]) {

                        // Position

                        this._uLightPos[i].setValue(light.pos);

                        // Attenuation

                        if (this._uLightAttenuation[i]) {
                            this._uLightAttenuation[i].setValue(light.attenuation);
                        }
                    }

                    // Direction

                    if (this._uLightDir[i]) {
                        this._uLightDir[i].setValue(light.dir);
                    }
                }
            }
        }
    });

})();
;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "modelTransform",

        build: function () {
            this._uModelMatrixDraw = this.program.draw.getUniform("xeo_uModelMatrix");
            this._uModelNormalMatrixDraw = this.program.draw.getUniform("xeo_uModelNormalMatrix");
            this._uModelMatrixPickObject = this.program.pickObject.getUniform("xeo_uModelMatrix");
            this._uModelMatrixPickPrimitive = this.program.pickPrimitive.getUniform("xeo_uModelMatrix");
        },

        draw: function () {
            if (this._uModelMatrixDraw) {
                this._uModelMatrixDraw.setValue(this.state.getMatrix());
            }
            if (this._uModelNormalMatrixDraw) {
                this._uModelNormalMatrixDraw.setValue(this.state.getNormalMatrix());
            }
        },

        pickObject: function () {
            if (this._uModelMatrixPickObject) {
                this._uModelMatrixPickObject.setValue(this.state.getMatrix());
            }
        },

        pickPrimitive: function () {
            if (this._uModelMatrixPickPrimitive) {
                this._uModelMatrixPickPrimitive.setValue(this.state.getMatrix());
            }
        }
    });

})();;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "modes",

        build: function () {
        },

        draw: function (frameCtx) {

            var state = this.state;
            var gl = this.program.gl;

            var backfaces = state.backfaces;

            if (frameCtx.backfaces !== backfaces) {
                if (backfaces) {
                    gl.disable(gl.CULL_FACE);
                } else {
                    gl.enable(gl.CULL_FACE);
                }
                frameCtx.backfaces = backfaces;
            }

            var frontface = state.frontface;

            if (frameCtx.frontface !== frontface) {

                // frontface is boolean for speed,
                // true == "ccw", false == "cw"

                if (frontface) {
                    gl.frontFace(gl.CCW);
                } else {
                    gl.frontFace(gl.CW);
                }
                frameCtx.frontface = frontface;
            }

            var transparent = state.transparent;

            if (frameCtx.transparent !== transparent) {
                if (!frameCtx.pick) {
                    if (transparent) {

                        // Entering a transparency bin

                        gl.enable(gl.BLEND);
                        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
                        frameCtx.blendEnabled = true;
                    } else {

                        // Leaving a transparency bin

                        gl.disable(gl.BLEND);
                        frameCtx.blendEnabled = false;
                    }
                }
                frameCtx.transparent = transparent;
            }
        },

        pickObject: function (frameCtx) {

            var state = this.state;
            var gl = this.program.gl;

            var backfaces = state.backfaces;
            if (frameCtx.backfaces !== backfaces) {
                if (backfaces) {
                    gl.disable(gl.CULL_FACE);
                } else {
                    gl.enable(gl.CULL_FACE);
                }
                frameCtx.backfaces = backfaces;
            }

            var frontface = state.frontface;
            if (frameCtx.frontface !== frontface) {

                // frontface is boolean for speed,
                // true == "ccw", false == "cw"

                if (frontface) {
                    gl.frontFace(gl.CCW);
                } else {
                    gl.frontFace(gl.CW);
                }
                frameCtx.frontface = frontface;
            }
        },

        pickPrimitive: function (frameCtx) {

            var state = this.state;
            var gl = this.program.gl;

            var backfaces = state.backfaces;
            if (frameCtx.backfaces !== backfaces) {
                if (backfaces) {
                    gl.disable(gl.CULL_FACE);
                } else {
                    gl.enable(gl.CULL_FACE);
                }
                frameCtx.backfaces = backfaces;
            }

            var frontface = state.frontface;
            if (frameCtx.frontface !== frontface) {

                // frontface is boolean for speed,
                // true == "ccw", false == "cw"

                if (frontface) {
                    gl.frontFace(gl.CCW);
                } else {
                    gl.frontFace(gl.CW);
                }
                frameCtx.frontface = frontface;
            }
        }
    });
})();
;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "phongMaterial",

        build: function () {

            var state = this.state;

            var draw = this.program.draw;

            // Blinn-Phong base material

            this._uDiffuse = draw.getUniform("xeo_uDiffuse");
            this._uSpecular = draw.getUniform("xeo_uSpecular");
            this._uEmissive = draw.getUniform("xeo_uEmissive");
            this._uOpacity = draw.getUniform("xeo_uOpacity");
            this._uShininess = draw.getUniform("xeo_uShininess");

            this._uPointSize = draw.getUniform("xeo_uPointSize");

            // Textures

            if (state.ambientMap) {
                this._uAmbientMap = "xeo_uAmbientMap";
                this._uAmbientMapMatrix = draw.getUniform("xeo_uAmbientMapMatrix");
            }

            if (state.diffuseMap) {
                this._uDiffuseMap = "xeo_uDiffuseMap";
                this._uDiffuseMapMatrix = draw.getUniform("xeo_uDiffuseMapMatrix");
            }

            if (state.specularMap) {
                this._uSpecularMap = "xeo_uSpecularMap";
                this._uSpecularMapMatrix = draw.getUniform("xeo_uSpecularMapMatrix");
            }

            if (state.emissiveMap) {
                this._uEmissiveMap = "xeo_uEmissiveMap";
                this._uEmissiveMapMatrix = draw.getUniform("xeo_uEmissiveMapMatrix");
            }

            if (state.opacityMap) {
                this._uOpacityMap = "xeo_uOpacityMap";
                this._uOpacityMapMatrix = draw.getUniform("xeo_uOpacityMapMatrix");
            }

            if (state.reflectivityMap) {
                this._uReflectivityMap = "xeo_uReflectivityMap";
                this._uReflectivityMapMatrix = draw.getUniform("xeo_uReflectivityMapMatrix");
            }

            if (state.normalMap) {
                this._uNormalMap = "xeo_uNormalMap";
                this._uNormalMapMatrix = draw.getUniform("xeo_uNormalMapMatrix");
            }

            // Fresnel effects

            if (state.diffuseFresnel) {
                this._uDiffuseFresnelEdgeBias = draw.getUniform("xeo_uDiffuseFresnelEdgeBias");
                this._uDiffuseFresnelCenterBias = draw.getUniform("xeo_uDiffuseFresnelCenterBias");
                this._uDiffuseFresnelEdgeColor = draw.getUniform("xeo_uDiffuseFresnelEdgeColor");
                this._uDiffuseFresnelCenterColor = draw.getUniform("xeo_uDiffuseFresnelCenterColor");
                this._uDiffuseFresnelPower = draw.getUniform("xeo_uDiffuseFresnelPower");
            }

            if (state.specularFresnel) {
                this._uSpecularFresnelEdgeBias = draw.getUniform("xeo_uSpecularFresnelEdgeBias");
                this._uSpecularFresnelCenterBias = draw.getUniform("xeo_uSpecularFresnelCenterBias");
                this._uSpecularFresnelEdgeColor = draw.getUniform("xeo_uSpecularFresnelEdgeColor");
                this._uSpecularFresnelCenterColor = draw.getUniform("xeo_uSpecularFresnelCenterColor");
                this._uSpecularFresnelPower = draw.getUniform("xeo_uSpecularFresnelPower");
            }

            if (state.opacityFresnel) {
                this._uOpacityFresnelEdgeBias = draw.getUniform("xeo_uOpacityFresnelEdgeBias");
                this._uOpacityFresnelCenterBias = draw.getUniform("xeo_uOpacityFresnelCenterBias");
                this._uOpacityFresnelEdgeColor = draw.getUniform("xeo_uOpacityFresnelEdgeColor");
                this._uOpacityFresnelCenterColor = draw.getUniform("xeo_uOpacityFresnelCenterColor");
                this._uOpacityFresnelPower = draw.getUniform("xeo_uOpacityFresnelPower");
            }

            if (state.reflectivityFresnel) {
                this._uReflectivityFresnelEdgeBias = draw.getUniform("xeo_uReflectivityFresnelEdgeBias");
                this._uReflectivityFresnelCenterBias = draw.getUniform("xeo_uReflectivityFresnelCenterBias");
                this._uReflectivityFresnelEdgeColor = draw.getUniform("xeo_uReflectivityFresnelEdgeColor");
                this._uReflectivityFresnelCenterColor = draw.getUniform("xeo_uReflectivityFresnelCenterColor");
                this._uReflectivityFresnelPower = draw.getUniform("xeo_uReflectivityFresnelPower");
            }

            if (state.emissiveFresnel) {
                this._uEmissiveFresnelEdgeBias = draw.getUniform("xeo_uEmissiveFresnelEdgeBias");
                this._uEmissiveFresnelCenterBias = draw.getUniform("xeo_uEmissiveFresnelCenterBias");
                this._uEmissiveFresnelEdgeColor = draw.getUniform("xeo_uEmissiveFresnelEdgeColor");
                this._uEmissiveFresnelCenterColor = draw.getUniform("xeo_uEmissiveFresnelCenterColor");
                this._uEmissiveFresnelPower = draw.getUniform("xeo_uEmissiveFresnelPower");
            }
        },

        draw: function (frameCtx) {

            var draw = this.program.draw;
            var state = this.state;
            var gl = this.program.gl;


            if (this._uShininess) {
                this._uShininess.setValue(state.shininess);
            }

            if (frameCtx.lineWidth !== state.lineWidth) {
                gl.lineWidth(state.lineWidth);
                frameCtx.lineWidth = state.lineWidth;
            }

            if (this._uPointSize) {
                this._uPointSize.setValue(state.pointSize);
            }

            // Ambient map

            if (state.ambientMap && state.ambientMap.texture) {

                draw.bindTexture(this._uAmbientMap, state.ambientMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));
                frameCtx.bindTexture++;

                if (this._uAmbientMapMatrix) {
                    this._uAmbientMapMatrix.setValue(state.ambientMap.matrix);
                }
            }

            // Diffuse map

            if (state.diffuseMap && state.diffuseMap.texture) {

                draw.bindTexture(this._uDiffuseMap, state.diffuseMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));
                frameCtx.bindTexture++;

                if (this._uDiffuseMapMatrix) {
                    this._uDiffuseMapMatrix.setValue(state.diffuseMap.matrix);
                }

            } else if (this._uDiffuse) {
                this._uDiffuse.setValue(state.diffuse);
            }

            // Specular map

            if (state.specularMap && state.specularMap.texture) {

                draw.bindTexture(this._uSpecularMap, state.specularMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));
                frameCtx.bindTexture++;

                if (this._uSpecularMapMatrix) {
                    this._uSpecularMapMatrix.setValue(state.specularMap.matrix);
                }

            } else if (this._uSpecular) {
                this._uSpecular.setValue(state.specular);
            }

            // Emissive map

            if (state.emissiveMap && state.emissiveMap.texture) {

                draw.bindTexture(this._uEmissiveMap, state.emissiveMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));
                frameCtx.bindTexture++;

                if (this._uEmissiveMapMatrix) {
                    this._uEmissiveMapMatrix.setValue(state.emissiveMap.matrix);
                }

            } else if (this._uEmissive) {
                this._uEmissive.setValue(state.emissive);
            }

            // Opacity map

            if (state.opacityMap && state.opacityMap.texture) {

                draw.bindTexture(this._uOpacityMap, state.opacityMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));
                frameCtx.bindTexture++;

                if (this._uOpacityMapMatrix) {
                    this._uOpacityMapMatrix.setValue(state.opacityMap.matrix);
                }

            } else if (this._uOpacity) {
                this._uOpacity.setValue(state.opacity);
            }

            // Reflectivity map

            if (state.reflectivityMap && state.reflectivityMap.texture) {

                draw.bindTexture(this._uReflectivityMap, state.reflectivityMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));

                if (this._uReflectivityMapMatrix) {
                    this._uReflectivityMapMatrix.setValue(state.reflectivityMap.matrix);
                }
            }

            // Normal map

            if (state.normalMap && state.normalMap.texture) {

                draw.bindTexture(this._uNormalMap, state.normalMap.texture, (frameCtx.textureUnit < 8 ? frameCtx.textureUnit++ : frameCtx.textureUnit = 0));
                frameCtx.bindTexture++;

                if (this._uNormalMapMatrix) {
                    this._uNormalMapMatrix.setValue(state.normalMap.matrix);
                }
            }

            // Fresnel effects

            if (state.diffuseFresnel) {

                if (this._uDiffuseFresnelEdgeBias) {
                    this._uDiffuseFresnelEdgeBias.setValue(state.diffuseFresnel.edgeBias);
                }

                if (this._uDiffuseFresnelCenterBias) {
                    this._uDiffuseFresnelCenterBias.setValue(state.diffuseFresnel.centerBias);
                }

                if (this._uDiffuseFresnelEdgeColor) {
                    this._uDiffuseFresnelEdgeColor.setValue(state.diffuseFresnel.edgeColor);
                }

                if (this._uDiffuseFresnelCenterColor) {
                    this._uDiffuseFresnelCenterColor.setValue(state.diffuseFresnel.centerColor);
                }

                if (this._uDiffuseFresnelPower) {
                    this._uDiffuseFresnelPower.setValue(state.diffuseFresnel.power);
                }
            }

            if (state.specularFresnel) {

                if (this._uSpecularFresnelEdgeBias) {
                    this._uSpecularFresnelEdgeBias.setValue(state.specularFresnel.edgeBias);
                }

                if (this._uSpecularFresnelCenterBias) {
                    this._uSpecularFresnelCenterBias.setValue(state.specularFresnel.centerBias);
                }

                if (this._uSpecularFresnelEdgeColor) {
                    this._uSpecularFresnelEdgeColor.setValue(state.specularFresnel.edgeColor);
                }

                if (this._uSpecularFresnelCenterColor) {
                    this._uSpecularFresnelCenterColor.setValue(state.specularFresnel.centerColor);
                }

                if (this._uSpecularFresnelPower) {
                    this._uSpecularFresnelPower.setValue(state.specularFresnel.power);
            }
            }

            if (state.opacityFresnel) {

                if (this._uOpacityFresnelEdgeBias) {
                    this._uOpacityFresnelEdgeBias.setValue(state.opacityFresnel.edgeBias);
                }

                if (this._uOpacityFresnelCenterBias) {
                    this._uOpacityFresnelCenterBias.setValue(state.opacityFresnel.centerBias);
                }

                if (this._uOpacityFresnelEdgeColor) {
                    this._uOpacityFresnelEdgeColor.setValue(state.opacityFresnel.edgeColor);
                }

                if (this._uOpacityFresnelCenterColor) {
                    this._uOpacityFresnelCenterColor.setValue(state.opacityFresnel.centerColor);
                }

                if (this._uOpacityFresnelPower) {
                    this._uOpacityFresnelPower.setValue(state.opacityFresnel.power);
                }
            }

            if (state.reflectivityFresnel) {

                if (this._uReflectivityFresnelEdgeBias) {
                    this._uReflectivityFresnelEdgeBias.setValue(state.reflectivityFresnel.edgeBias);
                }

                if (this._uReflectivityFresnelCenterBias) {
                    this._uReflectivityFresnelCenterBias.setValue(state.reflectivityFresnel.centerBias);
                }

                if (this._uReflectivityFresnelEdgeColor) {
                    this._uReflectivityFresnelEdgeColor.setValue(state.reflectivityFresnel.edgeColor);
                }

                if (this._uReflectivityFresnelCenterColor) {
                    this._uReflectivityFresnelCenterColor.setValue(state.reflectivityFresnel.centerColor);
                }

                if (this._uReflectivityFresnelPower) {
                    this._uReflectivityFresnelPower.setValue(state.reflectivityFresnel.power);
                }
            }

            if (state.emissiveFresnel) {

                if (this._uEmissiveFresnelEdgeBias) {
                    this._uEmissiveFresnelEdgeBias.setValue(state.emissiveFresnel.edgeBias);
                }

                if (this._uEmissiveFresnelCenterBias) {
                    this._uEmissiveFresnelCenterBias.setValue(state.emissiveFresnel.centerBias);
                }

                if (this._uEmissiveFresnelEdgeColor) {
                    this._uEmissiveFresnelEdgeColor.setValue(state.emissiveFresnel.edgeColor);
                }

                if (this._uEmissiveFresnelCenterColor) {
                    this._uEmissiveFresnelCenterColor.setValue(state.emissiveFresnel.centerColor);
                }

                if (this._uEmissiveFresnelPower) {
                    this._uEmissiveFresnelPower.setValue(state.emissiveFresnel.power);
                }
            }
        }
    });

})();
;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "program",

        build: function () {
        },

        draw: function (frameCtx) {
            this.program.draw.bind();
            frameCtx.useProgram++;
        },

        pickObject: function () {
            this.program.pickObject.bind();
        },

        pickPrimitive: function () {
            this.program.pickPrimitive.bind();
        }
    });
})();



;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "projTransform",

        build: function () {
            this._uProjMatrixDraw = this.program.draw.getUniform("xeo_uProjMatrix");
            this._uProjMatrixPickObject = this.program.pickObject.getUniform("xeo_uProjMatrix");
            this._uProjMatrixPickPrimitive = this.program.pickPrimitive.getUniform("xeo_uProjMatrix");
        },

        draw: function () {
            if (this._uProjMatrixDraw) {
                this._uProjMatrixDraw.setValue(this.state.getMatrix());
            }
        },

        pickObject: function (frameCtx) {
            if (this._uProjMatrixPickObject) {
                this._uProjMatrixPickObject.setValue(frameCtx.pickProjMatrix || this.state.getMatrix());
            }
        },

        pickPrimitive: function (frameCtx) {
            if (this._uProjMatrixPickPrimitive) {
                this._uProjMatrixPickPrimitive.setValue(frameCtx.pickProjMatrix || this.state.getMatrix());
            }
        }
    });

})();;(function () {

    "use strict";

    /**
     *   Create display state chunk type for draw and pick render of renderTarget
     */
    xeogl.renderer.ChunkFactory.createChunkType({

        type: "renderTarget",

        // Avoid reapplication of this chunk type after a program switch.

        programGlobal: true,

        draw: function (frameCtx) {

            var gl = this.program.gl;
            var state = this.state;

            // Flush and unbind any render buffer already bound

            if (frameCtx.renderBuf) {
                gl.flush();
                frameCtx.renderBuf.unbind();
                frameCtx.renderBuf = null;

                // Renderer hook to bind a custom output framebuffer
                if (frameCtx.bindOutputFramebuffer) {
                    frameCtx.bindOutputFramebuffer(frameCtx.pass);
                }
            }

            // Set depthMode false and bail if no render buffer for this chunk
            var renderBuf = state.renderBuf;
            if (!renderBuf) {
                frameCtx.depthMode = false;
                return;
            }

            // Bind this chunk's render buffer, set depthMode, enable blend if depthMode false, clear buffer
            renderBuf.bind();

            frameCtx.depthMode = (state.type === state.DEPTH);

            if (frameCtx.blendEnabled && !frameCtx.depthMode) {
                gl.enable(gl.BLEND);
                gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            }

            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
            gl.clearColor(frameCtx.ambientColor[0], frameCtx.ambientColor[1], frameCtx.ambientColor[2], 1.0);
            //gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

            //gl.clear(frameCtx.depthMode ? gl.COLOR_BUFFER_BIT : gl.DEPTH_BUFFER_BIT);

            frameCtx.renderBuf = renderBuf;
        }
    });

})();;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "shader",

        draw: function () {

            var params = this.state.params;

            if (params) {

                var program = this.program.draw;
                var name;

                for (name in params) {
                    if (params.hasOwnProperty(name)) {
                        program.setUniform(name, params[name]);
                    }
                }
            }
        }
    });
})();;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "shaderParams",

        draw: function () {

            var params = this.state.params;

            if (params) {

                var program = this.program.draw;
                var name;

                for (name in params) {
                    if (params.hasOwnProperty(name)) {
                        program.setUniform(name, params[name]);
                    }
                }
            }
        }
    });

})();;(function () {

    "use strict";

    xeogl.renderer.ChunkFactory.createChunkType({

        type: "viewTransform",

        build: function () {
            this._uViewMatrixDraw = this.program.draw.getUniform("xeo_uViewMatrix");
            this._uViewNormalMatrixDraw = this.program.draw.getUniform("xeo_uViewNormalMatrix");
            this._uViewMatrixPickObject = this.program.pickObject.getUniform("xeo_uViewMatrix");
            this._uViewMatrixPickPrimitive = this.program.pickPrimitive.getUniform("xeo_uViewMatrix");
        },

        draw: function () {
            if (this._uViewMatrixDraw) {
                this._uViewMatrixDraw.setValue(this.state.getMatrix());
            }
            if (this._uViewNormalMatrixDraw) {
                this._uViewNormalMatrixDraw.setValue(this.state.getNormalMatrix());
            }
        },

        pickObject: function (frameCtx) {
            if (this._uViewMatrixPickObject) {
                this._uViewMatrixPickObject.setValue(frameCtx.pickViewMatrix || this.state.getMatrix());
            }
        },

        pickPrimitive: function (frameCtx) {
            if (this._uViewMatrixPickPrimitive) {
                this._uViewMatrixPickPrimitive.setValue(frameCtx.pickViewMatrix || this.state.getMatrix());
            }
        }
    });

})();;(function () {

    "use strict";

    /**
     *
     */
    xeogl.renderer.ChunkFactory.createChunkType({

        type: "viewport",

        // Avoid re-application of this chunk after a program switch.

        programGlobal: true,

        draw: function () {
            var boundary = this.state.boundary;
            this.program.gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);
        },

        pickObject: function () {
            var boundary = this.state.boundary;
            this.program.gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);
        },

        pickPrimitive: function () {
            var boundary = this.state.boundary;
            this.program.gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);
        }
    });

})();
;/**
 The **Component** class is the base class for all xeogl components.

 ## Component IDs

 Every Component has an ID that's unique within the parent {{#crossLink "Scene"}}{{/crossLink}}. xeogl generates
 the IDs automatically by default, however you can also specify them yourself. In the example below, we're creating a
 scene comprised of {{#crossLink "Scene"}}{{/crossLink}}, {{#crossLink "Material"}}{{/crossLink}}, {{#crossLink "Geometry"}}{{/crossLink}} and
 {{#crossLink "Entity"}}{{/crossLink}} components, while letting xeogl generate its own ID for
 the {{#crossLink "Geometry"}}{{/crossLink}}:

 ````javascript
 // The Scene is a Component too
 var scene = new xeogl.Scene({
    id: "myScene"
 });

 var material = new xeogl.PhongMaterial(scene, {
    id: "myMaterial"
 });

 var geometry = new xeogl.Geometry(scene, {
    id: "myGeometry"
 });

 // Let xeogl automatically generate the ID for our Entity
 var entity = new xeogl.Entity(scene, {
    material: material,
    geometry: geometry
 });
 ````

 We can then find those components like this:

 ````javascript
 // Find the Scene
 var theScene = xeogl.scenes["myScene"];

 // Find the Material
 var theMaterial = theScene.components["myMaterial"];
 ````

 ## Properties

 Almost every property on a xeogl Component fires a change event when you update it. For example, we can subscribe
 to the {{#crossLink "PhongMaterial/diffuse:event"}}{{/crossLink}} event that a
 {{#crossLink "Material"}}{{/crossLink}} fires when its {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}}
 property is updated, like so:

 ````javascript
 // Bind a change callback to a property
 var handle = material.on("diffuse", function(diffuse) {
    console.log("Material diffuse color has changed to: [" + diffuse[0] + ", " + diffuse[1] + "," + diffuse[2] + "]");
});

 // Change the property value, which fires the callback
 material.diffuse = [ 0.0, 0.5, 0.5 ];

 // Unsubscribe from the property change event
 material.off(handle);
 ````

 We can also subscribe to changes in the way components are attached to each other, since components are properties
 of other components. For example, we can subscribe to the '{{#crossLink "Entity/material:event"}}{{/crossLink}}' event that a
 {{#crossLink "Entity"}}Entity{{/crossLink}} fires when its {{#crossLink "Entity/material:property"}}{{/crossLink}}
 property is set to a different {{#crossLink "Material"}}Material{{/crossLink}}:

 ```` javascript
 // Bind a change callback to the Entity's Material
 entity1.on("material", function(material) {
    console.log("Entity's Material has changed to: " + material.id);
 });

 // Now replace that Material with another
 entity1.material = new xeogl.PhongMaterial({
    id: "myOtherMaterial",
    diffuse: [ 0.3, 0.3, 0.6 ]
    //..
 });
 ````

 ## Metadata

 You can set optional **metadata** on your Components, which can be anything you like. These are intended
 to help manage your components within your application code or content pipeline. You could use metadata to attach
 authoring or version information, like this:

 ````javascript
 // Scene with authoring metadata
 var scene = new xeogl.Scene({
    id: "myScene",
    meta: {
        title: "My awesome 3D scene",
        author: "@xeolabs",
        date: "February 13 2015"
    }
 });

 // Material with descriptive metadata
 var material = new xeogl.PhongMaterial(scene, {
    id: "myMaterial",
    diffuse: [1, 0, 0],
    meta: {
        description: "Bright red color with no textures",
        version: "0.1",
        foo: "bar"
    }
 });
 ````

 As with all properties, you can subscribe and change the metadata like this:

 ````javascript
 // Subscribe to changes to the Material's metadata
 material.on("meta", function(value) {
    console.log("Metadata changed: " + JSON.stringify(value));
 });

 // Change the Material's metadata, firing our change handler
 material.meta = {
    description: "Bright red color with no textures",
    version: "0.2",
    foo: "baz"
 };
 ````

 ## Logging

 Components have methods to log ID-prefixed messages to the JavaScript console:

 ````javascript
 material.log("Everything is fine, situation normal.");
 material.warn("Wait, whats that red light?");
 material.error("Aw, snap!");
 ````

 The logged messages will look like this in the console:

 ````text
 [LOG]   myMaterial: Everything is fine, situation normal.
 [WARN]  myMaterial: Wait, whats that red light..
 [ERROR] myMaterial: Aw, snap!
 ````

 ## Destruction

 Get notification of destruction directly on the Components:

 ````javascript
 material.on("destroyed", function() {
    this.log("Component was destroyed: " + this.id);
 });
 ````

 Or get notification of destruction of any Component within its {{#crossLink "Scene"}}{{/crossLink}}, indiscriminately:

 ````javascript
 scene.on("componentDestroyed", function(component) {
    this.log("Component was destroyed: " + component.id);
 });
 ````

 Then destroy a component like this:

 ````javascript
 material.destroy();
 ````

 Other Components that are linked to it will fall back on a default of some sort. For example, any
 {{#crossLink "Entity"}}Entities{{/crossLink}} that were linked to our {{#crossLink "Material"}}{{/crossLink}}
 will then automatically link to the {{#crossLink "Scene"}}Scene's{{/crossLink}} default {{#crossLink "Scene/material:property"}}{{/crossLink}}.

 @class Component
 @module xeogl
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Component
 within the default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} DepthBuf configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Component.
 @param [cfg.isDefault] {Boolean} Set true when this is one of xeogl's default components.
 */
(function () {

    "use strict";

    xeogl.Component = Class.extend({

        __init: function () {


            var cfg = {};

            var arg1 = arguments[0];
            var arg2 = arguments[1];


            /**
             The parent {{#crossLink "Scene"}}{{/crossLink}} that contains this Component.

             @property scene
             @type {Scene}
             @final
             */
            this.scene = null;

            if (this.type === "xeogl.Scene") {

                this.scene = this;

                if (arg1) {
                    cfg = arg1;
                }

            } else {

                if (arg1) {

                    if (arg1.type === "xeogl.Scene") {

                        this.scene = arg1;

                        if (arg2) {
                            cfg = arg2;
                        }

                    } else {

                        // Create this component within the default xeogl Scene

                        this.scene = xeogl.scene;

                        cfg = arg1;
                    }
                } else {

                    // Create this component within the default xeogl Scene

                    this.scene = xeogl.scene;
                }

                this._renderer = this.scene._renderer;
            }

            /**
             Arbitrary, user-defined metadata on this component.

             @property metadata
             @type Object
             */
            this.meta = cfg.meta || {};

            /**
             Indicates whether this is one of the {{#crossLink "Scene"}}Scene{{/crossLink}}'s built-in Components.

             @property isDefault
             @type Boolean
             */
            this.isDefault = cfg.isDefault;

            /**
             Unique ID for this Component within its parent {{#crossLink "Scene"}}Scene{{/crossLink}}.

             @property id
             @type String
             @final
             */
            this.id = cfg.id;

            /**
             True as soon as this Component has been destroyed

             @property destroyed
             @type Boolean
             */
            this.destroyed = false;

            /// Attached components with names.
            this._attached = {}; // Protected

            // Attached components keyed to IDs
            this._attachments = null; // Lazy-instantiated map

            // Event support - lazy creating these properties because
            // they are expensive to have around if not using them
            this._events = null;
            this._handleMap = null; // Subscription handle pool
            this._handleEvents = null; // Subscription handles mapped to event names
            this._eventSubs = null; // Event names mapped to subscribers
            this._events = null; // Maps names to events
            this._eventCallDepth = 0; // Helps us catch stack overflows from recursive events

            // Components created with #create
            this._sharedComponents = null; // Lazy-instantiated map

            if (this.scene && this.type !== "xeogl.Scene") { // HACK: Don't add scene to itself

                // Register this component on its scene
                // Assigns this component an automatic ID if not yet assigned

                this.scene._addComponent(this);
            }

            // True when #_update will be called on next tick
            this._updateScheduled = false;

            // Initialize this component
            if (this._init) {
                this._init(cfg);
            }
        },

        /**
         JavaScript class name for this Component.

         This is used when <a href="Scene.html#savingAndLoading">loading Scenes from JSON</a>, and is included in the JSON
         representation of this Component, so that this class may be instantiated when loading it from the JSON representation.

         For example: "xeogl.AmbientLight", "xeogl.ColorTarget", "xeogl.Lights" etc.

         @property type
         @type String
         @final
         */
        type: "xeogl.Component",

        /**
         An array of strings that indicates the chain of super-types within this component's inheritance hierarchy.

         For example, if this component is a {{#crossLink "Rotate"}}{{/crossLink}}, which
         extends {{#crossLink "Transform"}}{{/crossLink}}, which in turn extends {{#crossLink "Component"}}{{/crossLink}},
         then this property will have the value:

         ````json
         ["xeogl.Component", "xeogl.Transform"]
         ````

         Note that the chain is ordered downwards in the hierarchy, ie. from super-class down towards sub-class.

         @property superTypes
         @type {Array of String}
         @final
         */
        superTypes: [],

        /**
         Tests if this component is of the given type, or is a subclass of the given type.

         The type may be given as either a string or a component constructor.

         This method works by walking up the inheritance type chain, which this component provides in
         property {{#crossLink "Component/superTypes:property"}}{{/crossLink}}, returning true as soon as one of the type strings in
         the chain matches the given type, of false if none match.

         #### Examples:

         ````javascript
         var myRotate = new xeogl.Rotate({ ... });

         myRotate.isType(xeogl.Component); // Returns true for all xeogl components
         myRotate.isType("xeogl.Component"); // Returns true for all xeogl components
         myRotate.isType(xeogl.Rotate); // Returns true
         myRotate.isType(xeogl.Transform); // Returns true
         myRotate.isType("xeogl.Transform"); // Returns true
         myRotate.isType(xeogl.Entity); // Returns false, because xeogl.Rotate does not (even indirectly) extend xeogl.Entity
         ````

         @method isType
         @param  {String|Function} type Component type to compare with, eg "xeogl.PhongMaterial", or a xeogl component constructor.
         @returns {Boolean} True if this component is of given type or is subclass of the given type.
         */
        isType: function (type) {

            if (!xeogl._isString(type)) {

                // Handle constructor arg

                type = type.type;
                if (!type) {
                    return false;
                }
            }

            return xeogl._isComponentType(this.type, type);
        },

        /**
         * Initializes this component
         * @param cfg
         * @private
         */
        _init: function (cfg) {
        },

        /**
         * Fires an event on this component.
         *
         * Notifies existing subscribers to the event, optionally retains the event to give to
         * any subsequent notifications on the event as they are made.
         *
         * @method fire
         * @param {String} event The event type name
         * @param {Object} value The event parameters
         * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers
         */
        fire: function (event, value, forget) {

            if (!this._events) {
                this._events = {};
            }

            if (!this._eventSubs) {
                this._eventSubs = {};
            }

            if (forget !== true) {
                this._events[event] = value; // Save notification
            }

            var subs = this._eventSubs[event];
            var sub;

            if (subs) { // Notify subscriptions

                for (var handle in subs) {
                    if (subs.hasOwnProperty(handle)) {

                        sub = subs[handle];

                        this._eventCallDepth++;

                        if (this._eventCallDepth < 300) {
                            sub.callback.call(sub.scope, value);
                        } else {
                            this.error("fire: potential stack overflow from recursive event '" + event + "' - dropping this event");
                        }

                        this._eventCallDepth--;
                    }
                }
            }
        },

        /**
         * Subscribes to an event on this component.
         *
         * The callback is be called with this component as scope.
         *
         * @method on
         * @param {String} event The event
         * @param {Function} callback Called fired on the event
         * @param {Object} [scope=this] Scope for the callback
         * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.
         */
        on: function (event, callback, scope) {

            if (!this._events) {
                this._events = {};
            }
            if (!this._handleMap) {
                this._handleMap = new xeogl.utils.Map(); // Subscription handle pool
            }
            if (!this._handleEvents) {
                this._handleEvents = {};
            }
            if (!this._eventSubs) {
                this._eventSubs = {};
            }
            var subs = this._eventSubs[event];
            if (!subs) {
                subs = {};
                this._eventSubs[event] = subs;
            }
            var handle = this._handleMap.addItem(); // Create unique handle
            subs[handle] = {
                callback: callback,
                scope: scope || this
            };
            this._handleEvents[handle] = event;
            var value = this._events[event];
            if (value !== undefined) { // A publication exists, notify callback immediately
                callback.call(scope || this, value);
            }
            return handle;
        },

        /**
         * Cancels an event subscription that was previously made with {{#crossLink "Component/on:method"}}{{/crossLink}} or
         * {{#crossLink "Component/once:method"}}{{/crossLink}}.
         *
         * @method off
         * @param {String} handle Publication handle
         */
        off: function (handle) {
            if (handle === undefined || handle === null) {
                return;
            }
            if (!this._handleEvents) {
                return;
            }
            var event = this._handleEvents[handle];
            if (event) {
                delete this._handleEvents[handle];
                var locSubs = this._eventSubs[event];
                if (locSubs) {
                    delete locSubs[handle];
                }
                this._handleMap.removeItem(handle); // Release handle
            }
        },

        /**
         * Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is handled.
         *
         * This is equivalent to calling {{#crossLink "Component/on:method"}}{{/crossLink}}, and then calling
         * {{#crossLink "Component/off:method"}}{{/crossLink}} inside the callback function.
         *
         * @method once
         * @param {String} event Data event to listen to
         * @param {Function(data)} callback Called when fresh data is available at the event
         * @param {Object} [scope=this] Scope for the callback
         */
        once: function (event, callback, scope) {
            var self = this;
            var handle = this.on(event,
                function (value) {
                    self.off(handle);
                    callback(value);
                },
                scope);
        },

        /**
         * Logs a console debugging message for this component.
         *
         * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*
         *
         * Also fires the message as a {{#crossLink "Scene/log:event"}}{{/crossLink}} event on the
         * parent {{#crossLink "Scene"}}Scene{{/crossLink}}.
         *
         * @method log
         * @param {String} message The message to log
         */
        log: function (message) {

            message = "[LOG]" + this._message(message);

            window.console.log(message);

            this.scene.fire("log", message);
        },

        _message: function (message) {
            // return " [" + (this.type.indexOf("xeogl.") > -1 ? this.type.substring(4) : this.type) + " " + xeogl._inQuotes(this.id) + "]: " + message;
            return " [" + this.type + " " + xeogl._inQuotes(this.id) + "]: " + message;
        },

        /**
         * Logs a warning for this component to the JavaScript console.
         *
         * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*
         *
         * Also fires the message as a {{#crossLink "Scene/warn:event"}}{{/crossLink}} event on the
         * parent {{#crossLink "Scene"}}Scene{{/crossLink}}.
         *
         * @method warn
         * @param {String} message The message to log
         */
        warn: function (message) {

            message = "[WARN]" + this._message(message);

            window.console.warn(message);

            this.scene.fire("warn", message);
        },

        /**
         * Logs an error for this component to the JavaScript console.
         *
         * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*
         *
         * Also fires the message as an {{#crossLink "Scene/error:event"}}{{/crossLink}} event on the
         * parent {{#crossLink "Scene"}}Scene{{/crossLink}}.
         *
         * @method error
         * @param {String} message The message to log
         */
        error: function (message) {

            message = "[ERROR]" + this._message(message);

            window.console.error(message);

            this.scene.fire("error", message);
        },

        /**
         * Creates a clone of this component.
         *
         * The clone will have the same properties as the original, except where
         * overridden in the given optional configs.
         *
         * The clone will share (by reference) the components of the original, unless overridden.
         *
         * For example, if this component is an {{#crossLink "Entity"}}{{/crossLink}}, then the clone
         * will be attached to the **same** instances of {{#crossLink "PhoneMaterial"}}{{/crossLink}},
         * {{#crossLink "Camera"}}{{/crossLink}} etc as this component, unless it supplies its own
         * instances for those via the configs.
         *
         * @param {*} [cfg] Configurations to override.
         * @returns {Component} The shallow clone
         */
        clone: function (cfg) {

            if (this.destroyed) {
                this.error("Clone failed - component has been destroyed");
                return;
            }

            cfg = cfg || {};

            var json = this.json;

            delete json.id;

            return new this.constructor(this.scene, xeogl._apply(cfg, json));
        },

        /**
         * Adds a child component to this.
         * When component not given, attaches the scene's default instance for the given name (if any).
         * Publishes the new child component on this component, keyed to the given name.
         *
         * @param {*} params
         * @param {String} params.name component name
         * @param {Component} [params.component] The component
         * @param {String} [params.type] Optional expected type of base type of the child; when supplied, will
         * cause an exception if the given child is not the same type or a subtype of this.
         * @param {Boolean} [params.sceneDefault=false]
         * @param {Boolean} [params.sceneSingleton=false]
         * @param {Function} [params.onAttached] Optional callback called when component attached
         * @param {Function} [params.onAttached.callback] Callback function
         * @param {Function} [params.onAttached.scope] Optional scope for callback
         * @param {Function} [params.onDetached] Optional callback called when component is detached
         * @param {Function} [params.onDetached.callback] Callback function
         * @param {Function} [params.onDetached.scope] Optional scope for callback
         * @param {{String:Function}} [params.on] Callbacks to subscribe to properties on component
         * @param {Boolean} [params.recompiles=true] When true, fires "dirty" events on this component
         * @private
         */
        _attach: function (params) {

            var name = params.name;

            if (!name) {
                this.error("Component 'name' expected");
                return;
            }

            var component = params.component;
            var sceneDefault = params.sceneDefault;
            var sceneSingleton = params.sceneSingleton;
            var type = params.type;
            var on = params.on;
            var recompiles = params.recompiles !== false;

            // True when child given as config object, where parent manages its instantiation and destruction
            var managingLifecycle = false;

            if (component) {

                if (xeogl._isNumeric(component) || xeogl._isString(component)) {

                    // Component ID given
                    // Both numeric and string IDs are supported

                    var id = component;

                    component = this.scene.components[id];

                    if (!component) {

                        // Quote string IDs in errors

                        this.error("Component not found: " + xeogl._inQuotes(id));
                        return;
                    }

                } else if (xeogl._isObject(component)) {

                    // Component config given

                    var componentCfg = component;
                    var componentType = componentCfg.type || type || "xeogl.Component";
                    var componentClass = window[componentType];

                    if (!componentClass) {
                        this.error("Component type not found: " + componentType);
                        return;
                    }

                    if (type) {
                        if (!xeogl._isComponentType(componentType, type)) {
                            this.error("Expected a " + type + " type or subtype, not a " + componentType);
                            return;
                        }
                    }

                    component = new componentClass(componentCfg);

                    managingLifecycle = true;
                }
            }


            if (!component) {

                if (sceneSingleton === true) {

                    // Using the first instance of the component type we find

                    var instances = this.scene.types[type];
                    for (var id2 in instances) {
                        if (instances.hasOwnProperty) {
                            component = instances[id2];
                            break;
                        }
                    }

                    if (!component) {
                        this.error("Scene has no default component for '" + name + "'");
                        return null;
                    }

                } else if (sceneDefault === true) {

                    // Using a default scene component

                    component = this.scene[name];

                    if (!component) {
                        this.error("Scene has no default component for '" + name + "'");
                        return null;
                    }
                }
            }

            if (component) {

                if (component.scene.id !== this.scene.id) {
                    this.error("Not in same scene: " + component.type + " " + xeogl._inQuotes(component.id));
                    return;
                }

                if (type) {

                    if (!component.isType(type)) {
                        this.error("Expected a " + type + " type or subtype: " + component.type + " " + xeogl._inQuotes(component.id));
                        return;
                    }
                }
            }

            if (!this._attachments) {
                this._attachments = {};
            }

            var oldComponent = this._attached[name];
            var subs;
            var i;
            var len;

            if (oldComponent) {

                if (component && oldComponent.id === component.id) {

                    // Reject attempt to reattach same component
                    return;
                }

                var oldAttachment = this._attachments[oldComponent.id];

                // Unsubscribe from events on old component

                subs = oldAttachment.subs;

                for (i = 0, len = subs.length; i < len; i++) {
                    oldComponent.off(subs[i]);
                }

                delete this._attached[name];
                delete this._attachments[oldComponent.id];

                var onDetached = oldAttachment.params.onDetached;
                if (onDetached) {
                    if (xeogl._isFunction(onDetached)) {
                        onDetached(oldComponent);
                    } else {
                        onDetached.scope ? onDetached.callback.call(onDetached.scope, oldComponent) : onDetached.callback(oldComponent);
                    }
                }

                if (oldAttachment.managingLifecycle) {

                    // Note that we just unsubscribed from all events fired by the child
                    // component, so destroying it won't fire events back at us now.

                    oldComponent.destroy();
                }
            }

            if (component) {

                // Set and publish the new component on this component

                var attachment = {
                    params: params,
                    component: component,
                    subs: [],
                    managingLifecycle: managingLifecycle
                };

                attachment.subs.push(
                    component.on("destroyed",
                        function () {
                            attachment.params.component = null;
                            this._attach(attachment.params);
                        },
                        this));

                if (recompiles) {
                    attachment.subs.push(
                        component.on("dirty",
                            function () {
                                this.fire("dirty", this);
                            },
                            this));
                }

                this._attached[name] = component;
                this._attachments[component.id] = attachment;

                // Bind destruct listener to new component to remove it
                // from this component when destroyed

                var onAttached = params.onAttached;
                if (onAttached) {
                    if (xeogl._isFunction(onAttached)) {
                        onAttached(component);
                    } else {
                        onAttached.scope ? onAttached.callback.call(onAttached.scope, component) : onAttached.callback(component);
                    }
                }

                if (on) {

                    var event;
                    var handler;
                    var callback;
                    var scope;

                    for (event in on) {
                        if (on.hasOwnProperty(event)) {

                            handler = on[event];

                            if (xeogl._isFunction(handler)) {
                                callback = handler;
                                scope = null;
                            } else {
                                callback = handler.callback;
                                scope = handler.scope;
                            }

                            if (!callback) {
                                continue;
                            }

                            attachment.subs.push(component.on(event, callback, scope));
                        }
                    }
                }
            }

            if (recompiles) {
                this.fire("dirty", this); // FIXME: May trigger spurous entity recompilations unless able to limit with param?
            }

            this.fire(name, component); // Component can be null

            return component;
        },

        /**
         * Convenience method for creating a Component within this Component's {{#crossLink "Scene"}}{{/crossLink}}.
         *
         * You would typically use this method to conveniently instantiate components that you'd want to
         * share (ie. "instance") among your {{#crossLink "Entity"}}Entities{{/crossLink}}.
         *
         * The method is given a component type, configuration and optional instance ID, like so:
         *
         * ````javascript
         * var material = myComponent.create(xeogl.PhongMaterial, {
         *      diffuse: [1,0,0],
         *      specular: [1,1,0]
         * }, "myMaterial");
         * ````
         *
         * The first time you call this method for the given ````type```` and ````instanceId````, this method will create the
         * {{#crossLink "PhongMaterial"}}{{/crossLink}}, passing the given  attributes to the component's constructor.
         *
         * If you call this method again, specifying the same ````type```` and ````instanceId````, the method will return the same
         * component instance that it returned the first time, and will ignore the configuration:
         *
         * ````javascript
         * var material2 = component.create(xeogl.PhongMaterial, { specular: [1,1,0] }, "myMaterial");
         * ````
         *
         * So in this example, our {{#crossLink "PhongMaterial"}}{{/crossLink}} will continue to have the red specular
         * and diffuse color that we specified the first time.
         *
         * Each time you call this method with the same ````type```` and ````instanceId````, the Scene will internally increment a
         * reference count for the component instance. You can release the shared component instance with a call to
         * {{#crossLink "Scene/putSharedComponent:method"}}{{/crossLink}}, and once you have released it as many
         * times as you got it, the Scene will destroy the component.
         *
         * @method create
         * @param {*} [cfg] Configuration for the component instance - only used if this is the first time you are getting
         * the component, ignored when reusing an existing instance.
         * @param {String|Number} [instanceId] Identifies the shared component instance. Note that this is not used as the ID of the
         * component - you can specify the component ID in the ````cfg```` parameter.
         * @returns {*}
         */
        create: function (cfg, instanceId) {

            // Create or reuse the component via this component's scene;
            // reusing if instanceId given, else getting unique instance otherwise

            var component = this.scene._getSharedComponent(cfg, instanceId);

            if (component) {

                // Register component on this component so that we can
                // automatically destroy it when we destroy this component

                if (!this._sharedComponents) {
                    this._sharedComponents = {};
                }

                if (!this._sharedComponents[component.id]) {
                    this._sharedComponents[component.id] = component;
                }

                component.on("destroyed", function () {

                    // If the component is explicitly destroyed, ie. by calling
                    // its #destroy method, then deregister it so we don't try
                    // to destroy it a second time when we destroy this component

                    delete this._sharedComponents[component.id];
                }, this);
            }

            return component;
        },

        /**
         * Protected method, called by sub-classes to queue a call to _update().
         * @protected
         * @param {Number} [priority=1]
         */
        _scheduleUpdate: function (priority) {
            if (!this._updateScheduled) {
                this._updateScheduled = true;
                if (priority === 0) {
                    xeogl.deferTask(this._doUpdate, this);
                } else {
                    xeogl.scheduleTask(this._doUpdate, this);
                }
            }
        },

        /**
         * @private
         */
        _doUpdate: function () {
            if (this._updateScheduled) {
                if (this._update) {
                    this._update();
                }
                this._updateScheduled = false;
            }
        },

        /**
         * Protected virtual template method, optionally implemented
         * by sub-classes to perform a scheduled task.
         *
         * @protected
         */
        _update: null,

        /**
         * Protected template method, implemented by sub-classes to compile
         * their state into their Scene's xeogl.renderer.Renderer.
         *
         * @protected
         */
        _compile: function () {
        },

        _props: {

            /**
             * JSON object containing the state of this Component.
             *
             * @property json
             * @type JSON
             * @final
             */
            json: {

                get: function () {

                    // Return component's type-specific properties,
                    // augmented with the base component properties

                    var json = {
                        type: this.type,
                        id: this.id // Only output user-defined IDs
                    };

                    if (!xeogl._isEmptyObject(this.meta)) {
                        json.meta = this.meta;
                    }

                    return this._getJSON ? xeogl._apply(this._getJSON(), json) : json;
                }
            }
            ,

            /**
             * String containing the serialized JSON state of this Component.
             *
             * @property string
             * @type String
             * @final
             */
            string: {

                get: function () {
                    return JSON.stringify(this.json, "\n", 4);
                }
            }
            ,

            /**
             * Experimental: string containing a JavaScript expression that would instantiate this Component.
             *
             * @property string
             * @type String
             * @final
             */
            js: {

                get: function () {
                    var json = this.json;
                    delete json.id;
                    var str = JSON.stringify(json, "\n", 4);
                    return "new " + this.type + "(" + str + ");";
                }
            }
        },

        /**
         * Destroys this component.
         *
         * Fires a {{#crossLink "Component/destroyed:event"}}{{/crossLink}} event on this Component.
         *
         * Automatically disassociates this component from other components, causing them to fall back on any
         * defaults that this component overrode on them.
         *
         * TODO: describe effect with respect to #create
         *
         * @method destroy
         */
        destroy: function () {

            // Unsubscribe from child components

            var id;
            var attachment;
            var component;
            var subs;
            var i;
            var len;

            if (this._attachments) {
                for (id in this._attachments) {
                    if (this._attachments.hasOwnProperty(id)) {

                        attachment = this._attachments[id];
                        component = attachment.component;

                        // Unsubscribe from properties on the child

                        subs = attachment.subs;

                        for (i = 0, len = subs.length; i < len; i++) {
                            component.off(subs[i]);
                        }

                        if (attachment.managingLifecycle) {

                            // Note that we just unsubscribed from all events fired by the child
                            // component, so destroying it won't fire events back at us now.

                            component.destroy();
                        }
                    }
                }
            }

            // Release components created with #create

            if (this._sharedComponents) {
                for (id in this._sharedComponents) {
                    if (this._sharedComponents.hasOwnProperty(id)) {

                        component = this._sharedComponents[id];

                        delete this._sharedComponents[id];

                        this.scene._putSharedComponent(component);
                    }
                }
            }

            // Execute subclass behaviour

            if (this._destroy) {
                this._destroy();
            }

            /**
             * Fired when this Component is destroyed.
             * @event destroyed
             */

            this.fire("destroyed", this.destroyed = true);
        },

        /**
         * Protected template method, implemented by sub-classes
         * to clean up just before the component is destroyed.
         *
         * @protected
         */
        _destroy: function () {
        }
    });
})();
;/**
 A **Scene** models a 3D scene as a fully-editable and serializable <a href="https://gameprogrammingpatterns.com/component.html" target="_other">component-entity</a> graph.

 ## Scene Structure

 A Scene contains a soup of instances of various {{#crossLink "Component"}}Component{{/crossLink}} subtypes, such as
 {{#crossLink "Entity"}}Entity{{/crossLink}}, {{#crossLink "Camera"}}Camera{{/crossLink}}, {{#crossLink "Material"}}Material{{/crossLink}},
 {{#crossLink "Lights"}}Lights{{/crossLink}} etc.  Each {{#crossLink "Entity"}}Entity{{/crossLink}} has a link to one of each of the other types,
 and the same component instances can be shared among many {{#crossLink "Entity"}}Entities{{/crossLink}}.

 *** Under the hood:*** Within xeogl, each {{#crossLink "Entity"}}Entity{{/crossLink}} represents a draw call,
 while its components define all the WebGL state that will be bound for that call. To render a Scene, xeogl traverses
 the graph to bind the states and make the draw calls, while using many optimizations for efficiency (eg. draw list caching and GL state sorting).

 <img src="../../../assets/images/Scene.png"></img>

 #### Default Components

 A Scene provides its own default *flyweight* instance of each component type
 (except for {{#crossLink "Entity"}}Entity{{/crossLink}}). Each {{#crossLink "Entity"}}Entity{{/crossLink}} you create
 will implicitly link to a default instance for each type of component that you don't explicitly link it to. For example, when you create an {{#crossLink "Entity"}}Entity{{/crossLink}} without
 a {{#crossLink "Lights"}}Lights{{/crossLink}}, the {{#crossLink "Entity"}}Entity{{/crossLink}} will link to the
 {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/lights:property"}}{{/crossLink}}. This mechanism
 provides ***training wheels*** to help you learn the API, and also helps keep examples simple, where many of the examples in this
 documentation are implicitly using those defaults when they are not central to discussion.

 At the bottom of the diagram above, the blue {{#crossLink "Material"}}Material{{/crossLink}},
 {{#crossLink "Geometry"}}Geometry{{/crossLink}} and {{#crossLink "Camera"}}Camera{{/crossLink}} components
 represent some of the defaults provided by our Scene. For brevity, the diagram only shows those three
 types of component (there are actually around two dozen).

 Note that we did not link the second {{#crossLink "Entity"}}Entity{{/crossLink}} to a
 {{#crossLink "Material"}}Material{{/crossLink}}, causing it to be implicitly linked to our Scene's
 default {{#crossLink "Material"}}Material{{/crossLink}}. That {{#crossLink "Material"}}Material{{/crossLink}}
 is the only default our {{#crossLink "Entity"}}Entities{{/crossLink}} are falling back on in this example, with other
 default component types, such as the {{#crossLink "Geometry"}}Geometry{{/crossLink}} and the {{#crossLink "Camera"}}Camera{{/crossLink}},
 hanging around dormant until an {{#crossLink "Entity"}}Entity{{/crossLink}} is linked to them.

 Note also how the same {{#crossLink "Camera"}}Camera{{/crossLink}} is linked to both of our
 {{#crossLink "Entity"}}Entities{{/crossLink}}. Whenever we update that
 {{#crossLink "Camera"}}Camera{{/crossLink}}, it's going to affect both of those
 {{#crossLink "Entity"}}Entities{{/crossLink}} in one shot. Think of the defaults as the Scene's ***global*** component
 instances, which you may optionally override on a per-{{#crossLink "Entity"}}Entity{{/crossLink}} basis with your own
 component instances. In many Scenes, for example, you might not even bother to create your own {{#crossLink "Camera"}}Camera{{/crossLink}} and just
 let all your {{#crossLink "Entity"}}Entities{{/crossLink}} fall back on the default one.

 ## Usage

 Here's the JavaScript for the diagram above. As mentioned earlier, note that we only provide components for our {{#crossLink "Entity"}}Entities{{/crossLink}} when we need to
 override the default components that the Scene would have provided them, and that the same component instances may be shared among multiple Entities.

 ```` javascript
 var scene = new xeogl.Scene({
       id: "myScene"   // ID is optional on all components
  });

 var material = new xeogl.PhongMaterial(myScene, {
       id: "myMaterial",         // We'll use this ID to show how to find components by ID
       diffuse: [ 0.6, 0.6, 0.7 ],
       specular: [ 1.0, 1.0, 1.0 ]
   });

 var geometry = new xeogl.Geometry(myScene, {
       primitive: "triangles",
       positions: [...],
       normals: [...],
       uvs: [...],
       indices: [...]
  });

 var camera = new xeogl.Camera(myScene);

 var entity1 = new xeogl.Entity(myScene, {
       material: myMaterial,
       geometry: myGeometry,
       camera: myCamera
  });

 // Second entity uses Scene's default Material
 var entity3 = new xeogl.Entity(myScene, {
       geometry: myGeometry,
       camera: myCamera
  });
 ````

 ## <a name="sceneCanvas">The Scene Canvas</a>

 See the {{#crossLink "Canvas"}}{{/crossLink}} component.

 ## <a name="findingByID">Finding Scenes and Components by ID</a>

 We can have as many Scenes as we want, and can find them by ID on the {{#crossLink "xeogl"}}xeogl{{/crossLink}} entity's {{#crossLink "xeogl/scenes:property"}}scenes{{/crossLink}} map:

 ````javascript
 var theScene = xeogl.scenes["myScene"];
 ````

 Likewise we can find a Scene's components within the Scene itself, such as the {{#crossLink "Material"}}Material{{/crossLink}} we
 created earlier:

 ````javascript
 var theMaterial = myScene.components["myMaterial"];
 ````

 ## <a name="defaults">The Default Scene</a>

 When you create components without specifying a Scene for them, xeogl will put them in its default Scene.

 For example:

 ```` javascript

 var material2 = new xeogl.PhongMaterial({
    diffuse: { r: 0.6, g: 0.6, b: 0.7 },
    specular: { 1.0, 1.0, 1.0 }
 });

 var geometry2 = new xeogl.Geometry({
     primitive: "triangles",
     positions: [...],
     normals: [...],
     uvs: [...],
     indices: [...]
 });

 var camera = new xeogl.Camera();

 var entity1 = new xeogl.Entity({
     material: material2,
     geometry: geometry2,
     camera: camera2
 });
 ````

 You can then obtain the default Scene from the {{#crossLink "xeogl"}}xeogl{{/crossLink}} entity's
 {{#crossLink "xeogl/scene:property"}}scene{{/crossLink}} property:

 ````javascript
 var theScene = xeogl.scene;
 ````

 or from one of the components we just created:
 ````javascript
 var theScene = material2.scene;
 ````

 ***Note:*** xeogl creates the default Scene as soon as you either
 create your first Sceneless {{#crossLink "Entity"}}Entity{{/crossLink}} or reference the
 {{#crossLink "xeogl"}}xeogl{{/crossLink}} entity's {{#crossLink "xeogl/scene:property"}}scene{{/crossLink}} property. Expect to
 see the HTML canvas for the default Scene magically appear in the page when you do that.

 ## <a name="webgl2">WebGL 2</a>

 By default, our Scene will attempt to use WebGL 2. If that's not supported then it will fall back on WebGL 1, if available.
 You can force the Scene to use WebGL 1 by supplying this property to teh Scene's constructor:

 ````javascript
 var scene = new xeogl.Scene({
     webgl2: false // Default is true
 });

 // We can then check this property on the Canvas to see if WebGL 2 is supported:
 var gotWebGL2 = scene.canvas.webgl2; // True if we have WebGL 2
 ````

 ## <a name="savingAndLoading">Saving and Loading Scenes</a>

 The entire runtime state of a Scene can be serialized and deserialized to and from JSON. This means you can create a
 Scene, then save it and restore it again to exactly how it was when you saved it.

 ````javascript
 // Serialize the scene to JSON
 var json = myScene.json;

 // Create another scene from that JSON, in a fresh canvas:
 var myOtherScene = new xeogl.Scene({
      json: json
 });

 ***Note:*** this will save your {{#crossLink "Geometry"}}Geometry{{/crossLink}}s' array properties
 ({{#crossLink "Geometry/positions:property"}}positions{{/crossLink}}, {{#crossLink "Geometry/normals:property"}}normals{{/crossLink}},
 {{#crossLink "Geometry/indices:property"}}indices{{/crossLink}} etc) as JSON arrays, which may stress your browser
 if those arrays are huge.

 @class Scene
 @module xeogl
 @constructor
 @param [cfg] Scene parameters
 @param [cfg.id] {String} Optional ID, unique among all Scenes in xeogl, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Scene.
 @param [cfg.canvasId] {String} ID of existing HTML5 canvas in the DOM - creates a full-page canvas automatically if this is omitted
 @param [cfg.webgl2=true] {Boolean} Set this false when we **don't** want to use WebGL 2 for our Scene; the Scene will fall
 back on WebGL 1 if not available. This property will be deprecated when WebGL 2 is supported everywhere.
 @param [cfg.components] {Array(Object)} JSON array containing parameters for {{#crossLink "Component"}}Component{{/crossLink}} subtypes to immediately create within the Scene.
 @param [cfg.ticksPerRender=1] {Number} The number of {{#crossLink "Scene/tick:property"}}{{/crossLink}} that happen between each render or this Scene.
 @param [cfg.passes=1] {Number} The number of times this Scene renders per frame.
 @param [cfg.clearEachPass=false] {Boolean} When doing multiple passes per frame, specifies whether to clear the
 canvas before each pass (true) or just before the first pass (false).
 @param [cfg.transparent=false] {Boolean} Whether or not the canvas is transparent.
 @param [cfg.backgroundColor] {Float32Array} RGBA color for canvas background, when canvas is not transparent. Overridden by backgroundImage.
 @param [cfg.backgroundImage] {String} URL of an image to show as the canvas background, when canvas is not transparent. Overrides backgroundImage.
 @extends Component
 */
(function () {

    "use strict";

    /**
     * Fired whenever a debug message logged on a component within this Scene.
     * @event log
     * @param {String} value The debug message
     */

    /**
     * Fired whenever an error is logged on a component within this Scene.
     * @event error
     * @param {String} value The error message
     */

    /**
     * Fired whenever a warning is logged on a component within this Scene.
     * @event warn
     * @param {String} value The warning message
     */
    xeogl.Scene = xeogl.Component.extend({

        type: "xeogl.Scene",

        _init: function (cfg) {

            var self = this;

            var transparent = !!cfg.transparent;

            this._componentIDMap = new xeogl.utils.Map();

            /**
             * The epoch time (in milliseconds since 1970) when this Scene was instantiated.
             *
             * @property timeCreated
             * @type {Number}
             */
            this.startTime = (new Date()).getTime();

            /**
             * The {{#crossLink "Component"}}Component{{/crossLink}}s within
             * this Scene, mapped to their IDs.
             *
             * Will also contain the {{#crossLink "Entity"}}{{/crossLink}}s
             * contained in {{#crossLink "Entity/components:property"}}{{/crossLink}}.
             *
             * @property components
             * @type {String:xeogl.Component}
             */
            this.components = {};

            /**
             * For each {{#crossLink "Component"}}Component{{/crossLink}} type, a map of
             * IDs to instances.
             *
             * @property types
             * @type {String:{String:xeogl.Component}}
             */
            this.types = {};

            /**
             * The {{#crossLink "Entity"}}{{/crossLink}}s within
             * this Scene, mapped to their IDs.
             *
             * The {{#crossLink "Entity"}}{{/crossLink}}s in this map
             * will also be contained in {{#crossLink "Entity/components:property"}}{{/crossLink}}.
             *
             * @property entities
             * @type {String:xeogl.Entity}
             */
            this.entities = {};

            // Map of components created with #getSharedComponent, mapped to their "share IDs"
            this._sharedComponents = {};

            // Map of components created with #getSharedComponent, mapped to thei component IDs
            this._sharedComponentIDs = {};

            // Count of references to components created with #getSharedComponent
            this._sharedCounts = {};

            // Contains xeogl.Entities that need to be recompiled back into this._renderer
            this._dirtyEntities = {};

            /**
             * Configurations for this Scene. Set whatever properties on here
             * that will be useful to the components within the Scene.
             * @final
             * @property configs
             * @type {Configs}
             */
            this.configs = new xeogl.Configs(this, cfg.configs);

            /**
             * Manages the HTML5 canvas for this Scene.
             * @final
             * @property canvas
             * @type {Canvas}
             */
            this.canvas = new xeogl.Canvas(this, {
                canvas: cfg.canvas, // Can be canvas ID, canvas element, or null
                transparent: transparent,
                backgroundColor: cfg.backgroundColor,
                backgroundImage: cfg.backgroundImage,
                webgl2: cfg.webgl2 !== false,
                contextAttr: cfg.contextAttr || {}
            });

            // Redraw as canvas resized
            this.canvas.on("boundary",
                function () {
                    self._renderer.imageDirty = true;
                });

            this.canvas.on("webglContextFailed",
                function () {
                    alert("xeogl failed to find WebGL!");
                });

            this._renderer = new xeogl.renderer.Renderer(xeogl.stats, this.canvas.canvas, this.canvas.gl, {
                transparent: transparent
            });

            /**
             * Publishes input events that occur on this Scene's canvas.
             * @final
             * @property input
             * @type {Input}
             * @final
             */
            this.input = new xeogl.Input(this, {
                element: this.canvas.overlay
            });

            // Register Scene on engine
            // Do this BEFORE we add components below
            xeogl._addScene(this);

            // Add components specified as JSON
            // This will also add the default components for this Scene,
            // if this JSON was serialized from a xeogl.Scene instance.

            var componentJSONs = cfg.components;

            if (componentJSONs) {

                var componentJSON;
                var type;
                var constr;

                for (var i = 0, len = componentJSONs.length; i < len; i++) {

                    componentJSON = componentJSONs[i];
                    type = componentJSON.type;

                    if (type) {

                        constr = window[type];

                        if (constr) {
                            new constr(this, componentJSON);
                        }
                    }
                }
            }

            // Create the default components if not already created.
            // These may have already been created in the JSON above.

            this._initDefaults();

            this.ticksPerRender = cfg.ticksPerRender;
            this.passes = cfg.passes;
            this.clearEachPass = cfg.clearEachPass;
        },

        _initDefaults: function () {

            // Call this Scene's property accessors to lazy-init their properties

            var dummy; // Keeps Codacy happy

            dummy = this.view;
            dummy = this.project;
            dummy = this.camera;
            dummy = this.clips;
            dummy = this.colorTarget;
            dummy = this.colorBuf;
            dummy = this.depthTarget;
            dummy = this.depthBuf;
            dummy = this.visibility;
            dummy = this.cull;
            dummy = this.modes;
            dummy = this.geometry;
            dummy = this.layer;
            dummy = this.lights;
            dummy = this.material;
            dummy = this.morphTargets;
            dummy = this.reflect;
            dummy = this.shader;
            dummy = this.shaderParams;
            dummy = this.stage;
            dummy = this.transform;
            dummy = this.viewport;
        },

        // Called by each component that is created with this Scene as parent.
        // Registers the component within this scene.
        _addComponent: function (c) {

            if (c.id) {

                // User-supplied ID

                if (this.components[c.id]) {
                    this.error("Component " + xeogl._inQuotes(c.id) + " already exists in Scene");
                    return;
                }
            } else {

                // Auto-generated ID

                c.id = this._componentIDMap.addItem(c);
            }

            this.components[c.id] = c;

            // Register for class type

            //var type = c.type.indexOf("xeogl.") > -1 ? c.type.substring(4) : c.type;
            var type = c.type;

            var types = this.types[c.type];

            if (!types) {
                types = this.types[type] = {};
            }

            types[c.id] = c;


            c.on("destroyed", function () {
                this._componentDestroyed(c);
            }, this);

            if (c.isType("xeogl.Entity")) {

                // Component is a xeogl.Entity, or a subtype thereof

                c.on("dirty", this._entityDirty, this);

                this.entities[c.id] = c;

                if (this._worldBoundary) {

                    // If we currently have a World-space Scene boundary, then invalidate
                    // it whenever Entity's World-space boundary updates

                    c.worldBoundary.on("updated", this._setWorldBoundaryDirty, this);
                }

                // Update scene statistics

                xeogl.stats.components.entities++;
            }

            /**
             * Fired whenever a component has been created within this Scene.
             * @event componentCreated
             * @param {Component} value The component that was created
             */
            this.fire("componentCreated", c, true);

            //self.log("Created " + c.type + " " + xeogl._inQuotes(c.id));
        },

        // Callbacks as members to reduce GC churn

        _componentDestroyed: function (c) {

            this._componentIDMap.removeItem(c.id);

            delete this.components[c.id];

            var types = this.types[c.type];

            if (types) {

                delete types[c.id];

                if (xeogl._isEmptyObject(types)) {
                    delete this.types[c.type];
                }
            }

            if (c.isType("xeogl.Entity")) {

                // Component is a xeogl.Entity, or a subtype thereof

                // Update scene statistics,
                // Unschedule any pending recompilation of
                // the Entity into the renderer

                xeogl.stats.components.entities--;

                delete this.entities[c.id];

                delete this._dirtyEntities[c.id];
            }

            /**
             * Fired whenever a component within this Scene has been destroyed.
             * @event componentDestroyed
             * @param {Component} value The component that was destroyed
             */
            this.fire("componentDestroyed", c, true);

            //this.log("Destroyed " + c.type + " " + xeogl._inQuotes(c.id));
        },

        _entityDirty: function (entity) {

            // Whenever the Entity signals dirty,
            // schedule its recompilation into the renderer

            var self = this;

            if (!this._dirtyEntities[entity.id]) {

                this._dirtyEntities[entity.id] = entity;

                // TODO: Getting 'location is not from current program' when this is
                // uncommented on chrome/windows

                //xeogl.scheduleTask(function () {
                //    if (self._dirtyEntities[entity.id]) {
                //        if (entity._valid()) {
                //            entity._compile();
                //            delete self._dirtyEntities[entity.id];
                //        }
                //    }
                //});
            }
        },

        /**
         * Renders a single frame of this Scene.
         *
         * The Scene will automatically call this method on itself to render after any updates, but you
         * can call this method to force a render if required. This method is typically used when we want
         * to synchronously take a snapshot of the canvas and need everything rendered right at that moment.
         *
         * @method render
         * @param {Boolean} [forceRender=false] Forces a render when true, otherwise only renders if something has changed in this Scene
         * since the last render.
         */
        render: (function () {

            var renderEvent = {
                sceneId: null,
                pass: null
            };

            return function (forceRender) {

                renderEvent.sceneId = this.id;

                var passes = this._passes;
                var clearEachPass = this._clearEachPass;
                var pass;
                var clear;

                for (pass = 0; pass < passes; pass++) {

                    renderEvent.pass = pass;

                    /**
                     * Fired when about to render a frame for a Scene.
                     *
                     * @event rendering
                     * @param {String} sceneID The ID of this Scene.
                     * @param {Number} pass Index of the pass we are about to render (see {{#crossLink "Scene/passes:property"}}{{/crossLink}}).
                     */
                    this.fire("rendering", renderEvent, true);

                    clear = clearEachPass || (pass === 0);

                    this._compile(pass, clear, forceRender);

                    /**
                     * Fired when we have just rendered a frame for a Scene.
                     *
                     * @event rendering
                     * @param {String} sceneID The ID of this Scene.
                     * @param {Number} pass Index of the pass we rendered (see {{#crossLink "Scene/passes:property"}}{{/crossLink}}).
                     */
                    this.fire("rendered", renderEvent, true);
                }
            }
        })(),

        _props: {

            /**
             * The number of {{#crossLink "Scene/tick:property"}}{{/crossLink}} that happen between each render or this Scene.
             *
             * Fires a {{#crossLink "Scene/ticksPerRender:event"}}{{/crossLink}} event on change.
             *
             * @property ticksPerRender
             * @default 1
             * @type Number
             */
            ticksPerRender: {

                set: function (value) {

                    if (value === undefined || value === null) {
                        value = 1;

                    } else if (!xeogl._isNumeric(value) || value <= 0) {

                        this.error("Unsupported value for 'ticksPerRender': '" + value +
                            "' - should be an integer greater than zero.");

                        value = 1;
                    }

                    if (value === this._ticksPerRender) {
                        return;
                    }

                    this._ticksPerRender = value;

                    /**
                     Fired whenever this Scene's {{#crossLink "Scene/ticksPerRender:property"}}{{/crossLink}} property changes.

                     @event ticksPerRender
                     @param value {Boolean} The property's new value
                     */
                    this.fire("ticksPerRender", this._ticksPerRender);
                },

                get: function () {
                    return this._ticksPerRender;
                }
            },
            
            /**
             * The number of times this Scene renders per frame.
             *
             * Fires a {{#crossLink "Scene/passes:event"}}{{/crossLink}} event on change.
             *
             * @property passes
             * @default 1
             * @type Number
             */
            passes: {

                set: function (value) {

                    if (value === undefined || value === null) {
                        value = 1;

                    } else if (!xeogl._isNumeric(value) || value <= 0) {

                        this.error("Unsupported value for 'passes': '" + value +
                            "' - should be an integer greater than zero.");

                        value = 1;
                    }

                    if (value === this._passes) {
                        return;
                    }

                    this._passes = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Scene's {{#crossLink "Scene/passes:property"}}{{/crossLink}} property changes.

                     @event passes
                     @param value {Boolean} The property's new value
                     */
                    this.fire("passes", this._passes);
                },

                get: function () {
                    return this._passes;
                }
            },

            /**
             * When doing multiple passes per frame, specifies whether to clear the
             * canvas before each pass (true) or just before the first pass (false).
             *
             * Fires a {{#crossLink "Scene/clearEachPass:event"}}{{/crossLink}} event on change.
             *
             * @property clearEachPass
             * @default false
             * @type Boolean
             */
            clearEachPass: {

                set: function (value) {

                    value = !!value;

                    if (value === this._clearEachPass) {
                        return;
                    }

                    this._clearEachPass = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Scene's {{#crossLink "Scene/clearEachPass:property"}}{{/crossLink}} property changes.

                     @event clearEachPass
                     @param value {Boolean} The property's new value
                     */
                    this.fire("clearEachPass", this._clearEachPass);
                },

                get: function () {
                    return this._clearEachPass;
                }
            },
            

            /**
             * The default projection transform provided by this Scene, which is
             * a {{#crossLink "Perspective"}}Perspective{{/crossLink}}.
             *
             * This {{#crossLink "Perspective"}}Perspective{{/crossLink}} has an
             * {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to
             * "default.project", with all other properties set to their default
             * values.
             *
             * {{#crossLink "Camera"}}Cameras{{/crossLink}} within this Scene
             * are attached to this {{#crossLink "Perspective"}}Perspective{{/crossLink}}
             * by default.
             *
             * @property project
             * @final
             * @type Perspective
             */
            project: {

                get: function () {
                    return this.components["default.project"] ||
                        new xeogl.Perspective(this, {
                            id: "default.project",
                            isDefault: true
                        });
                }
            },

            /**
             * The default viewing transform provided by this Scene, which is a {{#crossLink "Lookat"}}Lookat{{/crossLink}}.
             *
             * This {{#crossLink "Lookat"}}Lookat{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.view",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Camera"}}Cameras{{/crossLink}} within this Scene are attached to
             * this {{#crossLink "Lookat"}}Lookat{{/crossLink}} by default.
             * @property view
             * @final
             * @type Lookat
             */
            view: {

                get: function () {
                    return this.components["default.view"] ||
                        new xeogl.Lookat(this, {
                            id: "default.view",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Camera"}}Camera{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Camera"}}Camera{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.camera",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to
             * this {{#crossLink "Camera"}}Camera{{/crossLink}} by default.
             * @property camera
             * @final
             * @type Camera
             */
            camera: {

                get: function () {
                    return this.components["default.camera"] ||
                        new xeogl.Camera(this, {
                            id: "default.camera",
                            isDefault: true,
                            project: "default.project",
                            view: "default.view"
                        });
                }
            },

            /**
             * The default modelling {{#crossLink "Transform"}}{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Transform"}}{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.transform",
             * with all other properties initialised to their default values (ie. an identity matrix).
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to
             * this {{#crossLink "Transform"}}{{/crossLink}} by default.
             *
             * @property transform
             * @final
             * @type Transform
             */
            transform: {

                get: function () {
                    return this.components["default.transform"] ||
                        new xeogl.Transform(this, {
                            id: "default.transform",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Billboard"}}Billboard{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Billboard"}}Billboard{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.billboard"
             * and an {{#crossLink "Billboard/active:property"}}{{/crossLink}} property set to false, to disable it.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Billboard"}}Billboard{{/crossLink}} by default.
             *
             * @property billboard
             * @final
             * @type Billboard
             */
            billboard: {
                get: function () {
                    return this.components["default.billboard"] ||
                        new xeogl.Billboard(this, {
                            id: "default.billboard",
                            active: false,
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Stationary"}}Stationary{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Stationary"}}Stationary{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.stationary"
             * and an {{#crossLink "Stationary/active:property"}}{{/crossLink}} property set to false, to disable it.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Stationary"}}Stationary{{/crossLink}} by default.
             *
             * @property stationary
             * @final
             * @type Stationary
             */
            stationary: {
                get: function () {
                    return this.components["default.stationary"] ||
                        new xeogl.Stationary(this, {
                            id: "default.stationary",
                            active: false,
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Clips"}}Clips{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Clips"}}Clips{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.clips",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Clips"}}Clips{{/crossLink}} by default.
             * @property clips
             * @final
             * @type Clips
             */
            clips: {

                get: function () {
                    return this.components["default.clips"] ||
                        new xeogl.Clips(this, {
                            id: "default.clips",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "ColorBuf"}}ColorBuf{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "ColorBuf"}}ColorBuf{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.colorBuf",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "ColorBuf"}}ColorBuf{{/crossLink}} by default.
             * @property colorBuf
             * @final
             * @type ColorBuf
             */
            colorBuf: {

                get: function () {
                    return this.components["default.colorBuf"] ||
                        new xeogl.ColorBuf(this, {
                            id: "default.colorBuf",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} provided by this Scene.
             *
             * The {{#crossLink "ColorTarget"}}DepthTarget{{/crossLink}} is
             * {{#crossLink "ColorTarget/active:property"}}inactive{{/crossLink}} by default and will have an
             * {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.depthTarget".
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} by default.
             * @property colorTarget
             * @private
             * @final
             * @type ColorTarget
             */
            colorTarget: {
                get: function () {
                    return this.components["default.colorTarget"] ||
                        new xeogl.ColorTarget(this, {
                            id: "default.colorTarget",
                            isDefault: true,
                            active: false
                        })
                }
            },

            /**
             * The default {{#crossLink "DepthBuf"}}DepthBuf{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "DepthBuf"}}DepthBuf{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.depthBuf",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "DepthBuf"}}DepthBuf{{/crossLink}} by default.
             *
             * @property depthBuf
             * @final
             * @type DepthBuf
             */
            depthBuf: {
                get: function () {
                    return this.components["default.depthBuf"] ||
                        new xeogl.DepthBuf(this, {
                            id: "default.depthBuf",
                            isDefault: true,
                            active: true
                        });
                }
            },

            /**
             * The default {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} provided by this Scene.
             *
             * The {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} is
             * {{#crossLink "DepthTarget/active:property"}}inactive{{/crossLink}} by default and has an
             * {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.depthTarget".
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} by default.
             * @property depthTarget
             * @private
             * @final
             * @type DepthTarget
             */
            depthTarget: {
                get: function () {
                    return this.components["default.depthTarget"] ||
                        new xeogl.DepthTarget(this, {
                            id: "default.depthTarget",
                            isDefault: true,
                            active: false
                        });
                }
            },

            /**
             * The default {{#crossLink "Visibility"}}Visibility{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Visibility"}}Visibility{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.visibility",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Visibility"}}Visibility{{/crossLink}} by default.
             * @property visibility
             * @final
             * @type Visibility
             */
            visibility: {
                get: function () {
                    return this.components["default.visibility"] ||
                        new xeogl.Visibility(this, {
                            id: "default.visibility",
                            isDefault: true,
                            visible: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Cull"}}{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Cull"}}cull{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.cull",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Cull"}}{{/crossLink}} by default.
             * @property cull
             * @final
             * @type cull
             */
            cull: {
                get: function () {
                    return this.components["default.cull"] ||
                        new xeogl.Cull(this, {
                            id: "default.cull",
                            isDefault: true,
                            culled: false
                        });
                }
            },

            /**
             * The default {{#crossLink "Modes"}}Modes{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Modes"}}Modes{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.modes",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Modes"}}Modes{{/crossLink}} by default.
             * @property modes
             * @final
             * @type Modes
             */
            modes: {
                get: function () {
                    return this.components["default.modes"] ||
                        new xeogl.Modes(this, {
                            id: "default.modes",
                            isDefault: true
                        });
                }
            },

            /**
             * The default geometry provided by this Scene, which is a {{#crossLink "BoxGeometry"}}BoxGeometry{{/crossLink}}.
             *
             * This {{#crossLink "BoxGeometry"}}BoxGeometry{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.geometry".
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Geometry"}}Geometry{{/crossLink}} by default.
             * @property geometry
             * @final
             * @type BoxGeometry
             */
            geometry: {
                get: function () {
                    return this.components["default.geometry"] ||
                        new xeogl.BoxGeometry(this, {
                            id: "default.geometry",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Layer"}}Layer{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Layer"}}Layer{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.layer",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Layer"}}Layer{{/crossLink}} by default.
             * @property layer
             * @final
             * @type Layer
             */
            layer: {
                get: function () {
                    return this.components["default.layer"] ||
                        new xeogl.Layer(this, {
                            id: "default.layer",
                            isDefault: true,
                            priority: 0
                        });
                }
            },

            /**
             * The default {{#crossLink "Lights"}}Lights{{/crossLink}} provided
             * by this Scene.
             *
             * This {{#crossLink "Lights"}}Lights{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to *````"default.lights"````*,
             * with all other properties initialised to their default values (ie. the default set of light sources for a {{#crossLink "Lights"}}Lights{{/crossLink}}).
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Lights"}}Lights{{/crossLink}} by default.
             *
             * @property lights
             * @final
             * @type Lights
             */
            lights: {
                get: function () {
                    return this.components["default.lights"] ||
                        new xeogl.Lights(this, {
                            id: "default.lights",
                            isDefault: true,

                            // By default a xeogl.Lights has an empty lights
                            // property, so we must provide some lights

                            lights: [

                                // Ambient light source #0
                                new xeogl.AmbientLight(this, {
                                    id: "default.light0",
                                    color: [0.45, 0.45, 0.5],
                                    intensity: 0.9
                                }),

                                // Directional light source #1
                                new xeogl.DirLight(this, {
                                    id: "default.light1",
                                    dir: [-0.5, 0.5, -0.6],
                                    color: [0.8, 0.8, 0.7],
                                    intensity: 1.0,
                                    space: "view"
                                }),
                                //
                                // Directional light source #2
                                new xeogl.DirLight(this, {
                                    id: "default.light2",
                                    dir: [0.5, -0.5, -0.6],
                                    color: [0.8, 0.8, 0.8],
                                    intensity: 1.0,
                                    space: "view"
                                })
                            ]
                        });
                }
            },

            /**
             * The {{#crossLink "PhongMaterial"}}PhongMaterial{{/crossLink}} provided as the default material by this Scene.
             *
             * This {{#crossLink "PhongMaterial"}}PhongMaterial{{/crossLink}} has
             * an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.material", with all
             * other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "PhongMaterial"}}PhongMaterial{{/crossLink}} by default.
             * @property material
             * @final
             * @type PhongMaterial
             */
            material: {
                get: function () {
                    return this.components["default.material"] ||
                        new xeogl.PhongMaterial(this, {
                            id: "default.material",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "MorphTargets"}}MorphTargets{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "MorphTargets"}}MorphTargets{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.morphTargets",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "MorphTargets"}}MorphTargets{{/crossLink}} by default.
             * @property morphTargets
             * @private
             * @final
             * @type MorphTargets
             */
            morphTargets: {
                get: function () {
                    return this.components["default.morphTargets"] ||
                        new xeogl.MorphTargets(this, {
                            id: "default.morphTargets",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Reflect"}}Reflect{{/crossLink}} provided by this Scene,
             * (which is initially an empty {{#crossLink "Reflect"}}Reflect{{/crossLink}} that has no effect).
             *
             * This {{#crossLink "Reflect"}}Reflect{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.reflect",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Reflect"}}Reflect{{/crossLink}} by default.
             * @property reflect
             * @final
             * @type Reflect
             */
            reflect: {
                get: function () {
                    return this.components["default.reflect"] ||
                        new xeogl.Reflect(this, {
                            id: "default.reflect",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Shader"}}Shader{{/crossLink}} provided by this Scene
             * (which is initially an empty {{#crossLink "Shader"}}Shader{{/crossLink}} that has no effect).
             *
             * This {{#crossLink "Shader"}}Shader{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.shader",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Shader"}}Shader{{/crossLink}} by default.
             * @property shader
             * @final
             * @private
             * @type Shader
             */
            shader: {
                get: function () {
                    return this.components["default.shader"] ||
                        this.components["default.shader"] || new xeogl.Shader(this, {
                            id: "default.shader",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "ShaderParams"}}ShaderParams{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "ShaderParams"}}ShaderParams{{/crossLink}} has an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.shaderParams",
             * with all other properties initialised to their default values.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "ShaderParams"}}{{/crossLink}} by default.
             *
             * @property shaderParams
             * @final
             * @private
             * @type ShaderParams
             */
            shaderParams: {
                get: function () {
                    return this.components["default.shaderParams"] ||
                        new xeogl.ShaderParams(this, {
                            id: "default.shaderParams",
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Stage"}}Stage{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Stage"}}Stage{{/crossLink}} has
             * an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.stage" and
             * a {{#crossLink "Stage/priority:property"}}priority{{/crossLink}} equal to ````0````.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Stage"}}Stage{{/crossLink}} by default.
             * @property stage
             * @final
             * @type Stage
             */
            stage: {
                get: function () {
                    return this.components["default.stage"] ||
                        new xeogl.Stage(this, {
                            id: "default.stage",
                            priority: 0,
                            isDefault: true
                        });
                }
            },

            /**
             * The default {{#crossLink "Viewport"}}{{/crossLink}} provided by this Scene.
             *
             * This {{#crossLink "Viewport"}}{{/crossLink}} has
             * an {{#crossLink "Component/id:property"}}id{{/crossLink}} equal to "default.viewport" and
             * {{#crossLink "Viewport/autoBoundary:property"}}{{/crossLink}} set ````true````.
             *
             * {{#crossLink "Entity"}}Entities{{/crossLink}} within this Scene are attached to this
             * {{#crossLink "Viewport"}}{{/crossLink}} by default.
             *
             * @property viewport
             * @final
             * @type Viewport
             */
            viewport: {
                get: function () {
                    return this.components["default.viewport"] ||
                        new xeogl.Viewport(this, {
                            id: "default.viewport",
                            autoBoundary: true,
                            isDefault: true
                        });
                }
            },

            /**
             * The World-space 3D boundary of this Scene.
             *
             * The {{#crossLink "Boundary3D"}}{{/crossLink}} will be lazy-initialized the first time
             * you reference this property, and will persist on this Scene until you
             * call {{#crossLink "Component/destroy:method"}}{{/crossLink}} on the {{#crossLink "Boundary3D"}}{{/crossLink}}
             * again. The property will then be set to a fresh {{#crossLink "Boundary3D"}}{{/crossLink}} instance
             * next time you reference it.
             *
             * <h4>Performance</h4>
             *
             * To minimize performance overhead, only reference this property if you need it, and destroy
             * the {{#crossLink "Boundary3D"}}{{/crossLink}} as soon as you don't need it anymore.
             *
             * @property worldBoundary
             * @type Boundary3D
             * @final
             */
            worldBoundary: {

                get: function () {

                    if (!this._worldBoundary) {

                        var self = this;
                        var aabb = xeogl.math.AABB3();

                        this._worldBoundary = new xeogl.Boundary3D(this.scene, {

                            getDirty: function () {
                                return self._worldBoundaryDirty;
                            },

                            getAABB: function () {

                                xeogl.math.collapseAABB3(aabb);

                                var entities = self.entities;
                                var entity;

                                for (var entityId in entities) {
                                    if (entities.hasOwnProperty(entityId)) {

                                        entity = entities[entityId];

                                        if (entity.modes.collidable) {

                                            // Only include boundaries of entities that are allowed
                                            // to contribute to the size of an enclosing boundary

                                            xeogl.math.expandAABB3(aabb, entity.worldBoundary.aabb);
                                        }
                                    }
                                }

                                return aabb;
                            }
                        });

                        this._worldBoundary.on("destroyed",
                            function () {

                                // Now #._setWorldBoundaryDirty won't fire "update"
                                // events on the #._worldBoundary every time its called

                                self._worldBoundary = null;
                            });

                        this._setWorldBoundaryDirty();
                    }

                    return this._worldBoundary;
                }
            }
        },

        _setWorldBoundaryDirty: function () {
            this._worldBoundaryDirty = true;
            if (this._worldBoundary) {
                this._worldBoundary.fire("updated", true);
            }
        },

        /**
         * Attempts to pick an {{#crossLink "Entity"}}Entity{{/crossLink}} in this Scene.
         *
         * Ignores {{#crossLink "Entity"}}Entities{{/crossLink}} that are attached
         * to either a {{#crossLink "Stage"}}Stage{{/crossLink}} with {{#crossLink "Stage/pickable:property"}}pickable{{/crossLink}}
         * set *false* or a {{#crossLink "Modes"}}Modes{{/crossLink}} with {{#crossLink "Modes/pickable:property"}}pickable{{/crossLink}} set *false*.
         *
         * Picking the {{#crossLink "Entity"}}{{/crossLink}} at the given canvas coordinates:
         *
         * ````javascript
         * var hit = scene.pick({
         *     canvasPos: [23, 131]
         *  });
         *
         * if (hit) { // Picked an Entity
         *     var entity = hit.entity;
         * }
         * ````
         *
         * **Usage:**
         *
         * Picking the {{#crossLink "Entity"}}{{/crossLink}} that intersects a ray cast through the canvas:
         *
         * ````javascript
         * var hit = scene.pick({
         *     pickSurface: true,
         *     canvasPos: [23, 131]
         *  });
         *
         * if (hit) { // Picked an Entity
         *
         *     var entity = hit.entity;
         *
         *     // These properties are only on the hit result when we do a ray-pick:
         *
         *     var primitive = hit.primitive; // Type of primitive that was picked, usually "triangles"
         *     var primIndex = hit.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array
         *     var indices = hit.indices; // UInt32Array containing the triangle's vertex indices
         *     var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle
         *     var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle
         *     var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle
         *     var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle
         *     var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle
         *     var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle
         * }
         * ````
         *
         * Picking the {{#crossLink "Entity"}}{{/crossLink}} that intersects an arbitrarily-aligned World-space ray:
         *
         * ````javascript
         * var hit = scene.pick({
         *     pickSurface: true,       // Picking with arbitrarily-positioned ray
         *     origin: [0,0,-5],    // Ray origin
         *     direction: [0,0,1]   // Ray direction
         * });
         *
         * if (hit) { // Picked an Entity with the ray
         *
         *     var entity = hit.entity;
         *
         *     var primitive = hit.primitive; // Type of primitive that was picked, usually "triangles"
         *     var primIndex = hit.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array
         *     var indices = hit.indices; // UInt32Array containing the triangle's vertex indices
         *     var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle
         *     var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle
         *     var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle
         *     var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle
         *     var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle
         *     var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle
         *     var origin = hit.origin; // Float32Array containing the World-space ray origin
         *     var direction = hit.direction; // Float32Array containing the World-space ray direction
         * }
         * ````
         * @method pick
         *
         * @param {*} params Picking parameters.
         * @param {Boolean} [params.pickSurface=false] Whether to find the picked position on the surface of the Entity.
         * @param {Float32Array} [params.canvasPos] Canvas-space coordinates. When ray-picking, this will override the
         * **origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position,
         * directly along the negative View-space Z-axis.
         * @param {Float32Array} [params.origin] World-space ray origin when ray-picking. Ignored when canvasPos given.
         * @param {Float32Array} [params.direction] World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given.
         * @returns {*} Hit record, returned when an {{#crossLink "Entity"}}{{/crossLink}} is picked, else null. See
         * method comments for description.
         */
        pick: (function () {

            // Cached vectors to avoid garbage collection

            var math = xeogl.math;

            var localRayOrigin = math.vec3();
            var localRayDir = math.vec3();

            var a = math.vec3();
            var b = math.vec3();
            var c = math.vec3();

            var triangleVertices = math.vec3();
            var position = math.vec4();
            var worldPos = math.vec3();
            var viewPos = math.vec3();
            var bary = math.vec3();

            var na = math.vec3();
            var nb = math.vec3();
            var nc = math.vec3();

            var uva = math.vec3();
            var uvb = math.vec3();
            var uvc = math.vec3();

            var tempVec4a = math.vec4();
            var tempVec4b = math.vec4();
            var tempVec4c = math.vec4();
            var tempVec4d = math.vec4();
            var tempVec4e = math.vec4();

            var tempVec3 = math.vec3();
            var tempVec3b = math.vec3();
            var tempVec3c = math.vec3();
            var tempVec3d = math.vec3();
            var tempVec3e = math.vec3();
            var tempVec3f = math.vec3();
            var tempVec3g = math.vec3();
            var tempVec3h = math.vec3();
            var tempVec3i = math.vec3();
            var tempVec3j = math.vec3();
            var tempVec3k = math.vec3();

            var tempMat4 = math.mat4();
            var tempMat4b = math.mat4();
            var tempMat4c = math.mat4();

            // Given a Entity and canvas coordinates, gets a Local-space ray.
            function canvasPosToLocalRay(entity, canvasPos, localRayOrigin, localRayDir) {

                var canvas = entity.scene.canvas.canvas;

                var modelMat = entity.transform.leafMatrix;
                var viewMat = entity.camera.view.matrix;
                var projMat = entity.camera.project.matrix;

                var vmMat = math.mulMat4(viewMat, modelMat, tempMat4);
                var pvMat = math.mulMat4(projMat, vmMat, tempMat4b);
                var pvMatInverse = math.inverseMat4(pvMat, tempMat4c);

                // Calculate clip space coordinates, which will be in range
                // of x=[-1..1] and y=[-1..1], with y=(+1) at top

                var canvasWidth = canvas.width;
                var canvasHeight = canvas.height;

                var clipX = (canvasPos[0] - canvasWidth / 2) / (canvasWidth / 2);  // Calculate clip space coordinates
                var clipY = -(canvasPos[1] - canvasHeight / 2) / (canvasHeight / 2);

                tempVec4a[0] = clipX;
                tempVec4a[1] = clipY;
                tempVec4a[2] = -1;
                tempVec4a[3] = 1;

                math.transformVec4(pvMatInverse, tempVec4a, tempVec4b);
                math.mulVec4Scalar(tempVec4b, 1 / tempVec4b[3]);

                tempVec4c[0] = clipX;
                tempVec4c[1] = clipY;
                tempVec4c[2] = 1;
                tempVec4c[3] = 1;

                math.transformVec4(pvMatInverse, tempVec4c, tempVec4d);
                math.mulVec4Scalar(tempVec4d, 1 / tempVec4d[3]);

                localRayOrigin[0] = tempVec4d[0];
                localRayOrigin[1] = tempVec4d[1];
                localRayOrigin[2] = tempVec4d[2];

                math.subVec3(tempVec4d, tempVec4b, localRayDir);

                math.normalizeVec3(localRayDir);
            }

            // Transforms a ray from World-space to Local-space
            function worldRayToLocalRay(entity, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir) {

                var modelMat = entity.transform.leafMatrix;
                var modelMatInverse = math.inverseMat4(modelMat, tempMat4);

                tempVec4a[0] = worldRayOrigin[0];
                tempVec4a[1] = worldRayOrigin[1];
                tempVec4a[2] = worldRayOrigin[2];
                tempVec4a[3] = 1;

                math.transformVec4(modelMatInverse, tempVec4a, tempVec4b);

                localRayOrigin[0] = tempVec4b[0];
                localRayOrigin[1] = tempVec4b[1];
                localRayOrigin[2] = tempVec4b[2];

                math.transformVec3(modelMatInverse, worldRayDir, localRayDir);
            }

            return function (params) {

                params = params || {};

                params.pickSurface = params.pickSurface || params.rayPick; // Backwards compatibility

                if (!params.canvasPos && (!params.origin || !params.direction)) {
                    this.warn("picking without canvasPos or ray origin and direction");
                }

                var hit = this._renderer.pick(params);

                if (hit) {

                    var entity = this.entities[hit.entity];

                    hit.entity = entity; // Swap string ID for xeogl.Entity

                    if (params.pickSurface) {

                        if (hit.primIndex !== undefined && hit.primIndex > -1) {

                            var geometry = entity.geometry;

                            if (geometry.primitive === "triangles") {

                                // Triangle picked; this only happens when the
                                // Entity has a Geometry that has primitives of type "triangle"

                                hit.primitive = "triangle";

                                // Get the World-space positions of the triangle's vertices

                                var i = hit.primIndex; // Indicates the first triangle index in the indices array

                                var indices = geometry.indices;
                                var positions = geometry.positions;

                                var ia = indices[i];
                                var ib = indices[i + 1];
                                var ic = indices[i + 2];

                                var ia3 = ia * 3;
                                var ib3 = ib * 3;
                                var ic3 = ic * 3;

                                //
                                triangleVertices[0] = ia;
                                triangleVertices[1] = ib;
                                triangleVertices[2] = ic;

                                hit.indices = triangleVertices;

                                a[0] = positions[ia3];
                                a[1] = positions[ia3 + 1];
                                a[2] = positions[ia3 + 2];

                                b[0] = positions[ib3];
                                b[1] = positions[ib3 + 1];
                                b[2] = positions[ib3 + 2];

                                c[0] = positions[ic3];
                                c[1] = positions[ic3 + 1];
                                c[2] = positions[ic3 + 2];

                                // Attempt to ray-pick the triangle; in World-space, fire a ray
                                // from the eye position through the mouse position
                                // on the perspective projection plane

                                var canvasPos;

                                if (params.canvasPos) {
                                    canvasPos = params.canvasPos;
                                    hit.canvasPos = params.canvasPos;
                                    canvasPosToLocalRay(entity, canvasPos, localRayOrigin, localRayDir);

                                } else if (params.origin && params.direction) {
                                    worldRayToLocalRay(entity, params.origin, params.direction, localRayOrigin, localRayDir);
                                }

                                math.normalizeVec3(localRayDir);
                                math.rayPlaneIntersect(localRayOrigin, localRayDir, a, b, c, position);

                                // Get Local-space cartesian coordinates of the ray-triangle intersection

                                hit.localPos = position;
                                hit.position = position;

                                // Get interpolated World-space coordinates

                                // Need to transform homogeneous coords

                                tempVec4a[0] = position[0];
                                tempVec4a[1] = position[1];
                                tempVec4a[2] = position[2];
                                tempVec4a[3] = 1;

                                // Get World-space cartesian coordinates of the ray-triangle intersection

                                math.transformVec4(entity.transform.leafMatrix, tempVec4a, tempVec4b);

                                worldPos[0] = tempVec4b[0];
                                worldPos[1] = tempVec4b[1];
                                worldPos[2] = tempVec4b[2];

                                hit.worldPos = worldPos;

                                // Get View-space cartesian coordinates of the ray-triangle intersection

                                math.transformVec4(entity.camera.view.matrix, tempVec4b, tempVec4c);

                                viewPos[0] = tempVec4c[0];
                                viewPos[1] = tempVec4c[1];
                                viewPos[2] = tempVec4c[2];

                                hit.viewPos = viewPos;

                                // Get barycentric coordinates of the ray-triangle intersection

                                math.cartesianToBarycentric(position, a, b, c, bary);

                                hit.bary = bary;

                                // Get interpolated normal vector

                                var normals = geometry.normals;

                                if (normals) {

                                    na[0] = normals[ia3];
                                    na[1] = normals[ia3 + 1];
                                    na[2] = normals[ia3 + 2];

                                    nb[0] = normals[ib3];
                                    nb[1] = normals[ib3 + 1];
                                    nb[2] = normals[ib3 + 2];

                                    nc[0] = normals[ic3];
                                    nc[1] = normals[ic3 + 1];
                                    nc[2] = normals[ic3 + 2];

                                    var normal = math.addVec3(math.addVec3(
                                        math.mulVec3Scalar(na, bary[0], tempVec3),
                                        math.mulVec3Scalar(nb, bary[1], tempVec3b), tempVec3c),
                                        math.mulVec3Scalar(nc, bary[2], tempVec3d), tempVec3e);

                                    hit.normal = math.transformVec3(entity.transform.leafMatrix, normal, tempVec3f);
                                }

                                // Get interpolated UV coordinates

                                var uvs = geometry.uv;

                                if (uvs) {

                                    uva[0] = uvs[(ia * 2)];
                                    uva[1] = uvs[(ia * 2) + 1];

                                    uvb[0] = uvs[(ib * 2)];
                                    uvb[1] = uvs[(ib * 2) + 1];

                                    uvc[0] = uvs[(ic * 2)];
                                    uvc[1] = uvs[(ic * 2) + 1];

                                    hit.uv = math.addVec3(
                                        math.addVec3(
                                            math.mulVec2Scalar(uva, bary[0], tempVec3g),
                                            math.mulVec2Scalar(uvb, bary[1], tempVec3h), tempVec3i),
                                        math.mulVec2Scalar(uvc, bary[2], tempVec3j), tempVec3k);
                                }
                            }
                        }
                    }

                    return hit;
                }
            };
        })(),

        /**
         * Resets this Scene to its default state.
         *
         * References to any components in this Scene will become invalid.
         *
         * @method clear
         */
        clear: function () {  // FIXME: should only clear user-created components

            for (var id in this.components) {
                if (this.components.hasOwnProperty(id)) {

                    // Each component fires "destroyed" as it is destroyed,
                    // which this Scene handles by removing the component

                    this.components[id].destroy();
                }
            }

            // Reinitialise defaults

            this._initDefaults();

            this._dirtyEntities = {};
        },

        /**
         * Convenience method for creating or reusing a Component within this Scene.
         *
         * You would typically use this method to conveniently instantiate components that you'd want to
         * share (ie. "instance") among your {{#crossLink "Entity"}}Entities{{/crossLink}}.
         *
         * The method is given a component type, share ID and constructor attributes, like so:
         *
         * ````javascript
         * var material = myScene.getComponent("xeogl.PhongMaterial", "myMaterial", { diffuse: [1,0,0] });
         * ````
         *
         * The first time you call this method for the given ````type```` and ````instanceId````, this method will create the
         * {{#crossLink "PhongMaterial"}}{{/crossLink}}, passing the given  attributes to the component's constructor.
         *
         * If you call this method again, specifying the same ````type```` and ````instanceId````, the method will return the same
         * component instance that it returned the first time, and will ignore the attributes:
         *
         * ````javascript
         * var material2 = myScene.getComponent("xeogl.PhongMaterial", "myMaterial", { specular: [1,1,0] });
         * ````
         *
         * Each time you call this method with the same ````type```` and ````instanceId````, the Scene will internally increment a
         * reference count for the component instance. You can release the shared component instance with a call to
         * {{#crossLink "Scene/putSharedComponent:method"}}{{/crossLink}}, and once you have released it as many
         * times as you got it, the Scene will destroy the component.
         *
         * @method _getSharedComponent
         * @private
         * @param {*} [cfg] Attributes for the component instance - only used if this is the first time you are getting
         * the component, ignored when reusing an existing shared component.
         * @param {String|Number} instanceId Identifies the shared component instance. Note that this is not used as the ID of the
         * component - you can specify the component ID in the ````cfg```` parameter.
         * @returns {*}
         */
        _getSharedComponent: function (cfg, instanceId) {

            var type;
            var claz;

            if (xeogl._isObject(cfg)) { // Component config given

                type = cfg.type || "xeogl.Component";
                claz = xeogl[type.substring(6)];

            } else if (xeogl._isString(cfg)) {

                type = cfg;
                claz = xeogl[type.substring(6)];

            } else {

                claz = cfg;
                type = cfg.prototype.type;

                // TODO: catch unknown component class
            }

            if (!claz) {
                this.error("Component type not found: " + type);
                return;
            }

            if (!xeogl._isComponentType(type, "xeogl.Component")) {
                this.error("Expected a xeogl.Component type or subtype");
                return;
            }

            var component;

            var fullShareId;

            if (instanceId !== undefined) {

                fullShareId = "__shared." + type + "." + instanceId;

                component = this._sharedComponents[fullShareId];

                if (component) {

                    // Component already exists;
                    // ignore constructor attributes, bump share count and return component

                    this._sharedCounts[fullShareId]++;
                    return component;
                }
            }

            // Component does not yet exist

            if (cfg && cfg.id && this.components[cfg.id]) {
                this.error("Component " + xeogl._inQuotes(cfg.id) + " already exists in Scene");
                return null;
            }

            component = new claz(this, cfg);

            if (instanceId !== undefined) {

                this._sharedComponents[fullShareId] = component;
                this._sharedComponentIDs[component.id] = fullShareId;
                this._sharedCounts[fullShareId] = 1;

                component.on("destroyed", function () {
                    if (this._sharedComponentIDs[component.id] !== undefined) {
                        this._putSharedComponent(component);
                    }
                }, this);
            }

            return component;
        },

        /**
         * Releases a shared component instance that was got earlier
         * with {{#crossLink "Scene/getSharedComponent:method"}}{{/crossLink}}.
         *
         * @param {Component} component The shared component instance.
         *
         */
        _putSharedComponent: function (component) {

            var instanceId = this._sharedComponentIDs[component.id];

            if (instanceId !== undefined) {

                if (--this._sharedCounts[instanceId] > 0) {

                    // Releasing a reference; other references remain

                    return;
                }

                delete this._sharedComponents[instanceId];
                delete this._sharedComponentIDs[component.id];
                delete this._sharedCounts[instanceId];
            }

            component.destroy();
        },

        /**
         * Compiles and renders this Scene
         * @private
         */
        _compile: function (pass, clear, forceRender) {

            // Compile dirty entities into this._renderer

            var countCompiledEntities = 0;
            var entity;

            for (var id in this._dirtyEntities) {
                if (this._dirtyEntities.hasOwnProperty(id)) {
                    entity = this._dirtyEntities[id];
                    if (entity._valid()) {
                        entity._compile();
                        delete this._dirtyEntities[id];
                        countCompiledEntities++;
                    }
                }
            }

            if (countCompiledEntities > 0) {
                //    this.log("Compiled " + countCompiledEntities + " xeogl.Entity" + (countCompiledEntities > 1 ? "s" : ""));
            }

            // Render a frame
            // Only renders if there was a state update

            this._renderer.render({
                pass: pass,
                clear: clear, // Clear buffers?
                force: forceRender
            });

            // If the canvas is not transparent and has no background image or color assigned,
            // then set its color to whatever ambient color the renderer just rendered

            var canvas = this.canvas;

            if (!canvas.transparent && !canvas.backgroundImage && !canvas.backgroundColor) {

                var ambientColor = this._renderer.ambientColor;

                if (!this._lastAmbientColor ||
                    this._lastAmbientColor[0] !== ambientColor[0] ||
                    this._lastAmbientColor[1] !== ambientColor[1] ||
                    this._lastAmbientColor[2] !== ambientColor[2] ||
                    this._lastAmbientColor[3] !== ambientColor[3]) {

                    canvas.backgroundColor = ambientColor;

                    if (!this._lastAmbientColor) {
                        this._lastAmbientColor = xeogl.math.vec4();
                    }

                    this._lastAmbientColor.set(ambientColor);
                }
            } else {
                this._lastAmbientColor = null;
            }
        },

        _getJSON: function () {

            // Get list of component JSONs, in ascending order of component
            // creation. We need them in that order so that any dependencies
            // that exist between them are resolved correctly as the
            // components are instantiawhen when we load the JSON again.

            var components = [];
            var component;

            for (var id in this.components) {
                if (this.components.hasOwnProperty(id)) {

                    component = this.components[id];

                    // Don't serialize service components that
                    // will always be created on this Scene

                    if (!component._getJSON) {
                        continue;
                    }

                    // Serialize in same order as creation
                    // in order to resolve inter-component dependencies

                    components.unshift(component);
                }
            }

            components.sort(function (a, b) {
                return a._componentOrder - b._componentOrder
            });

            var componentJSONs = [];

            for (var i = 0, len = components.length; i < len; i++) {
                componentJSONs.push(components[i].json);
            }

            return {
                passes: this._passes,
                clearEachPass: this._clearEachPass,
                components: componentJSONs
            };
        }
        ,

        _destroy: function () {
            this.clear();
        }
    });

})();
;/**
 * Components for animating state within Scenes.
 *
 * @module xeogl
 * @submodule animation
 */;(function () {

    "use strict";


    /**
     A **MorphTargets** defines interpolation targets for morphing {{#crossLink "Geometry"}}Geometry{{/crossLink}}s on
     attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

     <img src="../../../assets/images/MorphTargets.png"></img>

     ## Usage

     TODO


     @module xeogl
     @submodule animation
     @constructor
     @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this MorphTarget in the default
     {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
     @param [cfg] {*} Configs
     @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
     @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this MorphTarget.
     @param [cfg.targets=[]] {Array} The morph targets.
     @param [cfg.factor=0] {Number} The morph factor.
     @extends Component
     */
    xeogl.MorphTargets = xeogl.Component.extend({

        type: "xeogl.MorphTargets",

        _init: function (cfg) {

            this.scene.on("webglContextRestored",
                function () {

                });

            this.targets = cfg.targets;
            this.factor = cfg.factor;
        },


        _props: {

            /**
             * The morph targets.
             *
             *TODO
             *
             * @property targets
             * @default []
             * @type Array
             */
            targets: {

                set: function (value) {

                    /**
                     * Fired whenever this MorphTarget's  {{#crossLink "MorphTargets/targets:property"}}{{/crossLink}} property changes.
                     * @event targets
                     * @param value The property's new value
                     */
                },

                get: function () {

                }
            },

            /**
             * The morph factor
             *
             * @property factor
             * @default 0
             * @type Number
             */
            factor: {

                set: function (value) {

                    /**
                     * Fired whenever this MorphTarget's  {{#crossLink "MorphTargets/factor:property"}}{{/crossLink}} property changes.
                     * @event factor
                     * @param value The property's new value
                     */
                },

                get: function () {
                    return 0;
                    return this._state.factor;
                }
            },

            _compile: function () {
                this._renderer.MorphTargets = this._state;
            }
        },

        /**
         * JSON representation of this component
         * @property json
         * @type Object
         */

        _getJSON: function () {
            return {
                targets: this.targets,
                factor: this.factor
            };
        }
    });

})();


;/**
 A **CameraFlightAnimation** jumps or flies a {{#crossLink "Camera"}}{{/crossLink}} to look at a given target.

 <a href="../../examples/#animation_CameraFlightAnimation_Entity"><img src="https://i.giphy.com/3o7TKP0jN800EQ99EQ.gif"></img></a>

 ## Overview

 * Requires that the {{#crossLink "Camera"}}{{/crossLink}} have a {{#crossLink "Lookat"}}{{/crossLink}} for its {{#crossLink "Camera/view:property"}}view{{/crossLink}} transform.
 * Can be attached to a different {{#crossLink "Camera"}}{{/crossLink}} at any time.
 * Can be made to either fly or jump to its target.
 * While busy flying to a target, it can be stopped, or redirected to fly to a different target.

 A CameraFlightAnimation's target can be:

 * specific ````eye````, ````look```` and ````up```` positions,
 * a World-space {{#crossLink "Boundary3D"}}{{/crossLink}},
 * an instance or ID of any {{#crossLink "Component"}}{{/crossLink}} subtype that provides a World-space {{#crossLink "Boundary3D"}}{{/crossLink}} in a "worldBoundary" property, or
 * an axis-aligned World-space bounding box (AABB).

 When a CameraFlightAnimation's target is a {{#crossLink "Boundary3D"}}{{/crossLink}} or AABB, you can configure its {{#crossLink "CameraFlightAnimation/fit:property"}}{{/crossLink}}
 and {{#crossLink "CameraFlightAnimation/fitFOV:property"}}{{/crossLink}} properties to make it stop at the point where the target
 occupies a certain amount of the field-of-view.

 ## Examples

 * [Flying to random Entities](../../examples/#animation_CameraFlightAnimation_Entity)
 * [Flying to Boundary3D](../../examples/#animation_CameraFlightAnimation_Boundary3D)
 * [Flying to AABB](../../examples/#animation_CameraFlightAnimation_AABB)

 ## Flying to an Entity

 Flying to an {{#crossLink "Entity"}}{{/crossLink}} (which provides a World-space
 {{#crossLink "Boundary3D"}}{{/crossLink}} via its {{#crossLink "Entity/worldBoundary:property"}}{{/crossLink}} property):

 ````Javascript
 var camera = new xeogl.Camera();

 // Create a CameraFlightAnimation that takes one second to fly
 // the default Scene's default Camera to each specified target
 var cameraFlight = new xeogl.CameraFlightAnimation({
    fit: true, // Default
    fitFOV: 45, // Default, degrees
    duration: 1 // Default, seconds
 }, function() {
           // Arrived
       });

 // Create a Entity, which gets all the default components
 var entity = new Entity();

 // Fly to the Entity's worldBoundary
 cameraFlight.flyTo(entity);
 ````
 ## Flying to a position

 Flying the CameraFlightAnimation from the previous example to specified eye, look and up positions:

 ````Javascript
 cameraFlight.flyTo({
    eye: [-5,-5,-5],
    look: [0,0,0]
    up: [0,1,0],
    duration: 1 // Default, seconds
 }, function() {
          // Arrived
      });
 ````

 ## Flying to a Boundary3D

 Flying the CameraFlightAnimation from the previous two examples explicitly to the World-space
 {{#crossLink "Boundary3D"}}{{/crossLink}} of the {{#crossLink "Entity"}}{{/crossLink}} property):

 ````Javascript
 cameraFlight.flyTo(entity.worldBoundary);
 ````

 ## Flying to an AABB

 Flying the CameraFlightAnimation from the previous two examples explicitly to the {{#crossLink "Boundary3D"}}Boundary3D's{{/crossLink}}
 axis-aligned bounding box:

 ````Javascript
 var worldBoundary = entity.worldBoundary;

 var aabb = worldBoundary.aabb;

 cameraFlight.flyTo(aabb);
 ````

 @class CameraFlightAnimation
 @module xeogl
 @submodule animation
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this CameraFlightAnimation.
 @param [cfg.camera] {Number|String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this CameraFlightAnimation. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.fit=true] {Boolean} When true, will ensure that when this CameraFlightAnimation has flown or jumped to a boundary
 it will adjust the distance between the {{#crossLink "CameraFlightAnimation/camera:property"}}camera{{/crossLink}}'s {{#crossLink "Lookat/eye:property"}}eye{{/crossLink}}
 and {{#crossLink "Lookat/look:property"}}{{/crossLink}} position so as to ensure that the target boundary is filling the view volume.
 @param [cfg.fitFOV=45] {Number} How much field-of-view, in degrees, that a target boundary should
 fill the canvas when fitting the {{#crossLink "Camera"}}Camera{{/crossLink}} to the target boundary.
 @param [cfg.trail] {Boolean} When true, will cause this CameraFlightAnimation to point the {{#crossLink "Camera"}}{{/crossLink}} in the direction that it is travelling.
 @param [cfg.duration=1] {Number} Flight duration, in seconds, when calling {{#crossLink "CameraFlightAnimation/flyTo:method"}}{{/crossLink}}.
 @extends Component
 */
(function () {

    "use strict";

    var math = xeogl.math;

    xeogl.CameraFlightAnimation = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.CameraFlightAnimation",

        _init: function (cfg) {

            this._look1 = math.vec3();
            this._eye1 = math.vec3();
            this._up1 = math.vec3();

            this._look2 = math.vec3();
            this._eye2 = math.vec3();
            this._up2 = math.vec3();

            this._flying = false;
            this._flyEyeLookUp = false;

            this._callback = null;
            this._callbackScope = null;

            this._onTick = null;

            this._time1 = null;
            this._time2 = null;

            this.easing = cfg.easing !== false;

            this.duration = cfg.duration;
            this.fit = cfg.fit;
            this.fitFOV = cfg.fitFOV;
            this.trail = cfg.trail;
            this.camera = cfg.camera;

            // Shows a wireframe box for target AABBs
            this._aabbHelper = this.create({
                type: "xeogl.Entity",
                geometry: this.create({
                    type: "xeogl.AABBGeometry",
                    material: this.create({
                        type: "xeogl.PhongMaterial",
                        diffuse: [0, 0, 0],
                        ambient: [0, 0, 0],
                        specular: [0, 0, 0],
                        emissive: [1.0, 1.0, 0.0],
                        lineWidth: 3
                    })
                }),
                visibility: this.create({
                    type: "xeogl.Visibility",
                    visible: false
                }),
                modes: this.create({
                    type: "xeogl.Modes",
                    collidable: false // Effectively has no boundary
                })
            });

            // Shows a wireframe box for target AABBs
            this._obbHelper = this.create({
                type: "xeogl.Entity",
                geometry: this.create({
                    type: "xeogl.OBBGeometry",
                    material: this.create({
                        type: "xeogl.PhongMaterial",
                        diffuse: [0, 0, 0],
                        ambient: [0, 0, 0],
                        specular: [0, 0, 0],
                        emissive: [1.0, 1.0, 0.0],
                        lineWidth: 3
                    })
                }),
                visibility: this.create({
                    type: "xeogl.Visibility",
                    visible: false
                }),
                modes: this.create({
                    type: "xeogl.Modes",
                    collidable: false // Effectively has no boundary
                })
            });
        },

        /**
         * Begins flying this CameraFlightAnimation's {{#crossLink "Camera"}}{{/crossLink}} to the given target.
         *
         *
         *  * When the target is a boundary, the {{#crossLink "Camera"}}{{/crossLink}} will fly towards the target
         *    and stop when the target fills most of the canvas.
         *  * When the target is an explicit {{#crossLink "Camera"}}{{/crossLink}} position, given as ````eye````, ````look```` and ````up````
         *    vectors, then this CameraFlightAnimation will interpolate the {{#crossLink "Camera"}}{{/crossLink}} to that target and stop there.
         * @method flyTo
         * @param [params=scene]  {*|Component} Either a parameters object or a {{#crossLink "Component"}}{{/crossLink}} subtype that has a {{#crossLink "WorldBoundary"}}{{/crossLink}}.
         * @param[params.arc=0]  {Number} Factor in range [0..1] indicating how much the
         * {{#crossLink "Camera/eye:property"}}Camera's eye{{/crossLink}} position will
         * swing away from its {{#crossLink "Camera/eye:property"}}look{{/crossLink}} position as it flies to the target.
         * @param [params.component] {Number|String|Component} ID or instance of a component to fly to. Defaults to the entire {{#crossLink "Scene"}}{{/crossLink}}.
         * @param [params.aabb] {*}  World-space axis-aligned bounding box (AABB) target to fly to.
         * @param [params.eye] {Float32Array} Position to fly the eye position to.
         * @param [params.look] {Float32Array} Position to fly the look position to.
         * @param [params.up] {Float32Array} Position to fly the up vector to.
         * @param [params.fit=true] {Boolean} Whether to fit the target to the view volume. Overrides {{#crossLink "CameraFlightAnimation/fit:property"}}{{/crossLink}}.
         * @param [params.fitFOV] {Number} How much of field-of-view, in degrees, that a target {{#crossLink "Entity"}}{{/crossLink}} or its AABB should
         * fill the canvas on arrival. Overrides {{#crossLink "CameraFlightAnimation/fitFOV:property"}}{{/crossLink}}.
         * @param [params.duration] {Number} Flight duration in seconds.  Overrides {{#crossLink "CameraFlightAnimation/duration:property"}}{{/crossLink}}.
         * @param [callback] {Function} Callback fired on arrival
         * @param [scope] {Object} Optional scope for callback
         */
        flyTo: (function () {

            var tempVec3 = math.vec3();

            return function (params, callback, scope) {

                params = params || this.scene;

                if (this._flying) {
                    this.stop();
                }

                var camera = this._attached.camera;

                if (!camera) {
                    if (callback) {
                        if (scope) {
                            callback.call(scope);
                        } else {
                            callback();
                        }
                    }
                    return;
                }

                this._flying = false;

                this._callback = callback;
                this._callbackScope = scope;

                var view = camera.view;

                this._eye1[0] = view.eye[0];
                this._eye1[1] = view.eye[1];
                this._eye1[2] = view.eye[2];

                this._look1[0] = view.look[0];
                this._look1[1] = view.look[1];
                this._look1[2] = view.look[2];

                this._up1[0] = view.up[0];
                this._up1[1] = view.up[1];
                this._up1[2] = view.up[2];

                var aabb;
                var sphere;
                var eye;
                var look;
                var up;
                var componentId;

                if (params.worldBoundary) {

                    // Argument is a Component subtype with a worldBoundary

                    aabb = params.worldBoundary.aabb;

                } else if (params.aabb) {

                    aabb = params.aabb;

                    // Argument is a Boundary3D

                } else if (params.length === 6) { // [xmin,ymin,zmin, xmax,ymax,zmax]

                    // Argument is an AABB

                    aabb = params;

                //} else if (params.length === 4) { // [x,y,z,radius]
                //
                //    // Argument is an OBB
                //
                //    sphere = params;

                } else if (params.eye || params.look || params.up) {

                    // Argument is eye, look and up positions

                    eye = params.eye;
                    look = params.look;
                    up = params.up;

                } else {

                    // Argument must be an instance or ID of a Component (subtype)

                    var component = params;

                    if (xeogl._isNumeric(component) || xeogl._isString(component)) {

                        componentId = component;

                        component = this.scene.components[componentId];

                        if (!component) {
                            this.error("Component not found: " + xeogl._inQuotes(componentId));
                            if (callback) {
                                if (scope) {
                                    callback.call(scope);
                                } else {
                                    callback();
                                }
                            }
                            return;
                        }
                    }

                    var worldBoundary = component.worldBoundary;

                    if (!worldBoundary) {
                        this.error("Can't fly to component " + xeogl._inQuotes(componentId) + " - does not have a worldBoundary");
                        if (callback) {
                            if (scope) {
                                callback.call(scope);
                            } else {
                                callback();
                            }
                        }
                        return;
                    }

                    aabb = worldBoundary.aabb;
                }

                var offset = params.offset;

                if (aabb) {

                    if (aabb[3] <= aabb[0] || aabb[4] <= aabb[1] || aabb[5] <= aabb[2]) {

                        // Don't fly to an empty boundary
                        return;
                    }

                    // Show boundary

                    this._aabbHelper.geometry.aabb = aabb;
                    this._aabbHelper.visibility.visible = true;

                    var aabbCenter = math.getAABB3Center(aabb);

                    this._look2 = params.look || aabbCenter;

                    if (offset) {
                        this._look2[0] += offset[0];
                        this._look2[1] += offset[1];
                        this._look2[2] += offset[2];
                    }

                    var vec = math.normalizeVec3(math.subVec3(this._eye1, this._look1, tempVec3));
                    var diag = (params.look && false) ? math.getAABB3DiagPoint(aabb, params.look) : math.getAABB3Diag(aabb);
                    var sca = Math.abs((diag) / Math.tan((params.fitFOV || this._fitFOV) * xeogl.math.DEGTORAD));

                    this._eye2[0] = this._look2[0] + (vec[0] * sca);
                    this._eye2[1] = this._look2[1] + (vec[1] * sca);
                    this._eye2[2] = this._look2[2] + (vec[2] * sca);

                    this._up2[0] = this._up1[0];
                    this._up2[1] = this._up1[1];
                    this._up2[2] = this._up1[2];

                    this._flyEyeLookUp = false;

                } else if (eye || look || up) {

                    look = look || this._look1;
                    eye = eye || this._eye1;
                    up = up || this._up1;

                    this._look2[0] = look[0];
                    this._look2[1] = look[1];
                    this._look2[2] = look[2];

                    this._eye2[0] = eye[0];
                    this._eye2[1] = eye[1];
                    this._eye2[2] = eye[2];

                    this._up2[0] = up[0];
                    this._up2[1] = up[1];
                    this._up2[2] = up[2];

                    this._flyEyeLookUp = true;
                }

                this.fire("started", params, true);

                this._time1 = Date.now();
                this._time2 = this._time1 + (params.duration ? params.duration * 1000 : this._duration);

                this._flying = true; // False as soon as we stop

                xeogl.scheduleTask(this._update, this);
            };
        })(),

        /**
         * Jumps this CameraFlightAnimation's {{#crossLink "Camera"}}{{/crossLink}} to the given target.
         *
         *
         *     * When the target is a boundary, this CameraFlightAnimation will position the {{#crossLink "Camera"}}{{/crossLink}}
         *     at where the target fills most of the canvas.
         *     * When the target is an explicit {{#crossLink "Camera"}}{{/crossLink}} position, given as ````eye````, ````look```` and ````up````
         *      vectors, then this CameraFlightAnimation will jump the {{#crossLink "Camera"}}{{/crossLink}} to that target.
         * @method flyTo
         * @param params  {*|Component} Either a parameters object or a {{#crossLink "Component"}}{{/crossLink}} subtype that has a {{#crossLink "WorldBoundary"}}{{/crossLink}}.
         * @param[params.arc=0]  {Number} Factor in range [0..1] indicating how much the
         * {{#crossLink "Camera/eye:property"}}Camera's eye{{/crossLink}} position will
         * swing away from its {{#crossLink "Camera/eye:property"}}look{{/crossLink}} position as it flies to the target.
         * @param [params.component] {Number|String|Component} ID or instance of a component to fly to.
         * @param [params.aabb] {*}  World-space axis-aligned bounding box (AABB) target to fly to.
         * @param [params.eye] {Float32Array} Position to fly the eye position to.
         * @param [params.look] {Float32Array} Position to fly the look position to.
         * @param [params.up] {Float32Array} Position to fly the up vector to.
         * @param [params.fitFOV] {Number} How much of field-of-view, in degrees, that a target {{#crossLink "Entity"}}{{/crossLink}} or its AABB should
         * fill the canvas on arrival. Overrides {{#crossLink "CameraFlightAnimation/fitFOV:property"}}{{/crossLink}}.
         * @param [params.fit] {Boolean} Whether to fit the target to the view volume. Overrides {{#crossLink "CameraFlightAnimation/fit:property"}}{{/crossLink}}.
         */
        jumpTo: (function () {

            var eyeLookVec = math.vec3();
            var newEye = math.vec3();
            var newLook = math.vec3();
            var newUp = math.vec3();
            var newLookEyeVec = math.vec3();
            var tempVec3e = math.vec3();

            return function (params) {

                if (this._flying) {
                    this.stop();
                }

                var camera = this._attached.camera;

                if (!camera) {
                    return;
                }

                var view = camera.view;

                var aabb;
                var sphere;
                var componentId;

                if (params.worldBoundary) {

                    // Argument is a Component subtype with a worldBoundary

                    sphere = params.worldBoundary.sphere;

                } else if (params.sphere) {

                    sphere = params.sphere;

                } else if (params.aabb) {

                    aabb = params.aabb;

                    // Argument is a Boundary3D

                } else if (params.length === 6) { // [xmin,ymin,zmin, xmax,ymax,zmax]

                    // Argument is an AABB

                    aabb = params;

                } else if (params.length === 4) { // [x,y,z,radius]

                    // Argument is an OBB

                    sphere = params;

                } else if (params.eye || params.look || params.up) {

                    // Argument is eye, look and up positions

                    newEye = params.eye;
                    newLook = params.look;
                    newUp = params.up;

                } else {

                    // Argument must be an instance or ID of a Component (subtype)

                    var component = params;

                    if (xeogl._isNumeric(component) || xeogl._isString(component)) {

                        componentId = component;

                        component = this.scene.components[componentId];

                        if (!component) {
                            this.error("Component not found: " + xeogl._inQuotes(componentId));
                            return;
                        }
                    }

                    var worldBoundary = component.worldBoundary;

                    if (!worldBoundary) {
                        this.error("Can't jump to component " + xeogl._inQuotes(componentId) + " - does not have a worldBoundary");
                        return;
                    }

                    sphere = worldBoundary.sphere;
                }

                var offset = params.offset;

                if (aabb || sphere) {

                    var diag;

                    if (aabb) {

                        if (aabb[3] <= aabb[0] || aabb[4] <= aabb[1] || aabb[5] <= aabb[2]) {

                            // Don't fly to an empty boundary
                            return;
                        }

                        diag = math.getAABB3Diag(aabb);
                        math.getAABB3Center(aabb, newLook);

                    } else {

                        if (sphere[3] <= 0) {
                            return;
                        }

                        diag = sphere[3] * 2;

                        newLook[0] = sphere[0];
                        newLook[1] = sphere[1];
                        newLook[2] = sphere[2];
                    }

                    if (this._trail) {
                        math.subVec3(view.look, newLook, newLookEyeVec);
                    } else {
                        math.subVec3(view.eye, view.look, newLookEyeVec);
                    }

                    math.normalizeVec3(newLookEyeVec);

                    var dist;

                    var fit = (params.fit !== undefined) ? params.fit : this._fit;
                    if (fit) {
                        dist = Math.abs((diag) / Math.tan((params.fitFOV || this._fitFOV) * xeogl.math.DEGTORAD));

                    } else {
                        dist = math.lenVec3(math.subVec3(view.eye, view.look, tempVec3e));
                    }

                    math.mulVec3Scalar(newLookEyeVec, dist);

                    view.eye = math.addVec3(newLook, newLookEyeVec, newEye);
                    view.look = newLook;

                } else if (newEye || newLook || newUp) {

                    if (newEye) {
                        view.eye = newEye;
                    }

                    if (newLook) {
                        view.look = newLook;
                    }

                    if (newUp) {
                        view.up = newUp;
                    }
                }
            };
        })(),

        _update: (function () {

            var newLookEyeVec = math.vec3();
            var newEye = math.vec3();
            var newLook = math.vec3();
            var newUp = math.vec3();
            var lookEyeVec = math.vec3();

            return function () {

                if (!this._flying) {
                    return;
                }

                var time = Date.now();

                var t = (time - this._time1) / (this._time2 - this._time1);

                var stopping = (t >= 1);

                if (t > 1) {
                    t = 1;
                }

                t = this.easing ? this._ease(t, 0, 1, 1) : t;

                var view = this._attached.camera.view;

                if (this._flyEyeLookUp) {

                    view.eye = math.lerpVec3(t, 0, 1, this._eye1, this._eye2, newEye);
                    view.look = math.lerpVec3(t, 0, 1, this._look1, this._look2, newLook);
                    view.up = math.lerpVec3(t, 0, 1, this._up1, this._up2, newUp);

                } else {

                    math.lerpVec3(t, 0, 1, this._look1, this._look2, newLook);

                    var dist;

                    if (this._trail) {
                        math.subVec3(newLook, view.look, newLookEyeVec);

                    } else {
                        math.subVec3(view.eye, view.look, newLookEyeVec);
                    }

                    math.normalizeVec3(newLookEyeVec);
                    math.lerpVec3(t, 0, 1, this._eye1, this._eye2, newEye);
                    math.subVec3(newEye, newLook, lookEyeVec);
                    dist = math.lenVec3(lookEyeVec);
                    math.mulVec3Scalar(newLookEyeVec, dist);

                    view.eye = math.addVec3(newLook, newLookEyeVec, newEye);
                    view.look = newLook;
                }

                if (stopping) {
                    this.stop();
                    return;
                }

                xeogl.scheduleTask(this._update, this); // Keep flying
            };
        })(),

        // Quadratic easing out - decelerating to zero velocity
        // https://gizma.com/easing

        _ease: function (t, b, c, d) {
            t /= d;
            return -c * t * (t - 2) + b;
        },

        /**
         * Stops an earlier flyTo, fires arrival callback.
         * @method stop
         */
        stop: function () {

            if (!this._flying) {
                return;
            }

            this._aabbHelper.visibility.visible = false;

            this._flying = false;

            this._time1 = null;
            this._time2 = null;

            var callback = this._callback;

            if (callback) {

                this._callback = null;

                if (this._callbackScope) {
                    callback.call(this._callbackScope);
                } else {
                    callback();
                }
            }

            this.fire("stopped", true, true);
        },

        /**
         * Cancels an earlier flyTo without calling the arrival callback.
         * @method cancel
         */
        cancel: function () {

            if (!this._flying) {
                return;
            }

            this._aabbHelper.visibility.visible = false;

            this._flying = false;

            this._time1 = null;
            this._time2 = null;

            if (this._callback) {
                this._callback = null;
            }

            this.fire("canceled", true, true);
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}{{/crossLink}} being controlled by this CameraFlightAnimation.
             *
             * Must be within the same {{#crossLink "Scene"}}{{/crossLink}} as this CameraFlightAnimation. Defaults to the parent
             * {{#crossLink "Scene"}}Scene's{{/crossLink}} default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "CameraFlightAnimation/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this CameraFlightAnimation's {{#crossLink "CameraFlightAnimation/camera:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });

                    this.stop();
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * Flight duration, in seconds, when calling {{#crossLink "CameraFlightAnimation/flyTo:method"}}{{/crossLink}}.
             *
             * Stops any flight currently in progress.
             *
             * Fires a {{#crossLink "CameraFlightAnimation/duration:event"}}{{/crossLink}} event on change.
             *
             * @property duration
             * @default 0.5
             * @type Number
             */
            duration: {

                set: function (value) {

                    value = value || 0.5;

                    /**
                     Fired whenever this CameraFlightAnimation's {{#crossLink "CameraFlightAnimation/duration:property"}}{{/crossLink}} property changes.

                     @event duration
                     @param value {Number} The property's new value
                     */
                    this._duration = value * 1000.0;

                    this.stop();
                },

                get: function () {
                    return this._duration / 1000.0;
                }
            },

            /**
             * When true, will ensure that this CameraFlightAnimation is flying to a boundary it will always adjust the distance between the
             * {{#crossLink "CameraFlightAnimation/camera:property"}}camera{{/crossLink}}'s {{#crossLink "Lookat/eye:property"}}eye{{/crossLink}}
             * and {{#crossLink "Lookat/look:property"}}{{/crossLink}}
             * so as to ensure that the target boundary is always filling the view volume.
             *
             * When false, the eye will remain at its current distance from the look position.
             *
             * Fires a {{#crossLink "CameraFlightAnimation/fit:event"}}{{/crossLink}} event on change.
             *
             * @property fit
             * @type Boolean
             * @default true
             */
            fit: {

                set: function (value) {

                    this._fit = value !== false;

                    /**
                     * Fired whenever this CameraFlightAnimation's
                     * {{#crossLink "CameraFlightAnimation/fit:property"}}{{/crossLink}} property changes.
                     * @event fit
                     * @param value The property's new value
                     */
                    this.fire("fit", this._fit);
                },

                get: function () {
                    return this._fit;
                }
            },


            /**
             * How much of field-of-view, in degrees, that a target {{#crossLink "Entity"}}{{/crossLink}} or its AABB should
             * fill the canvas when calling {{#crossLink "CameraFlightAnimation/flyTo:method"}}{{/crossLink}} or {{#crossLink "CameraFlightAnimation/jumpTo:method"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "CameraFlightAnimation/fitFOV:event"}}{{/crossLink}} event on change.
             *
             * @property fitFOV
             * @default 45
             * @type Number
             */
            fitFOV: {

                set: function (value) {

                    value = value || 45;

                    /**
                     Fired whenever this CameraFlightAnimation's {{#crossLink "CameraFlightAnimation/fitFOV:property"}}{{/crossLink}} property changes.

                     @event fitFOV
                     @param value {Number} The property's new value
                     */
                    this._fitFOV = value;
                },

                get: function () {
                    return this._fitFOV;
                }
            },

            /**
             * When true, will cause this CameraFlightAnimation to point the {{#crossLink "CameraFlightAnimation/camera:property"}}{{/crossLink}}
             * in the direction that it is travelling.
             *
             * Fires a {{#crossLink "CameraFlightAnimation/trail:event"}}{{/crossLink}} event on change.
             *
             * @property trail
             * @type Boolean
             * @default false
             */
            trail: {

                set: function (value) {

                    this._trail = !!value;

                    /**
                     * Fired whenever this CameraFlightAnimation's {{#crossLink "CameraFlightAnimation/trail:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event trail
                     * @param value The property's new value
                     */
                    this.fire("trail", this._trail);
                },

                get: function () {
                    return this._trail;
                }
            }
        },

        _getJSON: function () {

            var json = {
                duration: this._duration,
                fitFOV: this._fitFOV,
                fit: this._fit,
                trail: this._trail
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.stop();
        }
    });

})();
;/**
 A **Camera** defines viewing and projection transforms for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 *  A Camera is composed of a viewing and projection {{#crossLink "Transform"}}{{/crossLink}}.
 * The viewing transform is usually a {{#crossLink "Lookat"}}Lookat{{/crossLink}}. Having the viewing transform as a
 separate component from the Camera allows us to switch the Camera between multiple, existing viewpoints by simply re-attaching it to
 different viewing transform components (ie. {{#crossLink "Lookat"}}Lookats{{/crossLink}}).
 *  By default, each Camera has its parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/view:property"}}{{/crossLink}} transform,
 (which is a {{#crossLink "Lookat"}}Lookat{{/crossLink}}) and default
 {{#crossLink "Scene/project:property"}}{{/crossLink}} transform (which is a {{#crossLink "Perspective"}}Perspective{{/crossLink}}).
 You would override those with your own transform components as necessary.

 <img src="../../../assets/images/Camera.png"></img>

 ## Examples

 * [Perspective Camera](../../examples/#transforms_project_perspective)
 * [Orthographic Camera](../../examples/#transforms_project_ortho)
 * [Flying a Camera to ](../../examples/#animation_CameraFlightAnimation_AABB)
 * [Automatically following an Entity with a Camera](../../examples/#animation_CameraFollowAnimation)
 * [Animating a Camera along a path](../../examples/#animation_CameraPathAnimation_interpolate)

 ## Usage

 The example below defines an {{#crossLink "Entity"}}{{/crossLink}} that has a Camera with
 a {{#crossLink "Lookat"}}{{/crossLink}} view transform and a {{#crossLink "Perspective"}}{{/crossLink}} projection transform.

 ```` javascript
 var entity = new xeogl.Entity({
     camera: new xeogl.Camera({
         view: new xeogl.Lookat({
             eye: [0, 0, 10],
             look: [0, 0, 0],
             up: [0, 1, 0]
         }),
         project: new xeogl.Perspective({
             fovy: 60,
             near: 0.1,
             far: 1000
         })
     }),
     geometry: new xeogl.TorusGeometry()
 });

 entity.scene.on("tick", function () {

     var lookat = entity.camera.view;

     lookat.rotateEyeY(0.5);
     lookat.rotateEyeX(0.3);
 });
 ````
 @class Camera
 @module xeogl
 @submodule camera
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this Camera within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 You only need to supply an ID if you need to be able to find the Camera by ID within its parent {{#crossLink "Scene"}}Scene{{/crossLink}} later.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Camera.
 @param [cfg.view] {String|xeogl.Transform} ID or instance of a view transform within the parent {{#crossLink "Scene"}}Scene{{/crossLink}}. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/view:property"}}{{/crossLink}} transform,
 which is a {{#crossLink "Lookat"}}Lookat{{/crossLink}}.
 @param [cfg.project] {String|xeogl.Transform} ID or instance of a projection transform
 within the parent {{#crossLink "Scene"}}Scene{{/crossLink}}. Defaults to the parent
 {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/project:property"}}{{/crossLink}} transform,
 which is a {{#crossLink "Perspective"}}Perspective{{/crossLink}}.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Camera = xeogl.Component.extend({

        type: "xeogl.Camera",

        _init: function (cfg) {

            this.project = cfg.project;
            this.view = cfg.view;
        },

        _props: {

            /**
             * The projection transform for this Camera.
             *
             * When set to a null or undefined value, will default to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s
             * default {{#crossLink "Scene/project:property"}}project{{/crossLink}}, which is
             * a {{#crossLink "Perspective"}}Perspective{{/crossLink}}.
             *
             * Fires a {{#crossLink "Camera/project:event"}}{{/crossLink}} event on change.
             *
             * @property project
             * @type Transform
             */
            project: {

                set: function (value) {

                    /**
                     * Fired whenever this Camera's {{#crossLink "Camera/project:property"}}{{/crossLink}} property changes.
                     *
                     * @event project
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "project",
                        type: "xeogl.Transform",
                        component: value,
                        sceneDefault: true,
                        on: {
                            matrix: {
                                callback: function () {
                                    this.fire("projectMatrix");
                                },
                                scope: this
                            }
                        }
                    });
                },

                get: function () {
                    return this._attached.project;
                }
            },

            /**
             * The viewing transform for this Camera.
             *
             * When set to a null or undefined value, will default to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s
             * default {{#crossLink "Scene/view:property"}}view{{/crossLink}}, which is a {{#crossLink "Lookat"}}Lookat{{/crossLink}}.
             *
             * Fires a {{#crossLink "Camera/view:event"}}{{/crossLink}} event on change.
             *
             * @property view
             * @type Transform
             */
            view: {

                set: function (value) {

                    /**
                     * Fired whenever this Camera's {{#crossLink "Camera/view:property"}}{{/crossLink}} property changes.
                     *
                     * @event view
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "view",
                        type: "xeogl.Transform",
                        component: value,
                        sceneDefault: true,
                        on: {
                            matrix: {
                                callback: function () {
                                    this.fire("viewMatrix");
                                },
                                scope: this
                            }
                        }
                    });
                },

                get: function () {
                    return this._attached.view;
                }
            }
        },

        _compile: function () {
            this._renderer.projTransform = this._attached.project._state;
            this._renderer.viewTransform = this._attached.view._state;
        },

        _getJSON: function () {
            return { // Will always have the Scene's defaults
                project: this._attached.project.id,
                view: this._attached.view.id
            }
        }
    });

})();
;/**
 A **Canvas** manages a {{#crossLink "Scene"}}Scene{{/crossLink}}'s HTML canvas and its WebGL context.

 ## Overview

 * Each {{#crossLink "Scene"}}Scene{{/crossLink}} provides a Canvas as a read-only property on itself.
 * When a {{#crossLink "Scene"}}Scene{{/crossLink}} is configured with the ID of
 an existing <a href="https://www.w3.org/TR/html5/scripting-1.html#the-canvas-element">HTMLCanvasElement</a>, then
 the Canvas will bind to that, otherwise the Canvas will automatically create its own.
 * A Canvas will fire a {{#crossLink "Canvas/boundary:event"}}{{/crossLink}} event whenever
 the <a href="https://www.w3.org/TR/html5/scripting-1.html#the-canvas-element">HTMLCanvasElement</a> resizes.
 * A Canvas is responsible for obtaining a WebGL context from
 the <a href="https://www.w3.org/TR/html5/scripting-1.html#the-canvas-element">HTMLCanvasElement</a>.
 * A Canvas also fires a {{#crossLink "Canvas/webglContextLost:event"}}{{/crossLink}} event when the WebGL context is
 lost, and a {{#crossLink "Canvas/webglContextRestored:event"}}{{/crossLink}} when it is restored again.
 * The various components within the parent {{#crossLink "Scene"}}Scene{{/crossLink}} will transparently recover on
 the {{#crossLink "Canvas/webglContextRestored:event"}}{{/crossLink}} event.

 <img src="../../../assets/images/Canvas.png"></img>

 Note that a Canvas also has a {{#crossLink "Spinner"}}{{/crossLink}}, which shows a
 busy spinner when a {{#crossLink "Model"}}{{/crossLink}} is loading, or when directed by application logic.

 ## Examples

 * [Multiple canvases/scenes in a page](../../examples/#scene_multipleScenes)
 * [Taking canvas snapshots](../../examples/#canvas_snapshot)
 * [Transparent canvas with background image](../../examples/#canvas_transparent)
 * [Canvas with multiple viewports](../../examples/#canvas_multipleViewports)

 ## Usage

 In the example below, we're creating a {{#crossLink "Scene"}}Scene{{/crossLink}} without specifying an HTML canvas element
 for it. This causes the {{#crossLink "Scene"}}Scene{{/crossLink}}'s Canvas component to create its own default element
 within the page. Then we subscribe to various events fired by that Canvas component.

 ```` javascript
 var scene = new xeogl.Scene();

 // Get the Canvas off the Scene
 // Since we did not configure the Scene with the ID of a DOM canvas element,
 // the Canvas will create its own canvas element in the DOM
 var canvas = scene.canvas;

 // Get the WebGL context off the Canvas
 var gl = canvas.gl;

 // Subscribe to Canvas size updates
 canvas.on("size", function(e) {
        var width = e.width;
        var height = e.height;
        var aspect = e.aspect;
        //...
     });

 // Subscribe to WebGL context loss events on the Canvas
 canvas.on("webglContextLost", function() {
        //...
     });

 // Subscribe to WebGL context restored events on the Canvas
 canvas.on("webglContextRestored", function(gl) {
        var newContext = gl;
        //...
     });
 ````

 When we want to bind the Canvas to an existing HTML canvas element, configure the
 {{#crossLink "Scene"}}{{/crossLink}} with the ID of the element, like this:

 ```` javascript
 // Create a Scene, this time configuring it with the
 // ID of an existing DOM canvas element
 var scene = new xeogl.Scene({
          canvasId: "myCanvas"
     });

 // ..and the rest of this example can be the same as the previous example.

 ````

 The {{#crossLink "Scene"}}{{/crossLink}} will attempt to get use WebGL 2, or fall back on WebGL 1
 if that's absent. If you just want WebGL 1, disable WebGL 2 like so:

 ```` javascript
 var scene = new xeogl.Scene({
          canvasId: "myCanvas",
          webgl2 : true
     });

 // ..and the rest of this example can be the same as the previous examples.

 ````


 @class Canvas
 @module xeogl
 @submodule canvas
 @static
 @param {Scene} scene Parent scene
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Canvas = xeogl.Component.extend({

        type: "xeogl.Canvas",

        serializable: false,

        // Names of recognised WebGL contexts
        _WEBGL_CONTEXT_NAMES: [
            "webgl",
            "experimental-webgl",
            "webkit-3d",
            "moz-webgl",
            "moz-glweb20"
        ],

        _init: function (cfg) {

            /**
             * The HTML canvas. When the {{#crossLink "Viewer"}}{{/crossLink}} was configured with the ID of an existing canvas within the DOM,
             * then this property will be that element, otherwise it will be a full-page canvas that this Canvas has
             * created by default, with a z-index of -10000.
             *
             * @property canvas
             * @type {HTMLCanvasElement}
             * @final
             */
            this.canvas = null;

            /**
             * A transparent HTML DIV overlaid over the {{#crossLink "Canvas/canvas:property"}}{{/crossLink}}, with a z-index
             * of 100000.
             *
             * The parent {{#crossLink "Scene"}}{{/crossLink}}'s {{#crossLink "Input"}}{{/crossLink}} will relay mouse
             * events from this DIV, instead of from the {{#crossLink "Canvas/canvas:property"}}{{/crossLink}}.
             *
             * When you need to have various HTML elements floating around over
             * the {{#crossLink "Canvas/canvas:property"}}{{/crossLink}}, then if you give those a z-index that lies between
             * that of the {{#crossLink "Canvas/canvas:property"}}{{/crossLink}} and this DIV, your elements will not
             * interfere with those events.
             *
             * @property canvas
             * @type {HTMLCanvasElement}
             * @final
             */
            this.overlay = null;

            /**
             * The WebGL rendering context.
             *
             * @property gl
             * @type {WebGLRenderingContext}
             * @final
             */
            this.gl = null;

            /**
             * True when WebGL 2 support is enabled.
             *
             * @property webgl2
             * @type {Boolean}
             * @final
             */
            this.webgl2 = false; // Will set true in _initWebGL if WebGL is requested and we succeed in getting it.

            /**
             * Indicates whether this Canvas is transparent.
             *
             * @property transparent
             * @type {Boolean}
             * @default {false}
             * @final
             */
            this.transparent = !!cfg.transparent;

            /**
             * Attributes for the WebGL context
             *
             * @type {{}|*}
             */
            this.contextAttr = cfg.contextAttr || {};
            this.contextAttr.alpha = this.transparent;
            this.contextAttr.preserveDrawingBuffer = false;

            if (!cfg.canvas) {

                // Canvas not supplied, create one automatically

                this._createCanvas();

            } else {

                // Canvas supplied

                if (xeogl._isString(cfg.canvas)) {

                    // Canvas ID supplied - find the canvas

                    this.canvas = document.getElementById(cfg.canvas);

                    if (!this.canvas) {

                        // Canvas not found - create one automatically

                        this.error("Canvas element not found: " + xeogl._inQuotes(cfg.canvas)
                            + " - creating default canvas instead.");

                        this._createCanvas();
                    }

                } else {

                    this.canvas = cfg.canvas;
                }
            }

            if (!this.canvas) {

                this.error("Faied to create canvas");

                return;
            }

            // If the canvas uses css styles to specify the sizes make sure the basic
            // width and height attributes match or the WebGL context will use 300 x 150

            this.canvas.width = this.canvas.clientWidth;
            this.canvas.height = this.canvas.clientHeight;

            /**
             * Boundary of the Canvas in absolute browser window coordinates.
             *
             * ### Usage:
             *
             * ````javascript
             * var boundary = myScene.canvas.boundary;
             *
             * var xmin = boundary[0];
             * var ymin = boundary[1];
             * var width = boundary[2];
             * var height = boundary[3];
             * ````
             *
             * @property boundary
             * @type {{Array of Number}}
             * @final
             */
            this.boundary = [
                this.canvas.offsetLeft, this.canvas.offsetTop,
                this.canvas.clientWidth, this.canvas.clientHeight
            ];

            this._createBackground();
            this._createOverlay();

            this._resizeBackground();
            this._resizeOverlay();

            // Get WebGL context

            this._initWebGL(cfg);

            // Bind context loss and recovery handlers

            var self = this;

            this.canvas.addEventListener("webglcontextlost",
                function () {

                    /**
                     * Fired whenever the WebGL context has been lost
                     * @event webglContextLost
                     */
                    self.fire("webglContextLost");
                },
                false);

            this.canvas.addEventListener("webglcontextrestored",
                function () {
                    self._initWebGL();
                    if (self.gl) {

                        /**
                         * Fired whenever the WebGL context has been restored again after having previously being lost
                         * @event webglContextRestored
                         * @param value The WebGL context object
                         */
                        self.fire("webglContextRestored", self.gl);
                    }
                },
                false);

            // Publish canvas size and position changes on each scene tick

            var lastWindowWidth = null;
            var lastWindowHeight = null;

            var lastCanvasWidth = null;
            var lastCanvasHeight = null;

            var lastCanvasOffsetLeft = null;
            var lastCanvasOffsetTop = null;

            this._tick = this.scene.on("tick",
                function () {

                    var canvas = self.canvas;

                    var newWindowSize = (window.innerWidth !== lastWindowWidth || window.innerHeight !== lastWindowHeight);
                    var newCanvasSize = (canvas.clientWidth !== lastCanvasWidth || canvas.clientHeight !== lastCanvasHeight);
                    var newCanvasPos = (canvas.offsetLeft !== lastCanvasOffsetLeft || canvas.offsetTop !== lastCanvasOffsetTop);

                    if (newWindowSize || newCanvasSize || newCanvasPos) {

                        self._spinner._adjustPosition();

                        self._resizeBackground();
                        self._resizeOverlay();

                        if (newCanvasSize) {

                            var newWidth = canvas.clientWidth;
                            var newHeight = canvas.clientHeight;

                            // TODO: Wasteful to re-count pixel size of each canvas on each canvas' resize
                            var countPixels = 0;
                            var scene;
                            for (var sceneId in xeogl.scenes) {
                                if (xeogl.scenes.hasOwnProperty(sceneId)) {
                                    scene = xeogl.scenes[sceneId];
                                    countPixels += scene.canvas.canvas.clientWidth * scene.canvas.canvas.clientHeight;
                                }
                            }
                            xeogl.stats.memory.pixels = countPixels;

                            canvas.width = canvas.clientWidth;
                            canvas.height = canvas.clientHeight;

                            var boundary = self.boundary;

                            boundary[0] = canvas.offsetLeft;
                            boundary[1] = canvas.offsetTop;
                            boundary[2] = newWidth;
                            boundary[3] = newHeight;

                            /**
                             * Fired whenever this Canvas's {{#crossLink "Canvas/boundary:property"}}{{/crossLink}} property changes.
                             *
                             * @event boundary
                             * @param value The property's new value
                             */
                            self.fire("boundary", boundary);

                            lastCanvasWidth = newWidth;
                            lastCanvasHeight = newHeight;

                            lastWindowWidth = window.innerWidth;
                            lastWindowHeight = window.innerHeight;
                        }
                    }
                });

            this.canvas.oncontextmenu = function (e) {
                e.preventDefault();
            };

            /**
             *
             */
            this._spinner = new xeogl.Spinner(this.scene, {
                canvas: this.canvas
            });

            // Set property, see definition further down
            this.backgroundColor = cfg.backgroundColor;
            this.backgroundImage = cfg.backgroundImage;
        },

        /**
         * Creates a default canvas in the DOM.
         * @private
         */
        _createCanvas: function () {

            var canvasId = "xeogl-canvas-" + xeogl.math.createUUID();
            var body = document.getElementsByTagName("body")[0];
            var div = document.createElement('div');

            var style = div.style;
            style.height = "100%";
            style.width = "100%";
            style.padding = "0";
            style.margin = "0";
            style.background = "rgba(0,0,0,0);";
            style.float = "left";
            style.left = "0";
            style.top = "0";
            style.position = "absolute";
            style.opacity = "1.0";
            style["z-index"] = "-10000";

            div.innerHTML += '<canvas id="' + canvasId + '" style="width: 100%; height: 100%; float: left; margin: 0; padding: 0;"></canvas>';

            body.appendChild(div);

            this.canvas = document.getElementById(canvasId);
        },

        /**
         * Creates a image element behind the canvas, for purpose of showing a custom background.
         * @private
         */
        _createBackground: function () {

            var body = document.getElementsByTagName("body")[0];
            var div = document.createElement('div');

            var style = div.style;
            style.padding = "0";
            style.margin = "0";
            style.background = null;
            style.backgroundImage = null;
            style.float = "left";
            style.left = "0";
            style.top = "0";
            style.width = "0px";
            style.height = "0px";
            style.position = "absolute";
            style.opacity = 1;
            style["z-index"] = "-20000";

            body.appendChild(div);

            this._backgroundElement = div;
        },

        /**
         * Creates an invisible DIV over the canvas, for purpose of catching
         * input events without interfering with app-lever UI bits floating underneath.
         * @private
         */
        _createOverlay: function () {

            var body = document.getElementsByTagName("body")[0];
            var div = document.createElement('div');

            var style = div.style;
            style.padding = "0";
            style.margin = "0";
            style.background = "black";
            style.float = "left";
            style.left = "0";
            style.top = "0";
            style.width = "0px";
            style.height = "0px";
            style.position = "absolute";
            style.opacity = 0;
            style["z-index"] = "100000";

            body.appendChild(div);

            this.overlay = div;
        },

        /** (Re)sizes the overlay DIV to the canvas size
         * @private
         */
        _resizeOverlay: function () {

            if (!this.canvas || !this.overlay) {
                return;
            }

            var canvas = this.canvas;
            var overlay = this.overlay;
            var overlayStyle = overlay.style;

            var xy = this._getElementXY(canvas);
            overlayStyle["left"] = xy.x + "px";
            overlayStyle["top"] = xy.y + "px";
            overlayStyle["width"] = canvas.clientWidth + "px";
            overlayStyle["height"] = canvas.clientHeight + "px";
        },

        /** (Re)sizes the background DIV to the canvas size
         * @private
         */
        _resizeBackground: function () {

            if (!this.canvas || !this._backgroundElement) {
                return;
            }

            var canvas = this.canvas;
            var background = this._backgroundElement;
            var backgroundStyle = background.style;

            var xy = this._getElementXY(canvas);
            backgroundStyle["left"] = xy.x + "px";
            backgroundStyle["top"] = xy.y + "px";
            backgroundStyle["width"] = canvas.clientWidth + "px";
            backgroundStyle["height"] = canvas.clientHeight + "px";
        },

        _getElementXY: function (e) {
            var x = 0, y = 0;
            while (e) {
                x += (e.offsetLeft-e.scrollLeft);
                y += (e.offsetTop-e.scrollTop);
                e = e.offsetParent;
            }
            return {x: x, y: y};
        },

        /**
         * Initialises the WebGL context
         * @private
         */
        _initWebGL: function (cfg) {

            // Default context attribute values

            if (cfg.webgl2) {
                try {
                    this.gl = this.canvas.getContext("webgl2", this.contextAttr);
                } catch (e) { // Try with next context name
                }
                if (!this.gl) {
                    this.warn('Failed to get a WebGL 2 context - defaulting to WebGL 1.');
                } else {
                    this.webgl2 = true;
                }
            }

            if (!this.gl) {
                for (var i = 0; !this.gl && i < this._WEBGL_CONTEXT_NAMES.length; i++) {
                    try {
                        this.gl = this.canvas.getContext(this._WEBGL_CONTEXT_NAMES[i], this.contextAttr);
                    } catch (e) { // Try with next context name
                    }
                }
            }

            if (!this.gl) {

                this.error('Failed to get a WebGL context');

                /**
                 * Fired whenever the canvas failed to get a WebGL context, which probably means that WebGL
                 * is either unsupported or has been disabled.
                 * @event webglContextFailed
                 */
                this.fire("webglContextFailed", true, true);
            }
        },

        /**
         Returns a snapshot of this Canvas as a Base64-encoded image.

         #### Usage:
         ````javascript
         imageElement.src = myScene.canvas.getSnapshot({
             width: 500, // Defaults to size of canvas
             height: 500,
             format: "png" // Options are "jpeg" (default), "png" and "bmp"
         });
         ````

         @method getSnapshot
         @param {*} [params] Capture options.
         @param {Number} [params.width] Desired width of result in pixels - defaults to width of canvas.
         @param {Number} [params.height] Desired height of result in pixels - defaults to height of canvas.
         @param {String} [params.format="jpeg"] Desired format; "jpeg", "png" or "bmp".
         @returns {String} String-encoded image data.
         */
        getSnapshot: function (params) {

            if (!this.canvas) {
                this.error("Can't get snapshot - no canvas.");
                return;
            }

            // Force-render a frame
            this.scene.render();

            params = params || {};

            var width = params.width || this.canvas.width;
            var height = params.height || this.canvas.height;
            var format = params.format || "jpeg";
            var image;

            switch (format) {
                case "jpeg":
                    image = Canvas2Image.saveAsJPEG(this.canvas, true, width, height);
                    break;

                case "png":
                    image = Canvas2Image.saveAsPNG(this.canvas, true, width, height);
                    break;

                case "bmp":
                    image = Canvas2Image.saveAsBMP(this.canvas, true, width, height);
                    break;

                default:
                    this.error("Unsupported snapshot format: '" + format
                        + "' - supported types are 'jpeg', 'bmp' and 'png' - defaulting to 'jpeg'");
                    image = Canvas2Image.saveAsJPEG(this.canvas, true, width, height);
            }

            return image.src;
        },

        /**
         Reads colors of pixels from the last rendered frame.

         <p>Call this method like this:</p>

         ````JavaScript

         // Ignore transparent pixels (default is false)
         var opaqueOnly = true;

         var colors = new Float32Array(8);

         myCanvas.readPixels([ 100, 22, 12, 33 ], colors, 2, opaqueOnly);
         ````

         Then the r,g,b components of the colors will be set to the colors at those pixels.

         @param {Float32Array} pixels
         @param {Float32Array} colors
         @param {Number} size
         @param {Boolean} opaqueOnly
         */
        readPixels: function (pixels, colors, size, opaqueOnly) {
            return this.scene._renderer.readPixels(pixels, colors, size, opaqueOnly);
        },

        _props: {

            /**
             A background color for the canvas. This is overridden by {{#crossLink "Canvas/backgroundImage:property"}}{{/crossLink}}.

             You can set this to a new color at any time.

             Fires a {{#crossLink "Canvas/backgroundColor:event"}}{{/crossLink}} event on change.

             @property backgroundColor
             @type Float32Array
             @default null
             */
            backgroundColor: {

                set: function (value) {

                    if (!value) {

                        this._backgroundColor = null;

                    } else {

                        (this._backgroundColor = this._backgroundColor || new xeogl.math.vec4()).set(value || [0, 0, 0, 1]);

                        if (!this._backgroundImageSrc) {
                            var rgb = "rgb(" + Math.round(this._backgroundColor[0] * 255) + ", " + Math.round(this._backgroundColor[1] * 255) + "," + Math.round(this._backgroundColor[2] * 255) + ")";
                            this._backgroundElement.style.background = rgb;
                        }
                    }

                    /**
                     Fired whenever this Canvas's {{#crossLink "Canvas/backgroundColor:property"}}{{/crossLink}} property changes.
                     @event backgroundColor
                     @param value The property's new value
                     */
                    this.fire("backgroundColor", this._backgroundColor);
                },

                get: function () {
                    return this._backgroundColor;
                }
            },

            /**
             URL of a background image for the canvas. This is overrided by {{#crossLink "Canvas/backgroundColor/property"}}{{/crossLink}}.

             You can set this to a new file path at any time.

             Fires a {{#crossLink "Canvas/background:event"}}{{/crossLink}} event on change.

             @property backgroundImage
             @type String
             */
            backgroundImage: {

                set: function (value) {

                    if (!value) {
                        return;
                    }

                    if (!xeogl._isString(value)) {
                        this.error("Value for 'backgroundImage' should be a string");
                        return;
                    }

                    if (value === this._backgroundImageSrc) { // Already loaded this image
                        return;
                    }

                    this._backgroundElement.style.backgroundImage = "url('" + value + "')";
                    this._backgroundImageSrc = value;

                    if (!this._backgroundImageSrc) {
                        var rgb = "rgb(" + Math.round(this._backgroundColor[0] * 255) + ", " + Math.round(this._backgroundColor[1] * 255) + "," + Math.round(this._backgroundColor[2] * 255) + ")";
                        this._backgroundElement.style.background = rgb;
                    }

                    /**
                     Fired whenever this Canvas's {{#crossLink "Canvas/backgroundImage:property"}}{{/crossLink}} property changes.
                     @event backgroundImage
                     @param value The property's new value
                     */
                    this.fire("backgroundImage", this._backgroundImageSrc);
                },

                get: function () {
                    return this._backgroundImageSrc;
                }
            },

            /**
             The busy {{#crossLink "Spinner"}}{{/crossLink}} for this Canvas.

             @property spinner
             @type Spinner
             @final
             */
            spinner: {

                get: function () {
                    return this._spinner;
                }
            }
        },

        _destroy: function () {
            this.scene.off(this._tick);
        }
    });

})();
;/**
 A Spinner displays a spinner animation at the center of its {{#crossLink "Canvas"}}{{/crossLink}} while things are loading or otherwise busy.

 ## Overview

 * Spinners are normally shown by {{#crossLink "Model"}}Models{{/crossLink}} while they are loading, however they may also
 be shown by any application code that wants to indicate business.
 * By default, they are also shown by components that load assets, such as {{#crossLink "Texture"}}{{/crossLink}}. You
 can disable that by flipping the Spinner's {{#crossLink "Spinner/textures:property"}}{{/crossLink}} property.
 * A Spinner component has a {{#crossLink "Spinner/processes:property"}}{{/crossLink}} count that indicates how many
 active processes it currently represents. As a process starts, a process would increment {{#crossLink "Spinner/processes:property"}}{{/crossLink}}, then as it
 completes (or fails), would decrement it again.
 * A Spinner is only visible while {{#crossLink "Spinner/processes:property"}}{{/crossLink}} is greater than zero.

 <img src="../../../assets/images/Spinner.png"></img>

 ## Examples

 * [Loading glTF model with spinner](../../examples/#importing_gltf_gearbox)

 ## Usage

 ````javascript
 var spinner = myScene.canvas.spinner;

 // Increment count of busy processes represented by the spinner;
 // assuming the count was zero, this now shows the spinner
 spinner.processes++;

 // Increment the count again, by some other process;
 // spinner already visible, now requires two decrements
 // before it becomes invisible again
 spinner.processes++;

 // Decrement the count; count still greater
 // than zero, so spinner remains visible
 spinner.process--;

 // Decrement the count; count now zero,
 // so spinner becomes invisible
 spinner.process--;
````

 By default, a Spinner shows while resources are loading for components like
 {{#crossLink "Texture"}}{{/crossLink}}. We can disable that like this:

 ````javascript
 // Don't show while resources are loading for Textures etc.
 spinner.textures = false;
 ````

 @class Spinner
 @module xeogl
 @submodule canvas
 @extends Component
 */
(function () {

    "use strict";

    // Ensures lazy-injected CSS only injected once  
    var spinnerCSSInjected = false;

    xeogl.Spinner = xeogl.Component.extend({

        type: "xeogl.Spinner",

        serializable: false,

        _init: function (cfg) {

            this._canvas = cfg.canvas;

            this._injectSpinnerCSS();

            // Create spinner elements

            var body = document.getElementsByTagName("body")[0];
            var div = document.createElement('div');
            var style = div.style;

            style["z-index"] = "9000";
            style.position = "absolute";

            div.innerHTML = '<div class="sk-fading-circle">\
                <div class="sk-circle1 sk-circle"></div>\
                <div class="sk-circle2 sk-circle"></div>\
                <div class="sk-circle3 sk-circle"></div>\
                <div class="sk-circle4 sk-circle"></div>\
                <div class="sk-circle5 sk-circle"></div>\
                <div class="sk-circle6 sk-circle"></div>\
                <div class="sk-circle7 sk-circle"></div>\
                <div class="sk-circle8 sk-circle"></div>\
                <div class="sk-circle9 sk-circle"></div>\
                <div class="sk-circle10 sk-circle"></div>\
                <div class="sk-circle11 sk-circle"></div>\
                <div class="sk-circle12 sk-circle"></div>\
                </div>';

            body.appendChild(div);
            this._element = div;

            this._adjustPosition();

            this.processes = 0;

            this.textures = cfg.textures;
        },

        _props: {

            /**
             * Whether Spinner shows while images are loading for components like {{#crossLink "Texture"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "Spinner/textures:event"}}{{/crossLink}} event on change.
             *
             * @property textures
             * @default true
             * @type Boolean
             */
            textures: {

                set: function (value) {

                    value = value !== false;

                    this._textures = value;
                    
                    /**
                     * Fired whenever this Spinner's  {{#crossLink "Spinner/textures:property"}}{{/crossLink}} property changes.
                     *
                     * @event textures
                     * @param value The property's new value
                     */
                    this.fire("textures", this._textures);
                },

                get: function () {
                    return this._textures;
                }
            },

            /**
             The number of processes this Spinner represents.

             The Spinner is visible while this property is greater than zero.

             Increment this property whenever you commence some process during which you want
             the Spinner to be visible, then decrement it again when the process is complete.

             Clamps to zero if you attempt to set to to a negative value.

             Fires a {{#crossLink "Spinner/processes:event"}}{{/crossLink}} event on change.

             @property processes
             @default 0
             @type Number
             */
            processes: {

                set: function (value) {

                    value = value || 0;

                    if (this._processes === value) {
                        return;
                    }

                    if (value < 0) {
                        return;
                    }

                    this._processes = value;

                    this._element.style["visibility"] = (this._processes > 0) ? "visible" : "hidden";

                    /**
                     Fired whenever this Spinner's {{#crossLink "Spinner/visible:property"}}{{/crossLink}} property changes.

                     @event processes
                     @param value The property's new value
                     */
                    this.fire("processes", this._processes);
                },

                get: function () {
                    return this._processes;
                }
            }
        },

        // (Re)positions spinner DIV over the center of the canvas
        _adjustPosition: function () {

            if (!this._canvas || !this._element) {
                return;
            }

            var canvas = this._canvas;
            var spinner = this._element;
            var spinnerStyle = spinner.style;

            spinnerStyle["left"] = (canvas.offsetLeft + (canvas.clientWidth * 0.5) - (spinner.clientWidth * 0.5)) + "px";
            spinnerStyle["top"] = (canvas.offsetTop + (canvas.clientHeight * 0.5) - (spinner.clientHeight * 0.5)) + "px";
        },

        _injectSpinnerCSS: function () {
            if (spinnerCSSInjected) {
                return;
            }
            var node = document.createElement('style');
            node.innerHTML = this._spinnerCSS;
            document.body.appendChild(node);
            spinnerCSSInjected = true;
        },

        _spinnerCSS: ".sk-fading-circle {\
        margin: 100px auto;\
        width: 100px;\
        height:100px;\
        position: relative;\
        }\
        .sk-fading-circle .sk-circle {\
        width: 120%;\
        height: 120%;\
        position: absolute;\
        left: 0;\
        top: 0;\
        }\
        .sk-fading-circle .sk-circle:before {\
        content: '';\
        display: block;\
        margin: 0 auto;\
        width: 15%;\
        height: 15%;\
        background-color: #ff8800;\
        border-radius: 100%;\
        -webkit-animation: sk-circleFadeDelay 1.2s infinite ease-in-out both;\
        animation: sk-circleFadeDelay 1.2s infinite ease-in-out both;\
        }\
        .sk-fading-circle .sk-circle2 {\
        -webkit-transform: rotate(30deg);\
        -ms-transform: rotate(30deg);\
        transform: rotate(30deg);\
    }\
    .sk-fading-circle .sk-circle3 {\
        -webkit-transform: rotate(60deg);\
        -ms-transform: rotate(60deg);\
        transform: rotate(60deg);\
    }\
    .sk-fading-circle .sk-circle4 {\
        -webkit-transform: rotate(90deg);\
        -ms-transform: rotate(90deg);\
        transform: rotate(90deg);\
    }\
    .sk-fading-circle .sk-circle5 {\
        -webkit-transform: rotate(120deg);\
        -ms-transform: rotate(120deg);\
        transform: rotate(120deg);\
    }\
    .sk-fading-circle .sk-circle6 {\
        -webkit-transform: rotate(150deg);\
        -ms-transform: rotate(150deg);\
        transform: rotate(150deg);\
    }\
    .sk-fading-circle .sk-circle7 {\
        -webkit-transform: rotate(180deg);\
        -ms-transform: rotate(180deg);\
        transform: rotate(180deg);\
    }\
    .sk-fading-circle .sk-circle8 {\
        -webkit-transform: rotate(210deg);\
        -ms-transform: rotate(210deg);\
        transform: rotate(210deg);\
    }\
    .sk-fading-circle .sk-circle9 {\
        -webkit-transform: rotate(240deg);\
        -ms-transform: rotate(240deg);\
        transform: rotate(240deg);\
    }\
    .sk-fading-circle .sk-circle10 {\
        -webkit-transform: rotate(270deg);\
        -ms-transform: rotate(270deg);\
        transform: rotate(270deg);\
    }\
    .sk-fading-circle .sk-circle11 {\
        -webkit-transform: rotate(300deg);\
        -ms-transform: rotate(300deg);\
        transform: rotate(300deg);\
    }\
    .sk-fading-circle .sk-circle12 {\
        -webkit-transform: rotate(330deg);\
        -ms-transform: rotate(330deg);\
        transform: rotate(330deg);\
    }\
    .sk-fading-circle .sk-circle2:before {\
        -webkit-animation-delay: -1.1s;\
        animation-delay: -1.1s;\
    }\
    .sk-fading-circle .sk-circle3:before {\
        -webkit-animation-delay: -1s;\
        animation-delay: -1s;\
    }\
    .sk-fading-circle .sk-circle4:before {\
        -webkit-animation-delay: -0.9s;\
        animation-delay: -0.9s;\
    }\
    .sk-fading-circle .sk-circle5:before {\
        -webkit-animation-delay: -0.8s;\
        animation-delay: -0.8s;\
    }\
    .sk-fading-circle .sk-circle6:before {\
        -webkit-animation-delay: -0.7s;\
        animation-delay: -0.7s;\
    }\
    .sk-fading-circle .sk-circle7:before {\
        -webkit-animation-delay: -0.6s;\
        animation-delay: -0.6s;\
    }\
    .sk-fading-circle .sk-circle8:before {\
        -webkit-animation-delay: -0.5s;\
        animation-delay: -0.5s;\
    }\
    .sk-fading-circle .sk-circle9:before {\
        -webkit-animation-delay: -0.4s;\
        animation-delay: -0.4s;\
    }\
    .sk-fading-circle .sk-circle10:before {\
        -webkit-animation-delay: -0.3s;\
        animation-delay: -0.3s;\
    }\
    .sk-fading-circle .sk-circle11:before {\
        -webkit-animation-delay: -0.2s;\
        animation-delay: -0.2s;\
    }\
    .sk-fading-circle .sk-circle12:before {\
        -webkit-animation-delay: -0.1s;\
        animation-delay: -0.1s;\
    }\
    @-webkit-keyframes sk-circleFadeDelay {\
        0%, 39%, 100% { opacity: 0; }\
        40% { opacity: 1; }\
    }\
    @keyframes sk-circleFadeDelay {\
        0%, 39%, 100% { opacity: 0; }\
        40% { opacity: 1; }\
    }"
    });
})();
;/**
 * Components for cross-section views of Entities.
 *
 * @module xeogl
 * @submodule clipping
 */;/**
 A **Clip** is an arbitrarily-aligned World-space clipping plane used to create
 cross-section views of associated {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 * These are grouped within {{#crossLink "Clips"}}Clips{{/crossLink}} components, which are attached to
 {{#crossLink "Entity"}}Entities{{/crossLink}}. See the {{#crossLink "Clips"}}Clips{{/crossLink}} documentation
 for more info.
 * A Clip is specified in World-space, as being perpendicular to a vector {{#crossLink "Clip/dir:property"}}{{/crossLink}}
 that emanates from the origin, offset at a distance {{#crossLink "Clip/dist:property"}}{{/crossLink}} along that vector.
 * You can move a Clip back and forth along its vector by varying {{#crossLink "Clip/dist:property"}}{{/crossLink}}.
 * Likewise, you can rotate a Clip about the origin by rotating the {{#crossLink "Clip/dir:property"}}{{/crossLink}} vector.
 * A Clip is has a {{#crossLink "Clip/mode:property"}}{{/crossLink}},  which indicates whether it is disabled
 ("disabled"), discarding fragments that fall on the origin-side of the plane ("inside"), or clipping fragments that
 fall on the other side of the plane from the origin ("outside").
 * You can update the {{#crossLink "Clip/mode:property"}}{{/crossLink}} of a Clip to activate or deactivate it, or to
 switch which side it discards fragments from.
 * Clipping may also be enabled or disabled for specific {{#crossLink "Entity"}}Entities{{/crossLink}}
 via the {{#crossLink "Modes/clipping:property"}}{{/crossLink}} flag on {{#crossLink "Modes"}}Modes{{/crossLink}} components
 attached to those {{#crossLink "Entity"}}Entities{{/crossLink}}.


 <img src="../../../assets/images/Clip.png"></img>

 ## Usage


 * In this example we have an {{#crossLink "Entity"}}{{/crossLink}} that's clipped by a {{#crossLink "Clips"}}{{/crossLink}}
 that contains two {{#crossLink "Clip"}}{{/crossLink}} planes.
 * The first {{#crossLink "Clip"}}{{/crossLink}} plane is on the
 positive diagonal, while the second is on the negative diagonal.
 * The {{#crossLink "Entity"}}Entity's{{/crossLink}}
 {{#crossLink "Geometry"}}{{/crossLink}} is a box, and the planes will clip off two of the box's corners.


 ````javascript
 // Create a set of Clip planes
 clips = new xeogl.Clip({
     clips: [

         // Clip plane on negative diagonal
         new xeogl.Clip({
             dir: [-1.0, -1.0, -1.0], // Direction of Clip from World space origin
             dist: 2.0,               // Distance along direction vector
             mode: "outside"          // Clip fragments that fall beyond the plane
         }),

         // Clip plane on positive diagonal
         new xeogl.Clip({
             dir: [1.0, 1.0, 1.0],
             dist: 2.0,
             mode: "outside"
         })
     ]
 });

 // Create an Entity that's clipped by our Clip planes
 var entity = new xeogl.Entity({
     geometry: new xeogl.BoxGeometry(),
     clips: clips
 });
 ````

 ### Toggling clipping on and off

 Now we'll attach a {{#crossLink "Modes"}}{{/crossLink}} to the {{#crossLink "Entity"}}{{/crossLink}}, so that we can
 enable or disable clipping of it:

 ```` javascript
 entity.modes = new xeogl.Modes(scene, {
    clipping: true
 });

 // Disable clipping for the Entity
 entity.modes.clipping = false;
 ````

 @class Clip
 @module xeogl
 @submodule clipping
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Clip in the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Clip configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 You only need to supply an ID if you need to be able to find the Clip by ID within the {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Clip.
 @param [cfg.mode="disabled"] {String} Clipping mode - "disabled" to clip nothing, "inside" to reject points inside the plane, "outside" to reject points outside the plane.
 @param [dir= [1, 0, 0]] {Array of Number} The direction of the clipping plane from the World-space origin.
 @param [dist=1.0] {Number} Distance to the clipping plane along the direction vector.

 @extends Component
 */
(function () {

    "use strict";

    xeogl.Clip = xeogl.Component.extend({

        type: "xeogl.Clip",

        _init: function (cfg) {

            this._state = {
                mode: "disabled",
                dir: [1,0,0],
                dist: 1.0
            };

            this.mode = cfg.mode;
            this.dir = cfg.dir;
            this.dist = cfg.dist;
        },

        _props: {

            /**
             The current mode of this Clip.

             Possible states are:


             * "disabled" - inactive
             * "inside" - clipping fragments that fall within the half-space on the origin-side of the Clip plane
             * "outside" - clipping fragments that fall on the other side of the Clip plane from the origin


             Fires a {{#crossLink "Clip/mode:event"}}{{/crossLink}} event on change.

             @property mode
             @default "disabled"
             @type String
             */
            mode: {

                set: function (value) {

                    this._state.mode =  value || "disabled";

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Clip's {{#crossLink "Clip/mode:property"}}{{/crossLink}} property changes.

                     @event mode
                     @param value {String} The property's new value
                     */
                    this.fire("mode", this._state.mode);
                },

                get: function () {
                    return this._state.mode;
                }
            },

            /**
             A vector emanating from the World-space origin that indicates the orientation of this Clip plane.

             The Clip plane will be oriented perpendicular to this vector.

             Fires a {{#crossLink "Clip/dir:event"}}{{/crossLink}} event on change.

             @property dir
             @default [1.0, 1.0, 1.0]
             @type Float32Array
             */
            dir: {

                set: function (value) {

                    this._state.dir =  value || xeogl.math.vec3([1, 0, 0]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Clip's {{#crossLink "Clip/dir:property"}}{{/crossLink}} property changes.

                     @event dir
                     @param  value  {Float32Array} The property's new value
                     */
                    this.fire("dir", this._state.dir);
                },

                get: function () {
                    return this._state.dir;
                }
            },

            /**
             The position of this Clip along the vector indicated by {{#crossLink "Clip/dir:property"}}{{/crossLink}}.

             This is the distance of the Clip plane from the World-space origin.

             Fires a {{#crossLink "Clip/dist:event"}}{{/crossLink}} event on change.

             @property dist
             @default 1.0
             @type Number
             */
            dist: {

                set: function (value) {

                    this._state.dist = value !== undefined ? value : 1.0;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Clip's {{#crossLink "Clip/dist:property"}}{{/crossLink}} property changes.

                     @event dist
                     @param  value Number The property's new value
                     */
                    this.fire("dist", this._state.dist);
                },

                get: function () {
                    return this._state.dist;
                }
            }
        },

        _getJSON: function () {
            return {
                mode: this._state.mode,
                dir: this._state.dir,
                dist: this._state.dist
            };
        }
    });

})();
;/**

 A **Clips** is a group of arbitrarily-aligned World-space {{#crossLink "Clip"}}Clip{{/crossLink}} planes, which may be used to create
 cross-section views of attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview


 * Each {{#crossLink "Clip"}}Clip{{/crossLink}} is specified in World-space, as being perpendicular to a vector
 {{#crossLink "Clip/dir:property"}}{{/crossLink}} that emanates from the origin, offset at a
 distance {{#crossLink "Clip/dist:property"}}{{/crossLink}} along that vector.
 * You can move each {{#crossLink "Clip"}}Clip{{/crossLink}} back and forth along its vector by varying
 its {{#crossLink "Clip/dist:property"}}{{/crossLink}}.
 * Likewise, you can rotate each {{#crossLink "Clip"}}Clip{{/crossLink}} about the origin by rotating
 its {{#crossLink "Clip/dir:property"}}{{/crossLink}} vector.
 * Each {{#crossLink "Clip"}}Clip{{/crossLink}} is has a {{#crossLink "Clip/mode:property"}}{{/crossLink}}, which indicates whether it is disabled ("disabled"), discarding fragments that fall on the origin-side of the plane ("inside"), or clipping fragments that fall on the other side of the plane from the origin ("outside").
 * You can update each {{#crossLink "Clip"}}Clip{{/crossLink}}'s {{#crossLink "Clip/mode:property"}}{{/crossLink}} to
 activate or deactivate it, or to switch which side it discards fragments from.
 * Clipping may also be enabled or disabled for specific {{#crossLink "Entity"}}Entities{{/crossLink}}
 via the {{#crossLink "Modes/clipping:property"}}{{/crossLink}} flag on {{#crossLink "Modes"}}Modes{{/crossLink}} components
 attached to those {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <img src="../../../assets/images/Clips.png"></img>

 ## Usage

 See {{#crossLink "Clip"}}{{/crossLink}} for an example.

 @class Clips
 @module xeogl
 @submodule clipping
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Clips in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Clips.
 @param [cfg.clips] {Array(String)|Array(xeogl.Clip)} Array containing either IDs or instances of
 {{#crossLink "Clip"}}Clip{{/crossLink}} components within the parent {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Clips = xeogl.Component.extend({

        type: "xeogl.Clips",

        _init: function (cfg) {

            // Renderer state contains the states of the child Clip components
            this._state = new xeogl.renderer.Clips({

                clips: [],

                hash: ""
            });

            this._dirty = true;

            // Array of child Clip components
            this._clips = [];

            // Subscriptions to "dirty" events from child Clip components
            this._dirtySubs = [];

            // Subscriptions to "destroyed" events from child Clip components
            this._destroyedSubs = [];

            // Add initial Clip components
            this.clips = cfg.clips;
        },

        _props: {

            /**
             * The clipping planes contained within this Clips.
             *
             * Fires a {{#crossLink "Clips/clips:event"}}{{/crossLink}} event on change.
             *
             * @property clips
             * @default []
             * @type Array(xeogl.Clip)
             */
            clips: {

                set: function (value) {

                    value = value || [];

                    var clip;
                    var i;
                    var len;
                    var id;

                    // Unsubscribe from events on old clips
                    for (i = 0, len = this._clips.length; i < len; i++) {

                        clip = this._clips[i];

                        clip.off(this._dirtySubs[i]);
                        clip.off(this._destroyedSubs[i]);
                    }

                    this._clips = [];

                    this._dirtySubs = [];
                    this._destroyedSubs = [];

                    var self = this;

                    function clipDirty() {
                        self.fire("dirty", true);
                    }

                    function clipDestroyed() {

                        var id = this.id; // Clip ID

                        for (var i = 0, len = self._clips.length; i < len; i++) {

                            if (self._clips[i].id === id) {

                                self._clips = self._clips.slice(i, i + 1);

                                self._dirtySubs = self._dirtySubs.slice(i, i + 1);
                                self._destroyedSubs = self._destroyedSubs.slice(i, i + 1);

                                self._dirty = true;

                                self.fire("dirty", true);
                                self.fire("clips", self._clips);

                                return;
                            }
                        }
                    }

                    for (i = 0, len = value.length; i < len; i++) {

                        clip = value[i];

                        if (xeogl._isString(clip)) {

                            // ID given for clip - find the clip component

                            id = clip;

                            clip = this.components[id];

                            if (!clip) {
                                this.error("Component not found: " + xeogl._inQuotes(id));
                                continue;
                            }
                        }

                        if (clip.type !== "xeogl.Clip") {
                            this.error("Component " + xeogl._inQuotes(id) + " is not a xeogl.Clip");
                            continue;
                        }

                        this._clips.push(clip);

                        this._dirtySubs.push(clip.on("dirty", clipDirty));

                        this._destroyedSubs.push(clip.on("destroyed", clipDestroyed));
                    }

                    this._dirty = true;

                    /**
                     Fired whenever this Clips' {{#crossLink "Clips/clips:property"}}{{/crossLink}} property changes.
                     @event clips
                     @param value {Array of xeogl.Clip} The property's new value
                     */
                    this.fire("dirty", true);
                    this.fire("clips", this._clips);
                },

                get: function () {
                    return this._clips.slice(0, this._clips.length);
                }
            }
        },

        _compile: function () {

            var state = this._state;

            if (this._dirty) {

                state.clips = [];

                for (var i = 0, len = this._clips.length; i < len; i++) {
                    state.clips.push(this._clips[i]._state);
                }

                this._makeHash();

                this._dirty = false;
            }

            this._renderer.clips = state;
        },

        _makeHash: function () {

            var clips = this._state.clips;

            if (clips.length === 0) {
                return ";";
            }

            var clip;
            var hash = [];

            for (var i = 0, len = clips.length; i < len; i++) {

                clip = clips[i];

                hash.push(clip._state.mode);
            }

            hash.push(";");

            this._state.hash = hash.join("");
        },

        _getJSON: function () {

            var clipIds = [];

            for (var i = 0, len = this._clips.length; i < len; i++) {
                clipIds.push(this._clips[i].id);
            }

            return {
                clips: clipIds
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 * Components for managing Scene configuration.
 *
 * @module xeogl
 * @submodule configs
 */;/**
 A **Configs** holds configuration properties for the parent {{#crossLink "Scene"}}Scene{{/crossLink}}.

 ## Overview


 * Each {{#crossLink "Scene"}}Scene{{/crossLink}} provides a Configs on itself as a read-only property.
 * Config property values are set on a Configs using its {{#crossLink "Configs/set:method"}}{{/crossLink}} method,
 and changes to properties may be subscribed to using {{#crossLink "Component/on:method"}}{{/crossLink}}.
 * You can define your own properties in a Configs, but take care not to clobber the native properties used by
 xeogl (see table below).


 <img src="../../../assets/images/Configs.png"></img>

 ## Native xeogl config properties

 Don't use the following names for your own Configs properties, because these are already used by xeogl:

 | Name  | Description  |
 |---|---|
 | TODO  | TODO  |
 | TODO  | TODO  |


 ## Usage

 In this example, we're subscribing to change events for a {{#crossLink "Scene"}}Scene's{{/crossLink}} "foo" configuration property, then updating that
 property, which fires a change event.

 ````Javascript
 var scene = new xeogl.Scene();

 var configs = scene.configs;

 // Subscribe to change of a Configs property.
 // The subscriber is also immediately notified of the current value via the callback.
 configs.on("foo", function(value) {
    console.log("foo = " + value);
});

 // Create and set a Configs property, firing our change handler:
 configs.set("foo", "Hello!");

 // Read the current value of a Configs property.
 // Normally we would asynchronously subscribe with #on though, to be sure that
 // we're getting the latest changes to the property.
 var bar = configs.props["bar"];
 ````

 @class Configs
 @module xeogl
 @submodule configs
 @constructor
 @param [scene] {Scene} Parent scene - creates this component in the default scene when omitted.
 @param {Object} [cfg]  Config values.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Configs = xeogl.Component.extend({

        type: "xeogl.Configs",

        _init: function (cfg) {

            this.props = {};

            for (var key in cfg) {
                if (cfg.hasOwnProperty(key)) {
                    this.set(key, cfg[key]);
                }
            }
        },

        /**
         * Sets a property on this Configs.
         *
         * Fires an event with the same name as the property. Existing subscribers to the event will be
         * notified immediately of the property value. Like all events on a Component, this Configs will
         * retain the event, to notify any subscribers that are attached subsequently.
         *
         * @method set
         * @param {String} name The property name
         * @param {Object} value The property value
         * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers
         */
        set: function (name, value) {

            this.props[name] = value;

            this.fire(name, value);
        },

        _toJSON: function () {
            return xeogl._copy(this.props);
        }
    });

})();
;/**
 * Components for controlling things with user input.
 *
 * @module xeogl
 * @submodule controls
 */;/**
 A **CameraControl** pans, rotates and zooms a {{#crossLink "Camera"}}{{/crossLink}} with the mouse and keyboard,
 as well as switches it between preset left, right, anterior, posterior, superior and inferior views.

 A CameraControl contains the following control sub-components, each of which handle an aspect of interaction:

 * {{#crossLink "KeyboardPanCamera"}}{{/crossLink}} pans the camera with the W,S,A,D,X and Z keys
 * {{#crossLink "MousePanCamera"}}{{/crossLink}} pans horizontally and vertically by dragging the mouse with left and right buttons down
 * {{#crossLink "KeyboardRotateCamera"}}{{/crossLink}} rotates the camera with the arrow keys
 * {{#crossLink "MouseRotateCamera"}}{{/crossLink}} rotates the camera by dragging with the left mouse button down
 * {{#crossLink "KeyboardZoomCamera"}}{{/crossLink}} zooms the *eye* position closer and further from the *look* position with the + and - keys
 * {{#crossLink "MouseZoomCamera"}}{{/crossLink}} zooms the *eye* closer and further from *look* using the mousewheel
 * {{#crossLink "KeyboardAxisCamera"}}{{/crossLink}} between preset left, right, anterior, posterior, superior and inferior views using keys 1-6
 * {{#crossLink "MousePickEntity"}}{{/crossLink}} TODO
 * {{#crossLink "cameraFlightAnimation"}}{{/crossLink}} TODO

 A CameraControl provides these control sub-components as read-only properties, which allows them to be individually configured (or deactivated) as required.

 * Activating or deactivating a CameraControl will activate or deactivate all its control sub-components.
 * Attaching a different {{#crossLink "Camera"}}{{/crossLink}} to the CameraControl will also attach that
 {{#crossLink "Camera"}}{{/crossLink}} to all the control sub-components.
 * The control sub-components are not supposed to be re-attached to a different {{#crossLink "Camera"}}{{/crossLink}} than the owner CameraControl.
 * A CameraControl manages the life-cycles of its control sub-components, destroying them when the CameraControl is destroyed.

 <img src="../../../assets/images/CameraControl.png"></img>

 ## Examples

 * [CameraControl example](../../examples/#interaction_CameraControl)
 * [KeyboardRotateCamera example](../../examples/#interaction_KeyboardRotateCamera)
 * [KeyboardPanCamera example](../../examples/#interaction_KeyboardPanCamera)
 * [KeyboardZoomCamera example](../../examples/#interaction_KeyboardZoomCamera)
 * [KeyboardRotateCamera example](../../examples/#interaction_KeyboardRotateCamera)
 * [KeyboardPanCamera example](../../examples/#interaction_KeyboardPanCamera)
 * [KeyboardZoomCamera example](../../examples/#interaction_KeyboardZoomCamera)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 var cameraControl = new xeogl.CameraControl({
     camera: entity.camera,

     // "First person" mode rotates look about eye.
     // By default however, we orbit eye about look.
     firstPerson: false
 });

 // Reduce the sensitivity of mouse rotation
 cameraControl.mouseRotate.sensitivity = 0.7;

 // Disable switching between preset views
 cameraControl.keyboardAxis.active = false;
 ````

 @class CameraControl
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this CameraControl.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this CameraControl. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.active=true] {Boolean} Whether or not this CameraControl is active.
 @param [firstPerson=false] {Boolean} Whether or not this CameraControl is in "first person" mode.
 @extends Component
 */
(function () {

    "use strict";


    xeogl.CameraControl = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.CameraControl",

        /**
         Indicates that only one instance of a CameraControl may be active within
         its {{#crossLink "Scene"}}{{/crossLink}} at a time. When a CameraControl is activated, that has
         a true value for this flag, then any other active CameraControl will be deactivated first.

         @property exclusive
         @type Boolean
         @final
         */
        exclusive: true,

        _init: function (cfg) {

            var scene = this.scene;

            // Shows a bounding box around each Entity we fly to
            this._boundaryHelper = this.create({
                type: "xeogl.Entity",
                geometry: this.create({
                    type: "xeogl.AABBGeometry"
                }),
                material: this.create({
                    type: "xeogl.PhongMaterial",
                    diffuse: [0, 0, 0],
                    ambient: [0, 0, 0],
                    specular: [0, 0, 0],
                    emissive: [1.0, 1.0, 0.6],
                    lineWidth: 4
                }),
                visibility: this.create({
                    type: "xeogl.Visibility",
                    visible: false
                }),
                modes: this.create({
                    type: "xeogl.Modes",
                    // Does not contribute to the size of any enclosing boundaries
                    // that might be calculated by xeogl, eg. like that returned by xeogl.Scene#worldBoundary
                    collidable: false
                })
            });

            /**
             * The {{#crossLink "KeyboardAxisCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property keyboardAxis
             * @final
             * @type KeyboardAxisCamera
             */
            this.keyboardAxis = this.create(xeogl.KeyboardAxisCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "KeyboardRotateCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property keyboardOrbit
             * @final
             * @type KeyboardRotateCamera
             */
            this.keyboardRotate = this.create(xeogl.KeyboardRotateCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "MouseRotateCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property mouseRotate
             * @final
             * @type MouseRotateCamera
             */
            this.mouseRotate = this.create(xeogl.MouseRotateCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "KeyboardPanCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property keyboardPan
             * @final
             * @type KeyboardPanCamera
             */
            this.keyboardPan = this.create(xeogl.KeyboardPanCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "MousePanCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property mousePan
             * @final
             * @type MousePanCamera
             */
            this.mousePan = this.create(xeogl.MousePanCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "KeyboardZoomCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property keyboardZoom
             * @final
             * @type KeyboardZoomCamera
             */
            this.keyboardZoom = this.create(xeogl.KeyboardZoomCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "MouseZoomCamera"}}{{/crossLink}} within this CameraControl.
             *
             * @property mouseZoom
             * @final
             * @type MouseZoomCamera
             */
            this.mouseZoom = this.create(xeogl.MouseZoomCamera, {
                camera: cfg.camera
            });

            /**
             * The {{#crossLink "MousePickEntity"}}{{/crossLink}} within this CameraControl.
             *
             * @property mousePickEntity
             * @final
             * @type MousePickEntity
             */
            this.mousePickEntity = this.create(xeogl.MousePickEntity, {
                pickSurface: true
            });

            this.mousePickEntity.on("pick", this._entityPicked, this);

            this.mousePickEntity.on("nopick",
                function () {
                    //alert("Nothing picked");
                });

            /**
             * The {{#crossLink "cameraFlightAnimation"}}{{/crossLink}} within this CameraControl.
             *
             * @property cameraFlight
             * @final
             * @type cameraFlightAnimation
             */
            this.cameraFlight = this.create(xeogl.CameraFlightAnimation, {
                camera: cfg.camera,
                duration: 0.5
            });

            // Set component properties

            this.firstPerson = cfg.firstPerson;
            this.camera = cfg.camera;
            this.active = cfg.active !== false;
        },

        _entityPicked: function (e) {

            var pos;

            if (e.worldPos) {
                pos = e.worldPos
            }

            var worldBoundary = e.entity.worldBoundary;
            var aabb = worldBoundary.aabb;
            var sphere = worldBoundary.sphere;

            this._boundaryHelper.geometry.aabb = aabb;
            //    this._boundaryHelper.visibility.visible = true;

            if (pos) {

                // Fly to look at point, don't change eye->look dist

                var view = this.camera.view;
                var diff = xeogl.math.subVec3(view.eye, view.look, []);

                this.cameraFlight.flyTo({
                        look: pos,
                        aabb: aabb
                    },
                    this._hideEntityBoundary, this);

                // TODO: Option to back off to fit AABB in view

            } else {

                // Fly to fit target boundary in view

                this.cameraFlight.flyTo({
                        aabb: aabb
                    },
                    this._hideEntityBoundary, this);
            }
        },

        _hideEntityBoundary: function () {
            this._boundaryHelper.visibility.visible = false;
        },

        _props: {

            /**
             * Flag which indicates whether this CameraControl is in "first person" mode.
             *
             * In "first person" mode (disabled by default) the look position rotates about the eye position. Otherwise,
             * the eye rotates about the look.
             *
             * Fires a {{#crossLink "KeyboardRotateCamera/firstPerson:event"}}{{/crossLink}} event on change.
             *
             * @property firstPerson
             * @default false
             * @type Boolean
             */
            firstPerson: {

                set: function (value) {

                    value = !!value;

                    this._firstPerson = value;

                    this.keyboardRotate.firstPerson = value;
                    this.mouseRotate.firstPerson = value;

                    /**
                     * Fired whenever this CameraControl's {{#crossLink "CameraControl/firstPerson:property"}}{{/crossLink}} property changes.
                     * @event firstPerson
                     * @param value The property's new value
                     */
                    this.fire('firstPerson', this._firstPerson);
                },

                get: function () {
                    return this._firstPerson;
                }
            },

            /**
             * The {{#crossLink "Camera"}}{{/crossLink}} being controlled by this CameraControl.
             *
             * Must be within the same {{#crossLink "Scene"}}{{/crossLink}} as this CameraControl. Defaults to the parent
             * {{#crossLink "Scene"}}Scene's{{/crossLink}} default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this CameraControl's {{#crossLink "CameraControl/camera:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true,
                        onAdded: this._transformUpdated,
                        onAddedScope: this
                    });

                    // Update camera on child components

                    var camera = this._attached.camera;

                    this.keyboardAxis.camera = camera;
                    this.keyboardRotate.camera = camera;
                    this.mouseRotate.camera = camera;
                    this.keyboardPan.camera = camera;
                    this.mousePan.camera = camera;
                    this.keyboardZoom.camera = camera;
                    this.mouseZoom.camera = camera;
                    this.cameraFlight.camera = camera;
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * Flag which indicates whether this CameraControl is active or not.
             *
             * Fires an {{#crossLink "CameraControl/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    value = !!value;

                    if (this._active === value) {
                        return;
                    }

                    // Activate or deactivate child components

                    this.keyboardAxis.active = value;
                    this.keyboardRotate.active = value;
                    this.mouseRotate.active = value;
                    this.keyboardPan.active = value;
                    this.mousePan.active = value;
                    this.keyboardZoom.active = value;
                    this.mouseZoom.active = value;
                    this.mousePickEntity.active = value;
                    this.cameraFlight.active = value;

                    /**
                     * Fired whenever this CameraControl's {{#crossLink "CameraControl/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                firstPerson: this._firstPerson,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });

})();
;/**
 A **CameraController** is the base class for components that control Cameras.

 @class CameraController
 @module xeogl
 @submodule interaction
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this CameraController in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this CameraController.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} for this CameraController.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this CameraController. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.active=true] {Boolean} Whether or not this CameraController is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.CameraController = xeogl.Component.extend({

        type: "xeogl.CameraController",

        _init: function (cfg) {
            this.camera = cfg.camera;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}{{/crossLink}} attached to this CameraController.
             *
             * Must be within the same {{#crossLink "Scene"}}{{/crossLink}} as this CameraController. Defaults to the parent
             * {{#crossLink "Scene"}}Scene's{{/crossLink}} default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this CameraController's {{#crossLink "CameraController/camera:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true,
                        //onAdded: this._transformUpdated,
                        onAddedScope: this
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * Flag which indicates whether this CameraController is active or not.
             *
             * Fires an {{#crossLink "CameraController/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             * @default true
             */
            active: {

                set: function (value) {

                    value = !!value;

                    if (this._active === value) {
                        return;
                    }

                    this._active = value;

                    /**
                     * Fired whenever this CameraController's {{#crossLink "CameraController/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });
})();
;/**
 A **KeyboardAxisCamera** switches a {{#crossLink "Camera"}}{{/crossLink}} between preset left, right, anterior,
 posterior, superior and inferior views using the keyboard.

 * A KeyboardAxisCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to the target {{#crossLink "Camera"}}{{/crossLink}}.

 By default the views are selected by the following keys:

 * '1' - left side, viewing center from along -X axis
 * '2' - right side, viewing center from along +X axis
 * '3' - anterior, viewing center from along -Z axis
 * '4' - posterior, viewing center from along +Z axis
 * '5' - superior, viewing center from along -Y axis
 * '6' - inferior, viewing center from along +Y axis

 ## Examples

 * [KeyboardAxisCamera example](../../examples/#interaction_KeyboardAxisCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.KeyboardAxisCamera({
     camera: camera
 });
 ````

 @class KeyboardAxisCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Entity} Optional map of user-defined metadata to attach to this KeyboardAxisCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardAxisCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.active=true] {Boolean} Whether or not this KeyboardAxisCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.KeyboardAxisCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.KeyboardAxisCamera",

        _init: function (cfg) {

            // Event handles

            this._onKeyDown = null;

            // Animations

            this._cameraFly = new xeogl.CameraFlightAnimation(this.scene, {
                duration: 1.0
            });

            // Init properties

            this.camera = cfg.camera;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this KeyboardAxisCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardAxisCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "KeyboardAxisCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this KeyboardAxisCamera's {{#crossLink "KeyboardAxisCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */
                    var camera = this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });

                    // Update animation

                    this._cameraFly.camera = camera;
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * Flag which indicates whether this KeyboardAxisCamera is active or not.
             *
             * Fires an {{#crossLink "KeyboardAxisCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    value = !!value;

                    if (this._active === value) {
                        return;
                    }

                    this._cameraFly.active = value;

                    var self = this;

                    var input = this.scene.input;

                    if (value) {

                        this._onKeyDown = input.on("keydown",
                            function (keyCode) {

                                if (!self._attached.camera) {
                                    return;
                                }

                                if (!input.mouseover) {
                                    return;
                                }

                                if (keyCode === input.KEY_NUM_1
                                    || keyCode === input.KEY_NUM_2
                                    || keyCode === input.KEY_NUM_3
                                    || keyCode === input.KEY_NUM_4
                                    || keyCode === input.KEY_NUM_5
                                    || keyCode === input.KEY_NUM_6) {


                                    xeogl.scheduleTask(function () {
                                        self._fly(keyCode);
                                    });
                                }
                            });

                    } else {

                        this.scene.off(this._onKeyDown);
                    }

                    /**
                     * Fired whenever this KeyboardAxisCamera's {{#crossLink "KeyboardAxisCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _fly: function (keyCode) {

            var input = this.scene.input;
            var boundary = this.scene.worldBoundary;
            var aabb = boundary.aabb;
            var center = boundary.center;
            var diag = xeogl.math.getAABB3Diag(aabb);

            this._fitFOV = 55;
            var dist = Math.abs((diag) / Math.tan(this._fitFOV / 2));

            switch (keyCode) {

                case input.KEY_NUM_1:

                    // Right view

                    this._cameraFly.flyTo({
                        look: center,
                        eye: [center[0] - dist, center[1], center[2]],
                        up: [0, 1, 0]
                    });

                    break;

                case input.KEY_NUM_2:

                    // Back view

                    this._cameraFly.flyTo({
                        look: center,
                        eye: [center[0], center[1], center[2] + dist],
                        up: [0, 1, 0]
                    });

                    break;

                case input.KEY_NUM_3:

                    // Left view

                    this._cameraFly.flyTo({
                        look: center,
                        eye: [center[0] + dist, center[1], center[2]],
                        up: [0, 1, 0]
                    });


                    break;

                case input.KEY_NUM_4:

                    // Front view

                    this._cameraFly.flyTo({
                        look: center,
                        eye: [center[0], center[1], center[2] - dist],
                        up: [0, 1, 0]
                    });

                    break;

                case input.KEY_NUM_5:

                    // Top view

                    this._cameraFly.flyTo({
                        look: center,
                        eye: [center[0], center[1] - dist, center[2]],
                        up: [0, 0, -1]
                    });

                    break;

                case input.KEY_NUM_6:

                    // Bottom view

                    this._cameraFly.flyTo({
                        look: center,
                        eye: [center[0], center[1] + dist, center[2]],
                        up: [0, 0, 1]
                    });

                    break;
            }
        },

        _getJSON: function () {

            var json = {
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {

            this.active = false;

            this._cameraFly.destroy();
        }
    });

})();
;/**
 A **KeyboardRotateCamera** orbits a {{#crossLink "Camera"}}{{/crossLink}} about its point-of-interest using the keyboard's arrow keys.

 * A KeyboardRotateCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to its target {{#crossLink "Camera"}}{{/crossLink}}.
 * The point-of-interest is the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/look:property"}}{{/crossLink}}.
 * Orbiting involves rotating the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/eye:property"}}{{/crossLink}}
 about {{#crossLink "Lookat/look:property"}}{{/crossLink}}.
 * Y-axis rotation is about the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/up:property"}}{{/crossLink}} vector.
 * Z-axis rotation is about the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} -&gt; {{#crossLink "Lookat/look:property"}}{{/crossLink}} vector.
 * X-axis rotation is about the vector perpendicular to the {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}}
 and {{#crossLink "Lookat/up:property"}}{{/crossLink}} vectors.
 * In 'first person' mode, the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/look:property"}}{{/crossLink}}
 position will orbit the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} position, otherwise the {{#crossLink "Lookat/eye:property"}}{{/crossLink}}
 will orbit the {{#crossLink "Lookat/look:property"}}{{/crossLink}}.

 ## Examples

 * [KeyboardRotateCamera example](../../examples/#interaction_KeyboardRotateCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.KeyboardRotateCamera(scene, {

     camera: camera,

     // "First person" mode rotates look about eye.
     // By default however, we orbit eye about look.
     firstPerson: false
 });
 ````
 @class KeyboardRotateCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent viewer, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this KeyboardAxisCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardRotateCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.sensitivity=1.0] {Number} Orbit sensitivity factor.
 @param [cfg.firstPerson=false] {Boolean}  Indicates whether this KeyboardRotateCamera is in "first person" mode.
 @param [cfg.active=true] {Boolean} Whether or not this MousePanCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.KeyboardRotateCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.KeyboardRotateCamera",

        _init: function (cfg) {

            // Event handles

            this._onTick = null;

            // Init properties

            this.camera = cfg.camera;
            this.active = cfg.active !== false;
            this.sensitivity = cfg.sensitivity;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this KeyboardRotateCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardRotateCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "KeyboardRotateCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this KeyboardRotateCamera's {{#crossLink "KeyboardRotateCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The sensitivity of this KeyboardRotateCamera.
             *
             * Fires a {{#crossLink "KeyboardRotateCamera/sensitivity:event"}}{{/crossLink}} event on change.
             *
             * @property sensitivity
             * @type Number
             * @default 1.0
             */
            sensitivity: {

                set: function (value) {

                    this._sensitivity = value || 1.0;

                    /**
                     * Fired whenever this KeyboardRotateCamera's  {{#crossLink "KeyboardRotateCamera/sensitivity:property"}}{{/crossLink}} property changes.
                     *
                     * @event sensitivity
                     * @param value The property's new value
                     */
                    this.fire("sensitivity", this._sensitivity);
                },

                get: function () {
                    return this._sensitivity;
                }
            },

            /**
             * Flag which indicates whether this KeyboardRotateCamera is in "first person" mode.
             *
             * A KeyboardRotateCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to its
             * target {{#crossLink "Camera"}}{{/crossLink}}. In 'first person' mode, the
             * {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/look:property"}}{{/crossLink}}
             * position orbits the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} position, otherwise
             * the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} orbits {{#crossLink "Lookat/look:property"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "KeyboardRotateCamera/firstPerson:event"}}{{/crossLink}} event on change.
             *
             * @property firstPerson
             * @default false
             * @type Boolean
             */
            firstPerson: {

                set: function (value) {

                    value = !!value;

                    this._firstPerson = value;

                    /**
                     * Fired whenever this KeyboardRotateCamera's {{#crossLink "KeyboardRotateCamera/firstPerson:property"}}{{/crossLink}} property changes.
                     * @event firstPerson
                     * @param value The property's new value
                     */
                    this.fire('firstPerson', this._firstPerson);
                },

                get: function () {
                    return this._firstPerson;
                }
            },

            /**
             * Flag which indicates whether this KeyboardRotateCamera is active or not.
             *
             * Fires an {{#crossLink "KeyboardRotateCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    var input = this.scene.input;

                    if (value) {

                        var self = this;

                        this._onTick = this.scene.on("tick",
                            function (params) {

                                var camera = self._attached.camera;

                                if (!camera) {
                                    return;
                                }

                                if (!input.mouseover) {
                                    return;
                                }

                                var elapsed = params.deltaTime;

                                var yawRate = self._sensitivity * 0.3;
                                var pitchRate = self._sensitivity * 0.3;

                                if (!input.ctrlDown && !input.altDown) {

                                    var left = input.keyDown[input.KEY_LEFT_ARROW];
                                    var right = input.keyDown[input.KEY_RIGHT_ARROW];
                                    var up = input.keyDown[input.KEY_UP_ARROW];
                                    var down = input.keyDown[input.KEY_DOWN_ARROW];

                                    if (left || right || up || down) {

                                        var yaw = 0;
                                        var pitch = 0;

                                        if (right) {
                                            yaw = -elapsed * yawRate;

                                        } else if (left) {
                                            yaw = elapsed * yawRate;
                                        }

                                        if (down) {
                                            pitch = elapsed * pitchRate;

                                        } else if (up) {
                                            pitch = -elapsed * pitchRate;
                                        }

                                        if (Math.abs(yaw) > Math.abs(pitch)) {
                                            pitch = 0;
                                        } else {
                                            yaw = 0;
                                        }

                                        if (yaw !== 0) {
                                            camera.view.rotateEyeY(yaw);
                                        }

                                        if (pitch !== 0) {
                                            camera.view.rotateEyeX(pitch);
                                        }
                                    }
                                }
                            });

                    } else {

                        this.scene.off(this._onTick);
                    }

                    /**
                     * Fired whenever this KeyboardRotateCamera's {{#crossLink "KeyboardRotateCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                sensitivity: this._sensitivity,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false; // Unbinds events
        }
    });

})();
;/**
 A **KeyboardPanCamera** pans a {{#crossLink "Camera"}}{{/crossLink}} using the W,S,A,D,X and Z keys.

 * A KeyboardPanCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to the target {{#crossLink "Camera"}}{{/crossLink}}.
 * Panning up and down involves translating the positions of the {{#crossLink "Lookat"}}Lookat's{{/crossLink}}
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and {{#crossLink "Lookat/look:property"}}{{/crossLink}} back and forth
 along the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/up:property"}}{{/crossLink}} vector.
 * Panning forwards and backwards involves translating
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and {{#crossLink "Lookat/look:property"}}{{/crossLink}} back and forth along the
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}} vector.
 * Panning left and right involves translating the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and
 {{#crossLink "Lookat/look:property"}}{{/crossLink}} along the the vector perpendicular to the {{#crossLink "Lookat/up:property"}}{{/crossLink}}
 and {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}} vectors.

 ## Examples

 * [KeyboardPanCamera example](../../examples/#interaction_KeyboardPanCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.KeyboardPanCamera({
     camera: camera
 });
 ````

 @class KeyboardPanCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this KeyboardRotateCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardPanCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.sensitivity=0.5] {Number} Pan sensitivity factor.
 @param [cfg.active=true] {Boolean} Whether or not this KeyboardPanCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.KeyboardPanCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.KeyboardPanCamera",

        _init: function (cfg) {

            // Event handles

            this._onTick = null;

            // Init properties

            this.camera = cfg.camera;
            this.sensitivity = cfg.sensitivity;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this KeyboardPanCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardPanCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "KeyboardPanCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this KeyboardPanCamera's {{#crossLink "KeyboardPanCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The sensitivity of this KeyboardPanCamera.
             *
             * Fires a {{#crossLink "KeyboardPanCamera/sensitivity:event"}}{{/crossLink}} event on change.
             *
             * @property sensitivity
             * @type Number
             * @default 0.5
             */
            sensitivity: {

                set: function (value) {

                    this._sensitivity = value || 0.5;

                    /**
                     * Fired whenever this KeyboardPanCamera's  {{#crossLink "KeyboardPanCamera/sensitivity:property"}}{{/crossLink}} property changes.
                     *
                     * @event sensitivity
                     * @param value The property's new value
                     */
                    this.fire("sensitivity", this._sensitivity);
                },

                get: function () {
                    return this._sensitivity;
                }
            },

            /**
             * Flag which indicates whether this KeyboardPanCamera is active or not.
             *
             * Fires an {{#crossLink "KeyboardPanCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    var input = this.scene.input;

                    if (value) {

                        var self = this;

                        this._onTick = this.scene.on("tick",
                            function (params) {

                                var camera = self._attached.camera;

                                if (!camera) {
                                    return;
                                }

                                if (!input.mouseover) {
                                    return;
                                }

                                var elapsed = params.deltaTime;

                                if (!input.ctrlDown && !input.altDown) {

                                    var wkey = input.keyDown[input.KEY_W];
                                    var skey = input.keyDown[input.KEY_S];
                                    var akey = input.keyDown[input.KEY_A];
                                    var dkey = input.keyDown[input.KEY_D];
                                    var zkey = input.keyDown[input.KEY_Z];
                                    var xkey = input.keyDown[input.KEY_X];

                                    if (wkey || skey || akey || dkey || xkey || zkey) {

                                        var x = 0;
                                        var y = 0;
                                        var z = 0;

                                        var sensitivity = self._sensitivity * 0.01;

                                        if (skey) {
                                            y = elapsed * sensitivity;

                                        } else if (wkey) {
                                            y = -elapsed * sensitivity;
                                        }

                                        if (dkey) {
                                            x = elapsed * sensitivity;

                                        } else if (akey) {
                                            x = -elapsed * sensitivity;
                                        }

                                        if (xkey) {
                                            z = elapsed * sensitivity;

                                        } else if (zkey) {
                                            z = -elapsed * sensitivity;
                                        }

                                        camera.view.pan([x, y, z]);
                                    }
                                }
                            });

                    } else {

                        if (this._onTick) {
                            this.scene.off(this._onTick);
                        }
                    }

                    /**
                     * Fired whenever this KeyboardPanCamera's {{#crossLink "KeyboardPanCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                sensitivity: this._sensitivity,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });

})();
;/**
 A **KeyboardZoomCamera** zooms a {{#crossLink "Camera"}}{{/crossLink}} using the + and - keys.

 * A KeyboardZoomCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to the target {{#crossLink "Camera"}}{{/crossLink}}.
 * Zooming involves translating the positions of the {{#crossLink "Lookat"}}Lookat's{{/crossLink}}
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and {{#crossLink "Lookat/look:property"}}{{/crossLink}} back and forth
 along the {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}} vector.

 ## Examples

 * [KeyboardZoomCamera example](../../examples/#interaction_KeyboardZoomCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.KeyboardZoomCamera({
     camera: camera
 });
 ````
 @class KeyboardZoomCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this KeyboardZoomCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardZoomCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.sensitivity=0.5] {Number} Zoom sensitivity factor.
 @param [cfg.active=true] {Boolean} Whether or not this KeyboardZoomCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.KeyboardZoomCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.KeyboardZoomCamera",

        _init: function (cfg) {

            // Event handles

            this._onTick = null;

            // Init properties

            this.camera = cfg.camera;
            this.sensitivity = cfg.sensitivity;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this KeyboardZoomCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this KeyboardZoomCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "KeyboardZoomCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this KeyboardZoomCamera's {{#crossLink "KeyboardZoomCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The sensitivity of this KeyboardZoomCamera.
             *
             * Fires a {{#crossLink "KeyboardZoomCamera/sensitivity:event"}}{{/crossLink}} event on change.
             *
             * @property sensitivity
             * @type Number
             * @default 0.5
             */
            sensitivity: {

                set: function (value) {

                    this._sensitivity = value || 0.5;

                    /**
                     * Fired whenever this KeyboardZoomCamera's  {{#crossLink "KeyboardZoomCamera/sensitivity:property"}}{{/crossLink}} property changes.
                     *
                     * @event sensitivity
                     * @param value The property's new value
                     */
                    this.fire("sensitivity", this._sensitivity);
                },

                get: function () {
                    return this._sensitivity;
                }
            },

            /**
             * Flag which indicates whether this KeyboardZoomCamera is active or not.
             *
             * Fires an {{#crossLink "KeyboardZoomCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    var input = this.scene.input;

                    if (value) {

                        var self = this;

                        this._onTick = this.scene.on("tick",
                            function (params) {

                                var camera = self._attached.camera;

                                if (!camera) {
                                    return;
                                }

                                if (!input.mouseover) {
                                    return;
                                }

                                var elapsed = params.deltaTime;

                                if (!input.ctrlDown && !input.altDown) {

                                    var wkey = input.keyDown[input.KEY_ADD];
                                    var skey = input.keyDown[input.KEY_SUBTRACT];

                                    if (wkey || skey) {

                                        var z = 0;

                                        var sensitivity = self.sensitivity * 0.01;

                                        if (skey) {
                                            z = elapsed * sensitivity;

                                        } else if (wkey) {
                                            z = -elapsed * sensitivity;
                                        }

                                        camera.view.zoom(z);
                                    }
                                }
                            });

                    } else {

                        if (this._onTick !== null) {
                            this.scene.off(this._onTick);
                        }
                    }

                    /**
                     * Fired whenever this KeyboardZoomCamera's {{#crossLink "KeyboardZoomCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                sensitivity: this._sensitivity,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });

})();
;/**
 A **MouseRotateCamera** orbits a {{#crossLink "Camera"}}{{/crossLink}} about its point-of-interest using the mouse.

 * A MouseRotateCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to the target {{#crossLink "Camera"}}{{/crossLink}}.
 * The point-of-interest is the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/look:property"}}{{/crossLink}}.
 * Orbiting involves rotating the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/eye:property"}}{{/crossLink}}
 about {{#crossLink "Lookat/look:property"}}{{/crossLink}}.
 * Y-axis rotation is about the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/up:property"}}{{/crossLink}} vector.
 * Z-axis rotation is about the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} -&gt; {{#crossLink "Lookat/look:property"}}{{/crossLink}} vector.
 * X-axis rotation is about the vector perpendicular to the {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}}
 and {{#crossLink "Lookat/up:property"}}{{/crossLink}} vectors.
 * In 'first person' mode, the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/look:property"}}{{/crossLink}}
 position will orbit the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} position, otherwise the {{#crossLink "Lookat/eye:property"}}{{/crossLink}}
 will orbit the {{#crossLink "Lookat/look:property"}}{{/crossLink}}.

 ## Examples

 * [MouseRotateCamera example](../../examples/#interaction_MouseRotateCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.MouseRotateCamera(scene, {

     camera: camera,

     // "First person" mode rotates look about eye.
     // By default however, we orbit eye about look.
     firstPerson: false
 });
 ````

 @class MouseRotateCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent Scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this MouseRotateCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this MouseRotateCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.sensitivity=0.5] {Number} Mouse drag sensitivity factor.
 @param [cfg.firstPerson=false] {Boolean}  Indicates whether this MouseRotateCamera is in "first person" mode.
 @param [cfg.active=true] {Boolean} Whether or not this MouseRotateCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.MouseRotateCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.MouseRotateCamera",

        _init: function (cfg) {

            // Event handles

            this._onTick = null;
            this._onMouseDown = null;
            this._onMouseMove = null;
            this._onMouseUp = null;

            // Init properties

            this.camera = cfg.camera;
            this.sensitivity = cfg.sensitivity;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this MouseRotateCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this MouseRotateCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "MouseRotateCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this MouseRotateCamera's {{#crossLink "MouseRotateCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The sensitivity of this MouseRotateCamera.
             *
             * Fires a {{#crossLink "MouseRotateCamera/sensitivity:event"}}{{/crossLink}} event on change.
             *
             * @property sensitivity
             * @type Number
             * @default 0.5
             */
            sensitivity: {

                set: function (value) {

                    this._sensitivity = value || 0.5;

                    /**
                     * Fired whenever this MouseRotateCamera's  {{#crossLink "MouseRotateCamera/sensitivity:property"}}{{/crossLink}} property changes.
                     *
                     * @event sensitivity
                     * @param value The property's new value
                     */
                    this.fire("sensitivity", this._sensitivity);
                },

                get: function () {
                    return this._sensitivity;
                }
            },

            /**
             * Flag which indicates whether this MouseRotateCamera is in "first person" mode.
             *
             * A MouseRotateCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to its
             * target {{#crossLink "Camera"}}{{/crossLink}}. In 'first person' mode, the
             * {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/look:property"}}{{/crossLink}}
             * position orbits the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} position, otherwise
             * the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} orbits {{#crossLink "Lookat/look:property"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "MouseRotateCamera/firstPerson:event"}}{{/crossLink}} event on change.
             *
             * @property firstPerson
             * @default false
             * @type Boolean
             */
            firstPerson: {

                set: function (value) {

                    value = !!value;

                    this._firstPerson = value;

                    /**
                     * Fired whenever this MouseRotateCamera's {{#crossLink "MouseRotateCamera/firstPerson:property"}}{{/crossLink}} property changes.
                     * @event firstPerson
                     * @param value The property's new value
                     */
                    this.fire('firstPerson', this._firstPerson);
                },

                get: function () {
                    return this._firstPerson;
                }
            },

            /**
             * Flag which indicates whether this MouseRotateCamera is active or not.
             *
             * Fires an {{#crossLink "MouseRotateCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    var input = this.scene.input;

                    if (value) {

                        var lastX;
                        var lastY;
                        var xDelta = 0;
                        var yDelta = 0;
                        var down = false;
                        var over = false;
                        var angle;

                        this._onMouseDown = input.on("mousedown",
                            function (e) {

                                if (!input.mouseover) {
                                    return;
                                }

                                xDelta = 0;
                                yDelta = 0;

                                if (!over) {
                                    return;
                                }

                                if (input.mouseDownLeft
                                    && !input.mouseDownRight
                                    && !input.keyDown[input.KEY_SHIFT]
                                    && !input.mouseDownMiddle) {

                                    down = true;

                                    lastX = e[0];
                                    lastY = e[1];

                                } else {
                                    down = false;
                                }

                            }, this);

                        this._onMouseUp = input.on("mouseup",
                            function () {

                                down = false;

                                xDelta = 0;
                                yDelta = 0;
                            });

                        this._onMouseEnter = input.on("mouseenter",
                            function () {

                                over = true;

                                xDelta = 0;
                                yDelta = 0;
                            });

                        this._onMouseLeave = input.on("mouseleave",
                            function () {

                                over = false;

                                xDelta = 0;
                                yDelta = 0;
                            });


                        this._onMouseMove = input.on("mousemove",
                            function (e) {

                                // Apply mouse drags as soon as we get them, so that we can correctly
                                // apply the rotations.

                                if (!over) {
                                    return;
                                }

                                if (!down) {
                                    return;
                                }

                                var xDelta = (e[0] - lastX) * this._sensitivity;
                                var yDelta = (e[1] - lastY) * this._sensitivity;

                                lastX = e[0];
                                lastY = e[1];

                                var camera = this._attached.camera;

                                if (!camera) {
                                    return;
                                }

                                if (!over) {
                                    return;
                                }

                                if (!down) {
                                    return;
                                }

                                if (xDelta !== 0) {

                                    angle = -xDelta * this._sensitivity;

                                    if (this._firstPerson) {
                                        camera.view.rotateLookY(angle);
                                    } else {
                                        camera.view.rotateEyeY(angle);
                                    }
                                }

                                if (yDelta !== 0) {

                                    angle = yDelta * this._sensitivity;

                                    if (this._firstPerson) {
                                        camera.view.rotateLookX(-angle);
                                    } else {
                                        camera.view.rotateEyeX(angle);
                                    }
                                }

                            }, this);

                    } else {

                        input.off(this._onTick);

                        input.off(this._onMouseDown);
                        input.off(this._onMouseUp);
                        input.off(this._onMouseMove);
                        input.off(this._onMouseEnter);
                        input.off(this._onMouseLeave);
                    }

                    /**
                     * Fired whenever this MouseRotateCamera's {{#crossLink "MouseRotateCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                sensitivity: this._sensitivity,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });

})();
;/**
 A **MousePanCamera** pans a {{#crossLink "Camera"}}{{/crossLink}} with the mouse.

 * A MousePanCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to the target {{#crossLink "Camera"}}{{/crossLink}}.
 * Panning is done by dragging the mouse with both the left and right buttons down.
 * Panning up and down involves translating the positions of the {{#crossLink "Lookat"}}Lookat's{{/crossLink}}
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and {{#crossLink "Lookat/look:property"}}{{/crossLink}} back and forth
 along the {{#crossLink "Lookat"}}Lookat's{{/crossLink}} {{#crossLink "Lookat/up:property"}}{{/crossLink}} vector.
 * Panning forwards and backwards involves translating
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and {{#crossLink "Lookat/look:property"}}{{/crossLink}} back and forth along the
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}} vector.
 * Panning left and right involves translating the {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and
 {{#crossLink "Lookat/look:property"}}{{/crossLink}} along the the vector perpendicular to the {{#crossLink "Lookat/up:property"}}{{/crossLink}}
 and {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}} vectors.

 ## Examples

 * [MousePanCamera example](../../examples/#interaction_MousePanCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.MousePanCamera({
     camera: camera
 });
 ````

 @class MousePanCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this MousePanCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this MousePanCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.sensitivity=0.5] {Number} Pan sensitivity factor.
 @param [cfg.active=true] {Boolean} Whether or not this MousePanCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.MousePanCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.MousePanCamera",

        _init: function (cfg) {

            // Event handles

            this._onTick = null;
            this._onMouseDown = null;
            this._onMouseMove = null;
            this._onMouseUp = null;

            // Init properties

            this.camera = cfg.camera;
            this.sensitivity = cfg.sensitivity;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this MousePanCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this MousePanCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "MousePanCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this MousePanCamera's {{#crossLink "MousePanCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The sensitivity of this MousePanCamera.
             *
             * Fires a {{#crossLink "MousePanCamera/sensitivity:event"}}{{/crossLink}} event on change.
             *
             * @property sensitivity
             * @type Number
             * @default 0.5
             */
            sensitivity: {

                set: function (value) {

                    this._sensitivity = value ? value * 0.03 : 0.03;

                    /**
                     * Fired whenever this MousePanCamera's  {{#crossLink "MousePanCamera/sensitivity:property"}}{{/crossLink}} property changes.
                     *
                     * @event sensitivity
                     * @param value The property's new value
                     */
                    this.fire("sensitivity", this._sensitivity);
                },

                get: function () {
                    return this._sensitivity;
                }
            },

            /**
             * Flag which indicates whether this MousePanCamera is active or not.
             *
             * Fires an {{#crossLink "MousePanCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    var input = this.scene.input;

                    if (value) {

                        var lastX;
                        var lastY;
                        var xDelta = 0;
                        var yDelta = 0;
                        var down = false;

                        var self = this;

                        this._onTick = this.scene.on("tick",
                            function () {

                                var camera = self._attached.camera;

                                if (!camera) {
                                    return;
                                }

                                if (xDelta !== 0 || yDelta !== 0) {

                                    camera.view.pan([xDelta, yDelta, 0]);

                                    xDelta = 0;
                                    yDelta = 0;
                                }
                            });

                        this._onMouseDown = input.on("mousedown",
                            function (e) {

                                if ((input.mouseDownLeft && input.mouseDownRight) ||
                                    (input.mouseDownLeft && input.keyDown[input.KEY_SHIFT]) ||
                                    input.mouseDownMiddle) {

                                    lastX = e[0];
                                    lastY = e[1];

                                    down = true;

                                } else {
                                    down = false;
                                }
                            });

                        this._onMouseUp = input.on("mouseup",
                            function () {
                                down = false;
                            });

                        this._onMouseUp = input.on("mouseout",
                            function () {
                                down = false;
                            });

                        this._onMouseMove = input.on("mousemove",
                            function (e) {
                                if (down) {
                                    xDelta += (e[0] - lastX) * self._sensitivity;
                                    yDelta += (e[1] - lastY) * self._sensitivity;
                                    lastX = e[0];
                                    lastY = e[1];
                                }
                            });

                    } else {

                        input.off(this._onTick);
                        input.off(this._onMouseDown);
                        input.off(this._onMouseUp);
                        input.off(this._onMouseMove);
                    }

                    /**
                     * Fired whenever this MousePanCamera's {{#crossLink "MousePanCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active; // Unbinds events
                }
            }
        },

        _getJSON: function () {

            var json = {
                sensitivity: this._sensitivity,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });

})();
;/**
 A **MousePickEntity** picks {{#crossLink "Entity"}}Entities{{/crossLink}} with mouse clicks.

 ## Examples

 * [MousePickEntity example](../../examples/#interaction_MousePickEntity)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 // Create some Entities

 var entity1 = new xeogl.Entity({
    id: "entity1",
    transform: new xeogl.Translate(scene, { xyz: [-5, 0, 0] })
 });

 var entity2 = new xeogl.Entity({
    id: "entity2",
    transform: new xeogl.Translate(scene, { xyz: [0, 0, 0] })
 });

 var entity3 = new xeogl.Entity({
    id: "entity3",
    transform: new xeogl.Translate(scene, { xyz: [5, 0, 0] })
 });

 // Create a MousePickEntity
 var mousePickEntity = new xeogl.MousePickEntity({

    // We want the 3D World-space coordinates
    // of each location we pick

    pickSurface: true
 });

 // Handle picked Entities
 mousePickEntity.on("pick", function(e) {
    var entity = e.entity;
    var canvasPos = e.canvasPos;
    var primIndex = e.primIndex;
 });

 // Handle nothing picked
 mousePickEntity.on("nopick", function(e) {
    var canvasPos = e.canvasPos;
 });
 ````

 @class MousePickEntity
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this MousePickEntity.
 @param [pickSurface=false] {Boolean} Indicates whether this MousePickEntity will find the 3D ray intersection whenever it picks a
 {{#crossLink "Entity"}}{{/crossLink}}.
 @param [cfg.active=true] {Boolean} Indicates whether or not this MousePickEntity is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.MousePickEntity = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.MousePickEntity",

        _init: function (cfg) {

            this.pickSurface = cfg.pickSurface;

            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * Flag which indicates whether this MousePickEntity is active or not.
             *
             * Fires a {{#crossLink "MousePickEntity/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    var input = this.scene.input;

                    if (value) {

                        var self = this;

                        var tolerance = 2; // Pixels
                        var over = false;
                        var down = false;
                        var downX;
                        var downY;

                        this._onMouseEnter = input.on("mouseenter",
                            function () {
                                over = true;
                            });

                        this._onMouseLeave = input.on("mouseleave",
                            function () {
                                over = false;
                            });

                        this._onMouseDown = input.on("mousedown",
                            function (canvasPos) {

                                if (!over) {
                                    return;
                                }

                                down = true;
                                downX = canvasPos[0];
                                downY = canvasPos[1];
                            });

                        this._onMouseUp = input.on("mouseup",
                            function (canvasPos) {

                                if (!down) {
                                    return;
                                }

                                if (!over) {
                                    return;
                                }

                                if (downX >= (canvasPos[0] - tolerance) &&
                                    downX <= (canvasPos[0] + tolerance) &&
                                    downY >= (canvasPos[1] - tolerance) &&
                                    downY <= (canvasPos[1] + tolerance)) {

                                    var hit = self.scene.pick({
                                        canvasPos : canvasPos,
                                        pickSurface: self._pickSurface
                                    });

                                    if (hit) {

                                        /**
                                         * Fired whenever an {{#crossLink "Entity"}}Entity{{/crossLink}} is picked.
                                         * @event picked
                                         * @param {String} entityId The ID of the picked {{#crossLink "Entity"}}Entity{{/crossLink}} within the parent {{#crossLink "Scene"}}Scene{{/crossLink}}.
                                         * @param {Array of Number} canvasPos The Canvas-space coordinate that was picked.
                                         * @param {Array of Number} worldPos When {{#crossLink "MousePickEntity/pickSurface"}}{{/crossLink}} is true,
                                         * provides the World-space coordinate that was ray-picked on the pickSurface of the
                                         * {{#crossLink "Entity"}}Entity{{/crossLink}}.
                                         */
                                        self.fire("pick", hit);

                                    } else {

                                        /**
                                         * Fired whenever an attempt to pick {{#crossLink "Entity"}}Entity{{/crossLink}} picks empty space.
                                         * @event nopick
                                         * @param {Array of Number} canvasPos The Canvas-space coordinate at which the pick was attempted.
                                         */
                                        self.fire("nopick", {
                                            canvasPos: canvasPos
                                        });
                                    }
                                }

                                down = false;
                            });
                    } else {

                        input.off(this._onMouseDown);
                        input.off(this._onMouseUp);
                    }

                    /**
                     * Fired whenever this MousePickEntity's {{#crossLink "MousePickEntity/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            },

            /**
             * Indicates whether this MousePickEntity will try to pick a {{#crossLink "Geometry"}}{{/crossLink}} primitive
             * whenever it picks an {{#crossLink "Entity"}}{{/crossLink}}.
             *
             * When true, this MousePickEntity will try to return the primitive index in a
             * {{#crossLink "MousePickEntity/picked:event"}}{{/crossLink}} event.
             *
             * Fires a {{#crossLink "MousePickEntity/pickSurface:event"}}{{/crossLink}} event on change.
             *
             * @property pickSurface
             * @type Boolean
             */
            pickSurface: {

                set: function (value) {

                    value = !!value;

                    if (this._pickSurface === value) {
                        return;
                    }

                    this._dirty = false;

                    /**
                     * Fired whenever this MousePickEntity's {{#crossLink "MousePickEntity/pickSurface:property"}}{{/crossLink}} property changes.
                     * @event pickSurface
                     * @param value The property's new value
                     */
                    this.fire('pickSurface', this._pickSurface = value);
                },

                get: function () {
                    return this._pickSurface;
                }
            }
        },

        _getJSON: function () {

            var json = {
                pickSurface: this._pickSurface,
                active: this._active
            };

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });
})();;/**
 A **MouseZoomCamera** zooms a {{#crossLink "Camera"}}{{/crossLink}} using the mouse wheel.

 * A MouseZoomCamera updates the {{#crossLink "Lookat"}}{{/crossLink}} attached to the target {{#crossLink "Camera"}}{{/crossLink}}.
 * Zooming involves translating the positions of the {{#crossLink "Lookat"}}Lookat's{{/crossLink}}
 {{#crossLink "Lookat/eye:property"}}{{/crossLink}} and {{#crossLink "Lookat/look:property"}}{{/crossLink}} back and forth
 along the {{#crossLink "Lookat/eye:property"}}{{/crossLink}}-&gt;{{#crossLink "Lookat/look:property"}}{{/crossLink}} vector.

 ## Examples

 * [MouseZoomCamera example](../../examples/#interaction_MouseZoomCamera)
 * [CameraControl example](../../examples/#interaction_CameraControl)

 ## Usage

 ````Javascript
 var camera = new xeogl.Camera({
     view: new xeogl.Lookat({
         eye: [0, 0, 10],
         look: [0, 0, 0],
         up: [0, 1, 0]
     }),
     project: new xeogl.Perspective({
         fovy: 60,
         near: 0.1,
         far: 1000
     })
 });

 var entity = new xeogl.Entity({
     camera: camera,
     geometry: new xeogl.BoxGeometry()
 });

 new xeogl.MouseZoomCamera({
     camera: camera
 });
 ````
 @class MouseZoomCamera
 @module xeogl
 @submodule controls
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this MouseZoomCamera.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to control.
 Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this MouseZoomCamera. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.sensitivity=0.5] {Number} Zoom sensitivity factor.
 @param [cfg.active=true] {Boolean} Whether or not this MouseZoomCamera is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.MouseZoomCamera = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.MouseZoomCamera",

        _init: function (cfg) {

            // Event handles

            this._onTick = null;
            this._onMouseWheel = null;

            // Init properties

            this.camera = cfg.camera;
            this.sensitivity = cfg.sensitivity;
            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this MouseZoomCamera.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this MouseZoomCamera. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires a {{#crossLink "MouseZoomCamera/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    /**
                     * Fired whenever this MouseZoomCamera's {{#crossLink "MouseZoomCamera/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The sensitivity of this MouseZoomCamera.
             *
             * Fires a {{#crossLink "MouseZoomCamera/sensitivity:event"}}{{/crossLink}} event on change.
             *
             * @property sensitivity
             * @type Number
             * @default 0.5
             */
            sensitivity: {

                set: function (value) {

                    this._sensitivity = value || 0.5;

                    /**
                     * Fired whenever this MouseZoomCamera's  {{#crossLink "MouseZoomCamera/sensitivity:property"}}{{/crossLink}} property changes.
                     *
                     * @event sensitivity
                     * @param value The property's new value
                     */
                    this.fire("sensitivity", this._sensitivity);
                },

                get: function () {
                    return this._sensitivity;
                }
            },

            /**
             * Indicates whether this MouseZoomCamera is active or not.
             *
             * Fires an {{#crossLink "MouseZoomCamera/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    if (this._active === value) {
                        return;
                    }

                    if (value) {

                        var delta = 0;
                        var target = 0;
                        var newTarget = false;
                        var targeting = false;
                        var progress = 0;

                        var eyeVec = xeogl.math.vec3();
                        var lookVec = xeogl.math.vec3();
                        var tempVec3 = xeogl.math.vec3();

                        var self = this;

                        this._onMouseWheel = this.scene.input.on("mousewheel",
                            function (_delta) {

                                delta = _delta;

                                if (delta === 0) {
                                    targeting = false;
                                    newTarget = false;
                                } else {
                                    newTarget = true;
                                }
                            });

                        this._onTick = this.scene.on("tick",
                            function () {

                                var camera = self._attached.camera;

                                if (!camera) {
                                    return;
                                }

                                var eye = camera.view.eye;
                                var look = camera.view.look;

                                eyeVec[0] = eye[0];
                                eyeVec[1] = eye[1];
                                eyeVec[2] = eye[2];

                                lookVec[0] = look[0];
                                lookVec[1] = look[1];
                                lookVec[2] = look[2];

                                xeogl.math.subVec3(eyeVec, lookVec, tempVec3);

                                var lenLook = Math.abs(xeogl.math.lenVec3(tempVec3));
                                var lenLimits = 1000;
                                var f = self._sensitivity * (2.0 + (lenLook / lenLimits));

                                if (newTarget) {
                                    target = delta * f;
                                    progress = 0;
                                    newTarget = false;
                                    targeting = true;
                                }

                                if (targeting) {

                                    if (delta > 0) {

                                        progress += 0.2 * f;

                                        if (progress > target) {
                                            targeting = false;
                                        }

                                    } else if (delta < 0) {

                                        progress -= 0.2 * f;

                                        if (progress < target) {
                                            targeting = false;
                                        }
                                    }

                                    if (targeting) {
                                        camera.view.zoom(progress);

                                        if (camera.project.isType("xeogl.Ortho")) {

                                        }
                                    }
                                }
                            });

                    } else {

                        if (this._onTick !== null) {
                            this.scene.off(this._onTick);
                            this.scene.input.off(this._onMouseWheel);
                        }
                    }

                    /**
                     * Fired whenever this MouseZoomCamera's {{#crossLink "MouseZoomCamera/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._active = value);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _getJSON: function () {

            var json = {
                sensitivity: this._sensitivity,
                active: this._active
            };

            if (this._attached.camera) {
                json.camera = this._attached.camera.id;
            }

            return json;
        },

        _destroy: function () {
            this.active = false;
        }
    });

})();
;/**
 * Components for controlling the visibility of Entities.
 *
 * @module xeogl
 * @submodule culling
 */;/**
 A **Cull** component toggles the culling of attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 * An {{#crossLink "Entity"}}{{/crossLink}} is visible when its Cull's {{#crossLink "Cull/culled:property"}}{{/crossLink}} property is true and {{#crossLink "Visibility"}}Visibility's{{/crossLink}} {{#crossLink "Visibility/visible:property"}}{{/crossLink}} property is false.
 * Cull components are intended for **visibility culling systems** to control the visibility of {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * {{#crossLink "Visibility"}}{{/crossLink}} components are intended for users to control the visibility of {{#crossLink "Entity"}}Entities{{/crossLink}} via UIs.
 * A Cull may be shared among multiple {{#crossLink "Entity"}}Entities{{/crossLink}} to toggle
 their culling status as a group.

 <img src="../../../assets/images/Cull.png"></img>

 ## Usage

 This example creates a Cull that toggles the culling of
 two {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ````javascript
 // Create a Cull component
 var cull = new xeogl.Cull({
    culled: false
 });

 // Create two Entities whose culling will be controlled by our Cull

 var entity1 = new xeogl.Entity({
    cull: cull
 });

 var entity2 = new xeogl.Entity({
    cull: cull
 });

 // Subscribe to change on the Cull's "culled" property
 var handle = cull.on("culled", function(value) {
    //...
 });

 // Hide our Entities by flipping the Cull's "culled" property,
 // which will also call our handler
 cull.culled = true;

 // Unsubscribe from the Cull again
 cull.off(handle);

 // When we destroy our Cull, the Entities will fall back
 // on the Scene's default Cull instance
 cull.destroy();
 ````
 @class Cull
 @module xeogl
 @submodule culling
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Cull in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Cull.
 @param [cfg.culled=false] {Boolean} Flag which controls culling of the attached {{#crossLink "Entity"}}Entities{{/crossLink}}
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Cull = xeogl.Component.extend({

        type: "xeogl.Cull",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Cull({
                culled: true
            });

            this.culled = cfg.culled;
        },

        _props: {

            /**
             Indicates whether this Cull culls its attached {{#crossLink "Entity"}}Entities{{/crossLink}} or not.

             Fires a {{#crossLink "Cull/culled:event"}}{{/crossLink}} event on change.

             @property culled
             @default false
             @type Boolean
             */
            culled: {

                set: function (value) {

                    value = !!value;

                    if (value === this._state.culled) {
                        return;
                    }

                    this._state.culled = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Cull's {{#crossLink "Cull/culled:property"}}{{/crossLink}} property changes.

                     @event culled
                     @param value {Boolean} The property's new value
                     */
                    this.fire("culled", this._state.culled);
                },

                get: function () {
                    return this._state.culled;
                }
            }
        },

        _compile: function () {
            this._renderer.cull = this._state;
        },

        _getJSON: function () {
            return {
                culled: this.culled
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **Visibility** toggles the visibility of attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 * An {{#crossLink "Entity"}}{{/crossLink}} is visible when its Visibility's {{#crossLink "Visibility/visible:property"}}{{/crossLink}}
 property is true and {{#crossLink "Cull"}}Cull's{{/crossLink}} {{#crossLink "Cull/culled:property"}}{{/crossLink}} property is false.
 * Visibility components are intended for users to control the visibility of {{#crossLink "Entity"}}Entities{{/crossLink}} via UIs.
 * {{#crossLink "Cull"}}{{/crossLink}} components are intended for **visibility culling systems** to control the visibility of {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * A Visibility may be shared among multiple {{#crossLink "Entity"}}Entities{{/crossLink}} to toggle
 their visibility as a group.

 <img src="../../../assets/images/Visibility.png"></img>

 ## Usage

 This example creates a Visibility that toggles the visibility of
 two {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ````javascript
 var visibility = new xeogl.Visibility({
    visible: true
 });

 // Create two Entities whose visibility will be controlled by our Visibility

 var entity1 = new xeogl.Entity({
    visibility: visibility
 });

 var entity2 = new xeogl.Entity({
    visibility: visibility
 });

 // Subscribe to change on the Visibility's "visible" property
 var handle = visibility.on("visible", function(value) {
    //...
 });

 // Hide our Entities by flipping the Visibility's "visible" property,
 // which will also call our handler
 visibility.visible = false;

 // Unsubscribe from the Visibility again
 visibility.off(handle);

 // When we destroy our Visibility, the Entities will fall back
 // on the Scene's default Visibility instance
 visibility.destroy();
 ````
 @class Visibility
 @module xeogl
 @submodule culling
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Visibility in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Visibility.
 @param [cfg.visible=true] {Boolean} Flag which controls visibility of the attached {{#crossLink "Entity"}}Entities{{/crossLink}}
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Visibility = xeogl.Component.extend({

        type: "xeogl.Visibility",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Visibility({
                visible: true
            });

            this.visible = cfg.visible;
        },

        _props: {

            /**
             Indicates whether this Visibility makes attached {{#crossLink "Entity"}}Entities{{/crossLink}} visible or not.

             Fires a {{#crossLink "Visibility/visible:event"}}{{/crossLink}} event on change.

             @property visible
             @default true
             @type Boolean
             */
            visible: {

                set: function (value) {

                    this._state.visible =  value !== false;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Visibility's {{#crossLink "Visibility/visible:property"}}{{/crossLink}} property changes.

                     @event visible
                     @param value {Boolean} The property's new value
                     */
                    this.fire("visible",  this._state.visible);
                },

                get: function () {
                    return this._state.visible;
                }
            }
        },

        _compile: function () {
            this._renderer.visibility = this._state;
        },

        _getJSON: function () {
            return {
                visible: this.visible
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 * Components for defining geometry.
 *
 * @module xeogl
 * @submodule geometry
 */;/**
 A **Geometry** defines a mesh for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#geometry_triangles_texture"><img src="../../assets/images/screenshots/BoxGeometry.png"></img></a>

 ## Overview

 * Like everything in xeogl, all properties on a Geometry are dynamically editable.
 * Set a Geometry's {{#crossLink "Geometry/autoNormals:property"}}{{/crossLink}} ````true```` to make the Geometry automatically generate it's vertex normal vectors from its {{#crossLink "Geometry/positions:property"}}{{/crossLink}} and {{#crossLink "Geometry/indices:property"}}{{/crossLink}}.
 * When no shape is specified, a Geometry will be a 2x2x2 box by default.
 * A {{#crossLink "Scene"}}{{/crossLink}} provides a 2x2x2 box for {{#crossLink "Entity"}}Entities{{/crossLink}}
 by default when they are not configured with a Geometry.
 * A Geometry provides its local-space boundary as a {{#crossLink "Boundary3D"}}{{/crossLink}}.

 <img src="../../../assets/images/Geometry.png"></img>

 ## Examples

 * [Simple triangle mesh](../../examples/#geometry_triangles)
 * [Triangle mesh with diffuse texture](../../examples/#geometry_triangles_texture)
 * [Triangle mesh with vertex colors](../../examples/#geometry_triangles_vertexColors)
 * [Wireframe box](../../examples/#geometry_lines)
 * [Dynamically modifying a TorusGeometry](../../examples/#geometry_modifying)

 ## Usage

 ### Default shape</a>

 If you create a Geometry with no specified shape, it will default to a box-shaped triangle mesh with dimensions 2x2x2:

 ```` javascript
 var entity = new xeogl.Entity({
    geometry: new xeogl.Geometry() // 2x2x2 box
 });
 ````

 ### Scene's default Geometry

 If you create an {{#crossLink "Entity"}}{{/crossLink}} with no Geometry, it will inherit its {{#crossLink "Scene"}}Scene's{{/crossLink}}
 default {{#crossLink "Scene/geometry:property"}}{{/crossLink}}, which is a 2x2x2 triangle mesh box:

 ```` javascript
 var entity2 = new xeogl.Entity();
 ````

 ### Sharing among Entities

 xeogl components can be shared among multiple {{#crossLink "Entity"}}Entities{{/crossLink}}. For components like
 Geometry and {{#crossLink "Texture"}}{{/crossLink}}, this can provide significant memory
 and performance savings. To render the example below, xeogl will issue two draw WebGL calls, one for
 each {{#crossLink "Entity"}}{{/crossLink}}, but will only need to bind the Geometry's arrays once on WebGL.

 ```` javascript
 var boxGeometry = new xeogl.BoxGeometry();

 new xeogl.Entity({
    geometry: boxGeometry
 });

 new xeogl.Entity({
    geometry: boxGeometry,
    transform:  new xeogl.Translate({
        xyz: [5, 0, 0
    })
 });
 ````

 ### Creating a custom Geometry

 Let's create an {{#crossLink "Entity"}}{{/crossLink}} with a custom Geometry that's a quad-shaped triangle mesh:

 ```` javascript
 var quadGeometry = new xeogl.Geometry({

        // Supported primitives are 'points', 'lines', 'line-loop', 'line-strip', 'triangles',
        // 'triangle-strip' and 'triangle-fan'.primitive: "triangles",
        primitive: "triangles",

        // Vertex positions
        positions : [
            -1.0, -1.0, 1.0,  // 0
             1.0, -1.0, 1.0,  // 1
             1.0,  1.0, 1.0,  // 2
            -1.0,  1.0, 1.0   // 3
        ],

        // Vertex colors
        colors: [
            1.0,  1.0,  1.0,  1.0, // 0
            1.0,  0.0,  0.0,  1.0, // 1
            0.0,  1.0,  0.0,  1.0, // 2
            0.0,  0.0,  1.0,  1.0  // 3
        ],

        // Vertex normals
        normals: [
            0, 0, 1, // 0
            0, 0, 1, // 1
            0, 0, 1, // 2
            0, 0, 1  // 3
        ],

        // UV coordinates
        uv: [
            0, 0, // 0
            1, 0, // 1
            1, 1, // 2
            1, 0  // 3
        ],

        // Triangle indices
        indices: [
            0,  1,  2,
            0,  2,  3
        ]
});

 var quadEntity = new xeogl.Entity({
    geometry: quadGeometry
 });
 ````
 ## Editing Geometry

 Recall that everything in xeogl is dynamically editable. Let's update the
 {{#crossLink "Geometry/indices:property"}}{{/crossLink}} to reverse the direction of the triangles:

 ````javascript
 customGeometry.indices = [ 2, 1, 0, 3, 2, 0 ];
 ````

 Now let's make it wireframe by changing its primitive type from ````triangles```` to ````lines````:

 ````javascript
 quadGeometry.primitive = "lines";
 ````

 ### Toggling back-faces on and off

 Now we'll attach a {{#crossLink "Modes"}}{{/crossLink}} to that last {{#crossLink "Entity"}}{{/crossLink}}, so that
 we can show or hide its {{#crossLink "Geometry"}}Geometry's{{/crossLink}} backfaces:

 ```` javascript
 var modes = new xeogl.Modes();

 quadEntity.modes = modes;

 // Hide backfaces

 modes.backfaces = false;
 ````

 ### Setting front-face vertex winding

 The <a href="https://www.opengl.org/wiki/Face_Culling" target="other">vertex winding order</a> of each face determines
 whether it's a front-face or a back-face.

 By default, xeogl considers faces to be front-faces if they have a counter-clockwise
 winding order, but we can change that by setting the {{#crossLink "Modes"}}{{/crossLink}}
 {{#crossLink "Modes/frontface:property"}}{{/crossLink}} property:

 ```` javascript
 // Set the winding order for front-faces to clockwise
 // Options are "ccw" for counter-clockwise or "cw" for clockwise

 modes.frontface = "cw";
 ````

 ### Getting the Local-space boundary

 We can get a Geometry's Local-space {{#crossLink "Boundary3D"}}{{/crossLink}} like so:

 ````javascript
 var localBoundary = quadGeometry.localBoundary;

 localBoundary.on("updated", function() {

        obb = localBoundary.obb;
        aabb = localBoundary.aabb;
        center = localBoundary.center;
        sphere = localBoundary;

        //...
    });
 ````

 @class Geometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Geometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Geometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.
 @param [cfg.positions] {Array of Number} Positions array.
 @param [cfg.normals] {Array of Number} Vertex normal vectors array.
 @param [cfg.uv] {Array of Number} UVs array.
 @param [cfg.colors] {Array of Number} Vertex colors.
 @param [cfg.tangents] {Array of Number} Vertex tangents.
 @param [cfg.indices] {Array of Number} Indices array.
 @param [cfg.autoNormals] {Boolean} Set true to automatically generate normal vectors from the positions and indices, if those are supplied.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Geometry = xeogl.Component.extend({

        type: "xeogl.Geometry",

        _init: function (cfg) {

            var self = this;

            this._state = new xeogl.renderer.Geometry({

                primitive: null, // WebGL enum
                primitiveName: null, // String

                // VBOs 

                positions: null,
                colors: null,
                normals: null,
                uv: null,
                tangents: null,
                indices: null,

                hash: "",

                // Getters for VBOs that are only created on demand

                // Tangents for normal mapping

                getTangents: function () {
                    if (self._tangentsDirty) {
                        self._buildTangents();
                    }
                    return self._tangents;
                },

                // Arrays modified to support primitive-picking

                getPickPositions: function () {
                    if (self._pickVBOsDirty) {
                        self._buildPickVBOs();
                    }
                    return self._pickPositions;
                },

                getPickColors: function () {
                    if (self._pickVBOsDirty) {
                        self._buildPickVBOs();
                    }
                    return self._pickColors;
                }
            });

            // Typed arrays

            this._positionsData = null;
            this._colorsData = null;
            this._normalsData = null;
            this._uvData = null;
            this._tangentsData = null;
            this._indicesData = null;

            // Lazy-generated VBOs

            this._tangents = null;
            this._pickPositions = null;
            this._pickColors = null;

            // Flags for work pending

            this._updateScheduled = false;
            this._geometryUpdateScheduled = false;
            this._hashDirty = true;
            this._positionsDirty = true;
            this._colorsDirty = true;
            this._normalsDirty = true;
            this._uvDirty = true;
            this._tangentsDirty = true;
            this._indicesDirty = true;
            this._pickVBOsDirty = true;

            // Local-space Boundary3D

            this._localBoundary = null;
            this._boundaryDirty = true;


            var defaultGeometry = (!cfg.positions && !cfg.normals && !cfg.uv && !cfg.indices);

            if (defaultGeometry) {

                this.primitive = cfg.primitive;

            } else {

                var defaultLineStripGeometry = ((!cfg.primitive || cfg.primitive === "line-strip") && cfg.positions && !cfg.indices);

                if (defaultLineStripGeometry) {

                    // Line strip when only positions are given and no primitive

                    var indices = [];
                    for (var i = 0, len = cfg.positions.length / 3; i < len; i++) {
                        indices.push(i);
                    }

                    this.primitive = "line-strip";
                    this.positions = cfg.positions;
                    this.indices = indices;

                } else {

                    // Custom geometry

                    this.primitive = cfg.primitive;
                    this.positions = cfg.positions;
                    this.colors = cfg.colors;
                    this.normals = cfg.normals;
                    this.uv = cfg.uv;
                    this.tangents = cfg.tangents;
                    this.indices = cfg.indices;
                }
            }

            this.autoNormals = cfg.autoNormals;

            this.usage = cfg.usage;

            this._webglContextRestored = this.scene.canvas.on("webglContextRestored", this._scheduleGeometryUpdate, this);

            xeogl.stats.memory.meshes++;
        },

        /**
         * Protected method, called by sub-classes to queue a call to _update(), to rebuild geometry data arrays.
         *
         * @protected
         */
        _scheduleUpdate: function () {
            if (!this._updateScheduled) {
                this._updateScheduled = true;
                xeogl.scheduleTask(this._doUpdate, this);
            }
        },

        _doUpdate: function () {

            if (this._updateScheduled) {

                this._geometryUpdateScheduled = true; // Prevents needless scheduling within _update()

                if (this._update) { // Template method from xeogl.Component
                    this._update();
                }

                this._updateScheduled = false;
            }

            if (this._geometryUpdateScheduled) {
                this._updateGeometry();
            }
        },

        _scheduleGeometryUpdate: function () {
            if (!this._geometryUpdateScheduled) {
                this._geometryUpdateScheduled = true;
                xeogl.scheduleTask(this._updateGeometry, this);
            }
        },

        _updateGeometry: function () {

            if (this._updateScheduled) {

                if (this._update) {
                    this._geometryUpdateScheduled = true; // Prevents needless scheduling within _update()
                    this._update();
                }

                this._updateScheduled = false;
                this._geometryUpdateScheduled = true;

            } else if (!this._geometryUpdateScheduled) {
                return;
            }

            var gl = this.scene.canvas.gl;

            switch (this._state.primitiveName) {

                case "points":
                    this._state.primitive = gl.POINTS;
                    break;

                case "lines":
                    this._state.primitive = gl.LINES;
                    break;

                case "line-loop":
                    this._state.primitive = gl.LINE_LOOP;
                    break;

                case "line-strip":
                    this._state.primitive = gl.LINE_STRIP;
                    break;

                case "triangles":
                    this._state.primitive = gl.TRIANGLES;
                    break;

                case "triangle-strip":
                    this._state.primitive = gl.TRIANGLE_STRIP;
                    break;

                case "triangle-fan":
                    this._state.primitive = gl.TRIANGLE_FAN;
                    break;

                default:
                    this._state.primitive = gl.TRIANGLES;
            }

            var usage = gl.STATIC_DRAW;

            var memoryStats = xeogl.stats.memory;

            if (this._positionsDirty) {
                if (this._state.positions) {
                    memoryStats.positions -= this._state.positions.numItems;
                    this._state.positions.destroy();
                }
                this._state.positions = this._positionsData ? new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, this._positionsData, this._positionsData.length, 3, usage) : null;
                if (this._state.positions) {
                    memoryStats.positions += this._state.positions.numItems;
                }
                this._positionsDirty = false;

                // Need to rebuild pick mesh now
                this._pickVBOsDirty = true;
            }

            if (this._colorsDirty) {

                if (this._state.colors) {
                    memoryStats.colors -= this._state.colors.numItems;
                    this._state.colors.destroy();
                }
                this._state.colors = this._colorsData ? new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, this._colorsData, this._colorsData.length, 4, usage) : null;
                if (this._state.colors) {
                    memoryStats.colors += this._state.colors.numItems;
                }
                this._colorsDirty = false;
            }

            if (this._normalsDirty) {
                if (this._state.normals) {
                    memoryStats.normals -= this._state.normals.numItems;
                    this._state.normals.destroy();
                }

                // Automatic normal generation

                if (this._autoNormals && this._positionsData && this._indicesData) {
                    this._normalsData = xeogl.math.buildNormals(this._positionsData, this._indicesData);
                }

                this._state.normals = this._normalsData ? new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, this._normalsData, this._normalsData.length, 3, usage) : null;
                if (this._state.normals) {
                    memoryStats.normals += this._state.normals.numItems;
                }
                this._normalsDirty = false;

                // Need to rebuild tangents
                // next time the renderer gets them from the state

                this._tangentsDirty = true;
            }

            if (this._uvDirty) {
                if (this._state.uv) {
                    memoryStats.uvs -= this._state.uv.numItems;
                    this._state.uv.destroy();
                }
                this._state.uv = this._uvData ? new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, this._uvData, this._uvData.length, 2, usage) : null;
                if (this._state.uv) {
                    memoryStats.uvs += this._state.uv.numItems;
                }
                this._uvDirty = false;

                // Need to rebuild tangents
                // next time the renderer gets them from the state

                this._tangentsDirty = true;
            }

            if (this._indicesDirty) {
                if (this._state.indices) {
                    memoryStats.indices -= this._state.indices.numItems;
                    this._state.indices.destroy();
                }

                this._state.indices = this._indicesData ? new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, this._indicesData, this._indicesData.length, 1, usage) : null;
                if (this._state.indices) {
                    memoryStats.indices += this._state.indices.numItems;
                }
                this._indicesDirty = false;

                // Need to rebuild pick mesh next time the
                // renderer gets it from the state

                this._pickVBOsDirty = true;
            }

            this._geometryUpdateScheduled = false;

            this._setBoundaryDirty();
        },

        _buildTangents: function () {

            if (!this._tangentsDirty) {
                return;
            }

            if (this._updateScheduled || this._geometryUpdateScheduled) {
                this._doUpdate();
            }

            var memoryStats = xeogl.stats.memory;

            if (this._tangents) {
                memoryStats.tangents -= this._tangents.numItems;
                this._tangents.destroy();
            }

            if (!this._positionsData || !this._indicesData || !this._uvData) {
                return null;
            }

            this._tangentsData = xeogl.math.buildTangents(this._positionsData, this._indicesData, this._uvData);

            var gl = this.scene.canvas.gl;

            var usage = gl.STATIC_DRAW;

            this._tangents = this._tangentsData ?
                new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, this._tangentsData, this._tangentsData.length, 3, usage) : null;

            if (this._tangents) {
                memoryStats.tangents += this._tangents.numItems;
            }

            this._tangentsDirty = false;
        },

        _buildPickVBOs: function () {

            if (!this._pickVBOsDirty) {
                return;
            }

            if (this._updateScheduled || this._geometryUpdateScheduled) {
                this._doUpdate();
            }

            this._destroyPickVBOs();

            if (this._positionsData && this._indicesData) {

                var gl = this.scene.canvas.gl;

                var usage = gl.STATIC_DRAW;

                var arrays = xeogl.math.buildPickTriangles(this._positionsData, this._indicesData);

                var pickPositions = arrays.positions;
                var pickColors = arrays.colors;

                this._pickPositions = new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, pickPositions, pickPositions.length, 3, usage);
                this._pickColors = new xeogl.renderer.webgl.ArrayBuffer(gl, gl.ARRAY_BUFFER, pickColors, pickColors.length, 4, usage);

                var memoryStats = xeogl.stats.memory;

                memoryStats.positions += this._pickPositions.numItems;
                memoryStats.colors += this._pickColors.numItems;
            }

            this._pickVBOsDirty = false;
        },

        _destroyPickVBOs: function () {

            var memoryStats = xeogl.stats.memory;

            if (this._pickPositions) {
                this._pickPositions.destroy();
                memoryStats.positions -= this._pickPositions.numItems;
                this._pickPositions = null;
            }

            if (this._pickColors) {
                this._pickColors.destroy();
                memoryStats.colors -= this._pickColors.numItems;
                this._pickColors = null;
            }

            this._pickVBOsDirty = true;
        },


        _props: {

            /**
             * The Geometry's usage type.
             *
             * Valid types are: 'static', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.
             *
             * Fires a {{#crossLink "Geometry/usage:event"}}{{/crossLink}} event on change.
             *
             * @property usage
             * @default "triangles"
             * @type String
             */
            usage: {

                set: function (value) {

                    value = value || "static";

                    if (value !== "static" && value !== "dynamic" && value !== "stream") {

                        this.error("Unsupported value for 'usage': '" + value +
                            "' - supported values are 'static', 'dynamic' and 'stream'.");

                        value = "static";
                    }

                    this._state.usageName = value;

                    this._scheduleGeometryUpdate();

                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/usage:property"}}{{/crossLink}} property changes.
                     * @event usage
                     * @type String
                     * @param value The property's new value
                     */
                    this.fire("usage", this._state.usageName);
                },

                get: function () {
                    return this._state.usageName;
                }
            },

            /**
             * The Geometry's primitive type.
             *
             * Valid types are: 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.
             *
             * Fires a {{#crossLink "Geometry/primitive:event"}}{{/crossLink}} event on change.
             *
             * @property primitive
             * @default "triangles"
             * @type String
             */
            primitive: {

                set: function (value) {

                    value = value || "triangles";

                    if (value !== "points" &&
                        value !== "lines" &&
                        value !== "line-loop" &&
                        value !== "line-strip" &&
                        value !== "triangles" &&
                        value !== "triangle-strip" &&
                        value !== "triangle-fan") {

                        this.error("Unsupported value for 'primitive': '" + value +
                            "' - supported values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', " +
                            "'triangle-strip' and 'triangle-fan'. Defaulting to 'triangles'.");

                        value = "triangles";
                    }

                    if (this._state.primitiveName === value) {
                        return;
                    }

                    this._state.primitiveName = value;

                    this._scheduleGeometryUpdate();

                    this._hashDirty = true;

                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} property changes.
                     * @event primitive
                     * @type String
                     * @param value The property's new value
                     */
                    this.fire("primitive", this._state.primitiveName);
                },

                get: function () {
                    return this._state.primitiveName;
                }
            },

            /**
             * The Geometry's positions array.
             *
             * This property is a one-dimensional array - use  {{#crossLink "xeogl.math/flatten:method"}}{{/crossLink}} to
             * convert two-dimensional arrays for assignment to this property.
             *
             * Fires a {{#crossLink "Geometry/positions:event"}}{{/crossLink}} event on change.
             *
             * @property positions
             * @default null
             * @type Float32Array
             */
            positions: {

                set: function (value) {

                    // Only recompile when adding or removing this property, not when modifying
                    var dirty = (!this._positionsData !== !value);

                    if (value && value.constructor != Float32Array) {
                        value = new Float32Array(value);
                    }

                    this._positionsData = value;
                    this._positionsDirty = true;

                    this._scheduleGeometryUpdate();

                    if (dirty) {
                        this._hashDirty = true;
                        this.fire("dirty", true);
                    }

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/positions:property"}}{{/crossLink}} property changes.
                     * @event positions
                     * @param value The property's new value
                     */
                    this.fire("positions", this._positionsData);

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/localBoundary:property"}}{{/crossLink}} property changes.
                     *
                     * Note that this event does not carry the value of the property. In order to avoid needlessly
                     * calculating unused values for this property, it will be lazy-calculated next time it's referenced
                     * on this Geometry.
                     *
                     * @event positions
                     * @param value The property's new value
                     */
                    this.fire("localBoundary", true);

                    this._renderer.imageDirty = true;
                },

                get: function () {

                    if (this._updateScheduled) {
                        this._doUpdate();
                    }

                    return this._positionsData;
                }
            },

            /**
             * The Geometry's vertex normal vectors array.
             *
             * Fires a {{#crossLink "Geometry/normals:event"}}{{/crossLink}} event on change.
             *
             * @property normals
             * @default null
             * @type Float32Array
             */
            normals: {

                set: function (value) {

                    // Only recompile when adding or removing this property, not when modifying
                    var dirty = (!this._normalsData !== !value);

                    if (value && value.constructor != Float32Array) {
                        value = new Float32Array(value);
                    }

                    this._normalsData = value;
                    this._normalsDirty = true;

                    this._scheduleGeometryUpdate();

                    if (dirty) {
                        this._hashDirty = true;
                        this.fire("dirty", true);
                    }

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/ normals:property"}}{{/crossLink}} property changes.
                     * @event  normals
                     * @param value The property's new value
                     */
                    this.fire(" normals", this._normalsData);

                    this._renderer.imageDirty = true;
                },

                get: function () {

                    if (this._updateScheduled) {
                        this._doUpdate();
                    }

                    return this._normalsData;
                }
            },

            /**
             * The Geometry's UV coordinate array.
             *
             * Fires a {{#crossLink "Geometry/uv:event"}}{{/crossLink}} event on change.
             *
             * @property uv
             * @default null
             * @type Float32Array
             */
            uv: {

                set: function (value) {

                    // Only recompile when adding or removing this property, not when modifying
                    var dirty = (!this._uvData !== !value);

                    if (value && value.constructor != Float32Array) {
                        value = new Float32Array(value);
                    }

                    this._uvData = value;
                    this._uvDirty = true;

                    this._scheduleGeometryUpdate();

                    if (dirty) {
                        this._hashDirty = true;
                        this.fire("dirty", true);
                    }

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/uv:property"}}{{/crossLink}} property changes.
                     * @event uv
                     * @param value The property's new value
                     */
                    this.fire("uv", this._uvData);

                    this._renderer.imageDirty = true;
                },

                get: function () {

                    if (this._updateScheduled) {
                        this._doUpdate();
                    }

                    return this._uvData;
                }
            },

            /**
             * The Geometry's vertex colors array.
             *
             * Fires a {{#crossLink "Geometry/colors:event"}}{{/crossLink}} event on change.
             *
             * @property colors
             * @default null
             * @type Float32Array
             */
            colors: {

                set: function (value) {

                    // Only recompile when adding or removing this property, not when modifying
                    var dirty = (!this._colorsData !== !value);

                    if (value && value.constructor != Float32Array) {
                        value = new Float32Array(value);
                    }

                    this._colorsData = value;
                    this._colorsDirty = true;

                    this._scheduleGeometryUpdate();

                    if (dirty) {
                        this._hashDirty = true;
                        this.fire("dirty", true);
                    }

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/colors:property"}}{{/crossLink}} property changes.
                     * @event colors
                     * @param value The property's new value
                     */
                    this.fire("colors", this._colorsData);

                    this._renderer.imageDirty = true;
                },

                get: function () {

                    if (this._updateScheduled) {
                        this._doUpdate();
                    }

                    return this._colorsData;
                }
            },

            /**
             * The Geometry's indices array.
             *
             * If ````xeogl.WEBGL_INFO.SUPPORTED_EXTENSIONS["OES_element_index_uint"]```` is true, then this can be
             * a ````Uint32Array````, otherwise it needs to be a ````Uint16Array````.
             *
             * Fires a {{#crossLink "Geometry/indices:event"}}{{/crossLink}} event on change.
             *
             * @property indices
             * @default null
             * @type Uint16Array | Uint32Array
             */
            indices: {

                set: function (value) {

                    // Only recompile when adding or removing this property, not when modifying
                    var dirty = (!this._indicesData && !value);

                    if (value) {

                        var bigIndicesSupported = xeogl.WEBGL_INFO.SUPPORTED_EXTENSIONS["OES_element_index_uint"];

                        if (!bigIndicesSupported && value.constructor === Uint32Array) {
                            this.error("This WebGL implementation does not support Uint32Array");
                            return;
                        }

                        var IndexArrayType = bigIndicesSupported ? Uint32Array : Uint16Array;

                        if (value.constructor != Uint16Array && value.constructor != Uint32Array) {
                            value = new IndexArrayType(value);
                        }
                    }

                    this._indicesData = value;
                    this._indicesDirty = true;

                    this._scheduleGeometryUpdate();

                    if (dirty) {
                        this._hashDirty = true;
                        this.fire("dirty", true);
                    }

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/indices:property"}}{{/crossLink}} property changes.
                     * @event indices
                     * @param value The property's new value
                     */
                    this.fire("indices", this._indicesData);

                    this._renderer.imageDirty = true;
                },

                get: function () {

                    if (this._updateScheduled) {
                        this._doUpdate();
                    }

                    return this._indicesData;
                }
            },

            /**
             * Local-space 3D boundary enclosing the {{#crossLink "Geometry/positions:property"}}{{/crossLink}} of this Geometry.
             *
             * The a {{#crossLink "Boundary3D"}}{{/crossLink}} is lazy-instantiated the first time that this
             * property is referenced. If {{#crossLink "Component/destroy:method"}}{{/crossLink}} is then called on it,
             * then this property will be assigned to a fresh {{#crossLink "Boundary3D"}}{{/crossLink}} instance next
             * time it's referenced.
             *
             * The {{#crossLink "Boundary3D"}}{{/crossLink}} will fire an {{#crossLink "Boundary3D/updated:event"}}{{/crossLink}}
             * event whenever this Geometry's {{#crossLink "Geometry/positions:property"}}{{/crossLink}} are updated.
             *
             * @property localBoundary
             * @type Boundary3D
             * @final
             */
            localBoundary: {

                get: function () {

                    if (!this._localBoundary) {

                        var self = this;

                        //this._setBoundaryDirty();

                        this._localBoundary = new xeogl.Boundary3D(this.scene, {

                            // Inject callbacks through which this Geometry
                            // can manage caching for the boundary

                            getDirty: function () {
                                if (self._boundaryDirty) {
                                    self._boundaryDirty = false;
                                    return true;
                                }
                                return false;
                            },

                            getPositions: function () {

                                if (self._updateScheduled || self._geometryUpdateScheduled) {
                                    self._doUpdate();
                                }

                                return self._positionsData;
                            }
                        });

                        this._localBoundary.on("destroyed",
                            function () {
                                self._localBoundary = null;
                            });
                    }

                    return this._localBoundary;
                }
            },

            /**
             * Set true to make this Geometry automatically generate {{#crossLink "Geometry/normals:property"}}{{/crossLink}} from
             * {{#crossLink "Geometry/positions:property"}}{{/crossLink}} and {{#crossLink "Geometry/indices:property"}}{{/crossLink}}.
             *
             * When true, causes this Geometry to auto-generate its {{#crossLink "Geometry/normals:property"}}{{/crossLink}} on the
             * next {{#crossLink "Scene"}}{{/crossLink}} {{#crossLink "Scene/tick:event"}}{{/crossLink}} event.
             *
             * Fires an {{#crossLink "Geometry/autoNormals:event"}}{{/crossLink}} event on change.
             *
             * @property autoNormals
             * @default  false
             * @type Boolean
             */
            autoNormals: {

                set: function (value) {

                    value = !!value;

                    if (this._autoNormals === value) {
                        return;
                    }

                    this._autoNormals = value;

                    this._normalsDirty = true;

                    this._scheduleGeometryUpdate();

                    /**
                     * Fired whenever this Geometry's {{#crossLink "Geometry/autoNormals:property"}}{{/crossLink}} property changes.
                     * @event autoNormals
                     * @type Boolean
                     * @param value The property's new value
                     */
                    this.fire("autoNormals", this._autoNormals);
                },

                get: function () {
                    return this._autoNormals;
                }
            }
        },

        _setBoundaryDirty: function () {

            if (this._boundaryDirty) {
                return;
            }

            this._boundaryDirty = true;

            if (this._localBoundary) {
                this._localBoundary.fire("updated", true);
            }
        },

        _compile: function () {

            if (this._updateScheduled || this._geometryUpdateScheduled) {
                this._doUpdate();
            }

            if (this._hashDirty) {
                this._makeHash();
                this._hashDirty = false;
            }

            this._renderer.geometry = this._state;
        },

        _makeHash: function () {

            var state = this._state;

            var hash = ["/g"];

            hash.push("/" + state.primitive + ";");

            if (state.positions) {
                hash.push("0");
            }

            if (state.colors) {
                hash.push("1");
            }

            if (state.normals) {
                hash.push("2");
            }

            if (state.uv) {
                hash.push("3");
            }

            // TODO: Tangents

            hash.push(";");

            state.hash = hash.join("");
        },

        _getJSON: function () {

            if (this._updateScheduled || this._geometryUpdateScheduled) {
                this._doUpdate();
            }

            return {
                primitive: this._state.primitiveName,
                positions: this._positionsData,
                normals: this._normalsData,
                uv: this._uvData,
                colors: this._colorsData,
                indices: this._indicesData
            };
        },

        _destroy: function () {

            this.scene.canvas.off(this._webglContextRestored);

            // Destroy VBOs

            if (this._state.positions) {
                this._state.positions.destroy();
            }

            if (this._state.colors) {
                this._state.colors.destroy();
            }

            if (this._state.normals) {
                this._state.normals.destroy();
            }

            if (this._state.uv) {
                this._state.uv.destroy();
            }

            if (this._state.indices) {
                this._state.indices.destroy();
            }

            // Destroy lazy-generated VBOs

            if (this._tangentsData) {
                this._tangentsData.destroy();
            }

            if (this._pickPositions) {
                this._pickPositions.destroy();
            }

            if (this._pickColors) {
                this._pickColors.destroy();
            }

            // Destroy boundary

            if (this._localBoundary) {
                this._localBoundary.destroy();
            }

            // Destroy state

            this._state.destroy();

            // Decrement geometry statistic

            xeogl.stats.memory.meshes--;
        }
    });
})();
;/**
 A **BoxGeometry** is a parameterized {{#crossLink "Geometry"}}{{/crossLink}} that defines a box-shaped mesh for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#geometry_BoxGeometry"><img src="../../assets/images/screenshots/BoxGeometry.png"></img></a>

 ## Overview

 * Dynamically modify a BoxGeometry's dimensions at any time by updating its {{#crossLink "BoxGeometry/center:property"}}{{/crossLink}}, {{#crossLink "BoxGeometry/xSize:property"}}{{/crossLink}}, {{#crossLink "BoxGeometry/ySize:property"}}{{/crossLink}} and {{#crossLink "BoxGeometry/zSize:property"}}{{/crossLink}} properties.
 * Dynamically switch its primitive type between ````"points"````, ````"lines"```` and ````"triangles"```` at any time by
 updating its {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} property.

 ## Examples

 * [Textured BoxGeometry](../../examples/#geometry_BoxGeometry)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a BoxGeometry and a {{#crossLink "PhongMaterial"}}{{/crossLink}} with
 diffuse {{#crossLink "Texture"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.BoxGeometry({
        center: [0,0,0],
        xSize: 1,  // Half-size on each axis; BoxGeometry is actually two units big on each side.
        ySize: 1,
        zSize: 1
     }),

     material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
     })
 });
 ````

 @class BoxGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this BoxGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this BoxGeometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values for a BoxGeometry are 'points', 'lines' and 'triangles'.
 @param [cfg.center] {Float32Array} 3D point indicating the center position.
 @param [cfg.xSize=1.0] {Number} Half-size on the X-axis.
 @param [cfg.ySize=1.0] {Number} Half-size on the Y-axis.
 @param [cfg.zSize=1.0] {Number} Half-size on the Z-axis.
 @extends Geometry
 */
(function () {

    "use strict";

    xeogl.BoxGeometry = xeogl.Geometry.extend({

        type: "xeogl.BoxGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.center = cfg.center;
            this.xSize = cfg.xSize;
            this.ySize = cfg.ySize;
            this.zSize = cfg.zSize;
        },

        /**
         * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
         * to generate geometry data arrays.
         *
         * @protected
         */
        _update: function () {

            var xmin = -this._xSize + this._center[0];
            var ymin = -this._ySize + this._center[1];
            var zmin = -this._zSize + this._center[2];
            var xmax = this._xSize + this._center[0];
            var ymax = this._ySize + this._center[1];
            var zmax = this._zSize + this._center[2];

            // The vertices - eight for our cube, each
            // one spanning three array elements for X,Y and Z
            this.positions = [

                // v0-v1-v2-v3 front
                xmax, ymax, zmax,
                xmin, ymax, zmax,
                xmin, ymin, zmax,
                xmax, ymin, zmax,

                // v0-v3-v4-v1 right
                xmax, ymax, zmax,
                xmax, ymin, zmax,
                xmax, ymin, zmin,
                xmax, ymax, zmin,

                // v0-v1-v6-v1 top
                xmax, ymax, zmax,
                xmax, ymax, zmin,
                xmin, ymax, zmin,
                xmin, ymax, zmax,

                // v1-v6-v7-v2 left
                xmin, ymax, zmax,
                xmin, ymax, zmin,
                xmin, ymin, zmin,
                xmin, ymin, zmax,

                // v7-v4-v3-v2 bottom
                xmin, ymin, zmin,
                xmax, ymin, zmin,
                xmax, ymin, zmax,
                xmin, ymin, zmax,

                // v4-v7-v6-v1 back
                xmax, ymin, zmin,
                xmin, ymin, zmin,
                xmin, ymax, zmin,
                xmax, ymax, zmin
            ];

            // Normal vectors, one for each vertex
            this.normals = [

                // v0-v1-v2-v3 front
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,
                0, 0, 1,

                // v0-v3-v4-v5 right
                1, 0, 0,
                1, 0, 0,
                1, 0, 0,
                1, 0, 0,

                // v0-v5-v6-v1 top
                0, 1, 0,
                0, 1, 0,
                0, 1, 0,
                0, 1, 0,

                // v1-v6-v7-v2 left
                -1, 0, 0,
                -1, 0, 0,
                -1, 0, 0,
                -1, 0, 0,

                // v7-v4-v3-v2 bottom
                0, -1, 0,
                0, -1, 0,
                0, -1, 0,
                0, -1, 0,

                // v4-v7-v6-v5 back
                0, 0, -1,
                0, 0, -1,
                0, 0, -1,
                0, 0, -1
            ];

            // UV coords
            this.uv = [

                // v0-v1-v2-v3 front
                1, 1,
                0, 1,
                0, 0,
                1, 0,

                // v0-v3-v4-v1 right
                0, 1,
                0, 0,
                1, 0,
                1, 1,

                // v0-v1-v6-v1 top
                1, 0,
                1, 1,
                0, 1,
                0, 0,

                // v1-v6-v7-v2 left
                1, 1,
                0, 1,
                0, 0,
                1, 0,

                // v7-v4-v3-v2 bottom
                0, 0,
                1, 0,
                1, 1,
                0, 1,

                // v4-v7-v6-v1 back
                0, 0,
                1, 0,
                1, 1,
                0, 1
            ];

            // Indices - these organise the
            // positions and uv texture coordinates
            // into geometric primitives in accordance
            // with the "primitive" parameter,
            // in this case a set of three indices
            // for each triangle.
            //
            // Note that each triangle is specified
            // in counter-clockwise winding order.
            //
            // You can specify them in clockwise
            // order if you configure the Modes
            // node's frontFace flag as "cw", instead of
            // the default "ccw".
            this.indices = [
                0, 1, 2,
                0, 2, 3,
                // front
                4, 5, 6,
                4, 6, 7,
                // right
                8, 9, 10,
                8, 10, 11,
                // top
                12, 13, 14,
                12, 14, 15,
                // left
                16, 17, 18,
                16, 18, 19,
                // bottom
                20, 21, 22,
                20, 22, 23
            ];

            // Tangents are lazy-computed from normals and UVs
            // for Normal mapping once we know we have texture

            this.tangents = null;
        },

        _props: {

            /**
             * 3D point indicating the center position of this BoxGeometry.
             *
             * Fires an {{#crossLink "BoxGeometry/center:event"}}{{/crossLink}} event on change.
             *
             * @property center
             * @default [0,0,0]
             * @type {Float32Array}
             */
            center: {

                set: function (value) {

                    (this._center = this._center || new xeogl.math.vec3()).set(value || [0, 0, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this BoxGeometry's {{#crossLink "BoxGeometry/center:property"}}{{/crossLink}} property changes.
                     @event center
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("center", this._center);
                },

                get: function () {
                    return this._center;
                }
            },

            /**
             * The BoxGeometry's half-size on the X-axis.
             *
             * Fires a {{#crossLink "BoxGeometry/xsize:event"}}{{/crossLink}} event on change.
             *
             * @property xSize
             * @default 1
             * @type Number
             */
            xSize: {

                set: function (value) {

                    value = value || 1;

                    if (this._xSize === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative xSize not allowed - will invert");
                        value = value * -1;
                    }

                    this._xSize = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this BoxGeometry's {{#crossLink "BoxGeometry/xSize:property"}}{{/crossLink}} property changes.
                     * @event xSize
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("xSize", this._xSize);
                },

                get: function () {
                    return this._xSize;
                }
            },

            /**
             * The BoxGeometry's half-size on the Y-axis.
             *
             * Fires a {{#crossLink "BoxGeometry/ySize:event"}}{{/crossLink}} event on change.
             *
             * @property ySize
             * @default 1
             * @type Number
             */
            ySize: {

                set: function (value) {

                    value = value || 1;

                    if (this._ySize === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative ySize not allowed - will invert");
                        value = value * -1;
                    }

                    this._ySize = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this BoxGeometry's {{#crossLink "BoxGeometry/ySize:property"}}{{/crossLink}} property changes.
                     * @event ySize
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("ySize", this._ySize);
                },

                get: function () {
                    return this._ySize;
                }
            },

            /**
             * The BoxGeometry's half-size on the Z-axis.
             *
             * Fires a {{#crossLink "BoxGeometry/zSize:event"}}{{/crossLink}} event on change.
             *
             * @property zSize
             * @default 1
             * @type Number
             */
            zSize: {

                set: function (value) {

                    value = value || 1;

                    if (this._zSize === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative zSize not allowed - will invert");
                        value = value * -1;
                    }

                    this._zSize = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this BoxGeometry's {{#crossLink "BoxGeometry/zSize:property"}}{{/crossLink}} property changes.
                     * @event zSize
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("zSize", this._zSize);
                },

                get: function () {
                    return this._zSize;
                }
            }
        },

        _getJSON: function () {
            return {
                center: this._center.slice(),
                xSize: this._xSize,
                ySize: this._ySize,
                zSize: this._zSize
            };
        }
    });

})();
;/**
 A **TorusGeometry** is a parameterized {{#crossLink "Geometry"}}{{/crossLink}} that defines a torus-shaped mesh for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#geometry_TorusGeometry"><img src="../../assets/images/screenshots/TorusGeometry.png"></img></a>

 ## Overview

 * Dynamically modify a TorusGeometry's shape at any time by updating its {{#crossLink "TorusGeometry/center:property"}}{{/crossLink}}, {{#crossLink "TorusGeometry/radius:property"}}{{/crossLink}}, {{#crossLink "TorusGeometry/tube:property"}}{{/crossLink}},
 {{#crossLink "TorusGeometry/radialSegments:property"}}{{/crossLink}}, {{#crossLink "TorusGeometry/tubeSegments:property"}}{{/crossLink}},  and
 {{#crossLink "TorusGeometry/arc:property"}}{{/crossLink}} properties.
 * Dynamically switch its primitive type between ````"points"````, ````"lines"```` and ````"triangles"```` at any time by
 updating its {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} property.
 
 ## Examples


 * [Textured TorusGeometry](../../examples/#geometry_TorusGeometry)


 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a TorusGeometry and a {{#crossLink "PhongMaterial"}}{{/crossLink}} with
 diffuse {{#crossLink "Texture"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.TorusGeometry({
         center: [0,0,0],
         radius: 1.0,
         tube: 0.3,
         radialSegments: 32,
         tubeSegments: 24,
         arc: Math.PI * 2.0
     }),

     material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
     })
 });
 ````

 @class TorusGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this TorusGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this TorusGeometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values for a TorusGeometry are 'points', 'lines' and 'triangles'.
 @param [cfg.center] {Float32Array} 3D point indicating the center position of the TorusGeometry.
 @param [cfg.radius=1] {Number} The overall radius of the TorusGeometry.
 @param [cfg.tube=0.3] {Number} The tube radius of the TorusGeometry.
 @param [cfg.radialSegments=32] {Number} The number of radial segments that make up the TorusGeometry.
 @param [cfg.tubeSegments=24] {Number} The number of tubular segments that make up the TorusGeometry.
 @param [cfg.arc=Math.PI / 2.0] {Number} The length of the TorusGeometry's arc in in radians, where Math.PI*2 is a closed torus.
 @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].
 @extends Geometry
 */
(function () {

    "use strict";

    xeogl.TorusGeometry = xeogl.Geometry.extend({

        type: "xeogl.TorusGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.lod = cfg.lod;
            this.center = cfg.center;
            this.radius = cfg.radius;
            this.tube = cfg.tube;
            this.radialSegments = cfg.radialSegments;
            this.tubeSegments = cfg.tubeSegments;
            this.arc = cfg.arc;
        },

        /**
         * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
         * to generate geometry data arrays.
         *
         * @protected
         */
        _update: function () {

            var xCenter = this._center[0];
            var yCenter = this._center[1];
            var zCenter = this._center[2];

            var radius = this._radius;
            var tube = this._tube;
            var radialSegments = Math.floor(this._radialSegments * this._lod);
            var tubeSegments = Math.floor(this._tubeSegments * this._lod);
            var arc = this._arc;

            if (radialSegments < 4) {
                radialSegments = 4;
            }

            if (tubeSegments < 4) {
                tubeSegments = 4;
            }

            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];

            var u;
            var v;
            var centerX;
            var centerY;
            var centerZ = 0;
            var x;
            var y;
            var z;
            var vec;

            var i;
            var j;

            for (j = 0; j <= radialSegments; j++) {
                for (i = 0; i <= tubeSegments; i++) {

                    u = i / tubeSegments * arc;
                    v = j / radialSegments * Math.PI * 2;

                    centerX = radius * Math.cos(u);
                    centerY = radius * Math.sin(u);

                    x = (radius + tube * Math.cos(v) ) * Math.cos(u);
                    y = (radius + tube * Math.cos(v) ) * Math.sin(u);
                    z = tube * Math.sin(v);

                    positions.push(x + xCenter);
                    positions.push(y + yCenter);
                    positions.push(z + zCenter);

                    uvs.push(1 - (i / tubeSegments));
                    uvs.push(1 - (j / radialSegments));

                    vec = xeogl.math.normalizeVec3(xeogl.math.subVec3([x, y, z], [centerX, centerY, centerZ], []), []);

                    normals.push(vec[0]);
                    normals.push(vec[1]);
                    normals.push(vec[2]);
                }
            }

            var a;
            var b;
            var c;
            var d;

            for (j = 1; j <= radialSegments; j++) {
                for (i = 1; i <= tubeSegments; i++) {

                    a = ( tubeSegments + 1 ) * j + i - 1;
                    b = ( tubeSegments + 1 ) * ( j - 1 ) + i - 1;
                    c = ( tubeSegments + 1 ) * ( j - 1 ) + i;
                    d = ( tubeSegments + 1 ) * j + i;

                    indices.push(a);
                    indices.push(b);
                    indices.push(c);

                    indices.push(c);
                    indices.push(d);
                    indices.push(a);
                }
            }

            this.positions = positions;
            this.normals = normals;
            this.uv = uvs;
            this.indices = indices;
        },

        _props: {

            /**
             * The TorusGeometry's level-of-detail factor.
             *
             * Fires a {{#crossLink "TorusGeometry/lod:event"}}{{/crossLink}} event on change.
             *
             * @property lod
             * @default 1
             * @type Number
             */
            lod: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._lod === value) {
                        return;
                    }

                    if (value < 0 || value > 1) {
                        this.warn("clamping lod to [0..1]");
                        value = value < 0 ? 0 : 1;
                    }

                    this._lod = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/lod:property"}}{{/crossLink}} property changes.
                     * @event lod
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("lod", this._lod);
                },

                get: function () {
                    return this._lod;
                }
            },

            /**
             * 3D point indicating the center position of this TorusGeometry.
             *
             * Fires an {{#crossLink "TorusGeometry/center:event"}}{{/crossLink}} event on change.
             *
             * @property center
             * @default [0,0,0]
             * @type {Float32Array}
             */
            center: {

                set: function (value) {

                    (this._center = this._center || new xeogl.math.vec3()).set(value || [0, 0, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/center:property"}}{{/crossLink}} property changes.
                     @event center
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("center", this._center);
                },

                get: function () {
                    return this._center;
                }
            },

            /**
             * The overall radius of the TorusGeometry.
             *
             * Fires a {{#crossLink "TorusGeometry/radius:event"}}{{/crossLink}} event on change.
             *
             * @property radius
             * @default 1
             * @type Number
             */
            radius: {

                set: function (value) {

                    value = value || 1;

                    if (this._radius === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative radius not allowed - will invert");
                        value = value * -1;
                    }

                    this._radius = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/radius:property"}}{{/crossLink}} property changes.
                     * @event radius
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("radius", this._radius);
                },

                get: function () {
                    return this._radius;
                }
            },


            /**
             * The tube radius of the TorusGeometry.
             *
             * Fires a {{#crossLink "TorusGeometry/tube:event"}}{{/crossLink}} event on change.
             *
             * @property tube
             * @default 0.3
             * @type Number
             */
            tube: {

                set: function (value) {

                    value = value || 0.3;

                    if (this._tube === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative tube not allowed - will invert");
                        value = value * -1;
                    }

                    this._tube = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/tube:property"}}{{/crossLink}} property changes.
                     * @event tube
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("tube", this._tube);
                },

                get: function () {
                    return this._tube;
                }
            },

            /**
             * The number of radial segments that make up the TorusGeometry.
             *
             * Fires a {{#crossLink "TorusGeometry/radialSegments:event"}}{{/crossLink}} event on change.
             *
             * @property radialSegments
             * @default 32
             * @type Number
             */
            radialSegments: {

                set: function (value) {

                    value = value || 32;

                    if (this._radialSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative radialSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._radialSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/radialSegments:property"}}{{/crossLink}} property changes.
                     * @event radialSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("radialSegments", this._radialSegments);
                },

                get: function () {
                    return this._radialSegments;
                }
            },


            /**
             * The number of tubular segments that make up the TorusGeometry.
             *
             * Fires a {{#crossLink "TorusGeometry/tubeSegments:event"}}{{/crossLink}} event on change.
             *
             * @property tubeSegments
             * @default 24
             * @type Number
             */
            tubeSegments: {

                set: function (value) {

                    value = value || 24;

                    if (this._tubeSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative tubeSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._tubeSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/tubeSegments:property"}}{{/crossLink}} property changes.
                     * @event tubeSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("tubeSegments", this._tubeSegments);
                },

                get: function () {
                    return this._tubeSegments;
                }
            },

            /**
             * The length of the TorusGeometry's arc in radians, where Math.PI*2 is a closed torus.
             *
             * Fires a {{#crossLink "TorusGeometry/arc:event"}}{{/crossLink}} event on change.
             *
             * @property arc
             * @default Math.PI * 2
             * @type Number
             */
            arc: {

                set: function (value) {

                    value = value || Math.PI * 2;

                    if (this._arc === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative arc not allowed - will invert");
                        value = value * -1;
                    }

                    this._arc = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this TorusGeometry's {{#crossLink "TorusGeometry/arc:property"}}{{/crossLink}} property changes.
                     * @event arc
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("arc", this._arc);
                },

                get: function () {
                    return this._arc;
                }
            }
        },

        _getJSON: function () {
            return {
                // Don't save lod
                center: this._center.slice(),
                radius: this._radius,
                tube: this._tube,
                radialSegments: this._radialSegments,
                tubeSegments: this._tubeSegments,
                arc: this._arc
            };
        }
    });

})();
;/**
 A **SphereGeometry** is a parameterized {{#crossLink "Geometry"}}{{/crossLink}} that defines a sphere-shaped mesh for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#geometry_SphereGeometry"><img src="../../assets/images/screenshots/SphereGeometry.png"></img></a>

 ## Overview
 
 * Dynamically modify a SphereGeometry's shape at any time by updating its {{#crossLink "SphereGeometry/center:property"}}{{/crossLink}}, {{#crossLink "SphereGeometry/radius:property"}}{{/crossLink}}, {{#crossLink "SphereGeometry/heightSegments:property"}}{{/crossLink}} and
 {{#crossLink "SphereGeometry/widthSegments:property"}}{{/crossLink}} properties.
 * Dynamically switch its primitive type between ````"points"````, ````"lines"```` and ````"triangles"```` at any time by
 updating its {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} property.
 
 ## Examples


 * [Textured SphereGeometry](../../examples/#geometry_SphereGeometry)


 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a SphereGeometry and a {{#crossLink "PhongMaterial"}}{{/crossLink}} with
 diffuse {{#crossLink "Texture"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.SphereGeometry({
         center: [0,0,0],
         radius: 1.5,
         heightSegments: 60,
         widthSegments: 60
     }),

     material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
     })
 });
 ````

 @class SphereGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this SphereGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this SphereGeometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values for a SphereGeometry are 'points', 'lines' and 'triangles'.
 @param [cfg.center] {Float32Array} 3D point indicating the center position of the SphereGeometry.
 @param [cfg.radius=1] {Number}
 @param [cfg.heightSegments=24] {Number} The SphereGeometry's number of latitudinal bands.
 @param [cfg.widthSegments=18] {Number} The SphereGeometry's number of longitudinal bands.
 @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].
 @extends Geometry
 */
(function () {

    "use strict";

    xeogl.SphereGeometry = xeogl.Geometry.extend({

        type: "xeogl.SphereGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.lod = cfg.lod;
            this.center = cfg.center;
            this.radius = cfg.radius;
            this.heightSegments = cfg.heightSegments;
            this.widthSegments = cfg.widthSegments;
        },

        /**
         * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
         * to generate geometry data arrays.
         *
         * @protected
         */
        _update: function () {

            var radius = this._radius;
            var heightSegments = Math.floor(this._lod * this._heightSegments);
            var widthSegments = Math.floor(this._lod * this._widthSegments);

            if (heightSegments < 18) {
                heightSegments = 18;
            }

            if (widthSegments < 18) {
                widthSegments = 18;
            }

            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];

            var i;
            var j;

            var theta;
            var sinTheta;
            var cosTheta;

            var phi;
            var sinPhi;
            var cosPhi;

            var x;
            var y;
            var z;

            var xCenter = this._center[0];
            var yCenter = this._center[1];
            var zCenter = this._center[2];

            var u;
            var v;

            var first;
            var second;

            for (i = 0; i <= heightSegments; i++) {

                theta = i * Math.PI / heightSegments;
                sinTheta = Math.sin(theta);
                cosTheta = Math.cos(theta);

                for (j = 0; j <= widthSegments; j++) {

                    phi = j * 2 * Math.PI / widthSegments;
                    sinPhi = Math.sin(phi);
                    cosPhi = Math.cos(phi);

                    x = cosPhi * sinTheta;
                    y = cosTheta;
                    z = sinPhi * sinTheta;
                    u = 1.0 - j / widthSegments;
                    v = 1.0 - i / heightSegments;

                    normals.push(x);
                    normals.push(y);
                    normals.push(z);

                    uvs.push(u);
                    uvs.push(v);

                    positions.push(xCenter + radius * x);
                    positions.push(yCenter + radius * y);
                    positions.push(zCenter + radius * z);
                }
            }

            for (i = 0; i < heightSegments; i++) {
                for (j = 0; j < widthSegments; j++) {

                    first = (i * (widthSegments + 1)) + j;
                    second = first + widthSegments + 1;

                    indices.push(first + 1);
                    indices.push(second + 1);
                    indices.push(second);
                    indices.push(first + 1);
                    indices.push(second);
                    indices.push(first);
                }
            }

            this.positions = positions;
            this.normals = normals;
            this.uv = uvs;
            this.indices = indices;
        },

        _props: {

            /**
             * The SphereGeometry's level-of-detail factor.
             *
             * Fires a {{#crossLink "SphereGeometry/lod:event"}}{{/crossLink}} event on change.
             *
             * @property lod
             * @default 1
             * @type Number
             */
            lod: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._lod === value) {
                        return;
                    }

                    if (value < 0 || value > 1) {
                        this.warn("clamping lod to [0..1]");
                        value = value < 0 ? 0 : 1;
                    }

                    this._lod = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this SphereGeometry's {{#crossLink "SphereGeometry/lod:property"}}{{/crossLink}} property changes.
                     * @event lod
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("lod", this._lod);
                },

                get: function () {
                    return this._lod;
                }
            },

            /**
             * 3D point indicating the center position of this SphereGeometry.
             *
             * Fires an {{#crossLink "SphereGeometry/center:event"}}{{/crossLink}} event on change.
             *
             * @property center
             * @default [0,0,0]
             * @type {Float32Array}
             */
            center: {

                set: function (value) {

                    (this._center = this._center || new xeogl.math.vec3()).set(value || [0, 0, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this SphereGeometry's {{#crossLink "SphereGeometry/center:property"}}{{/crossLink}} property changes.
                     @event center
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("center", this._center);
                },

                get: function () {
                    return this._center;
                }
            },
            
            /**
             * The SphereGeometry's radius.
             *
             * Fires a {{#crossLink "SphereGeometry/radius:event"}}{{/crossLink}} event on change.
             *
             * @property radius
             * @default 1
             * @type Number
             */
            radius: {

                set: function (value) {

                    value = value || 1;

                    if (this._radius === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative radius not allowed - will invert");
                        value = value * -1;
                    }

                    this._radius = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this SphereGeometry's {{#crossLink "SphereGeometry/radius:property"}}{{/crossLink}} property changes.
                     * @event radius
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("radius", this._radius);
                },

                get: function () {
                    return this._radius;
                }
            },


            /**
             * The SphereGeometry's number of latitudinal bands.
             *
             * Fires a {{#crossLink "SphereGeometry/heightSegments:event"}}{{/crossLink}} event on change.
             *
             * @property heightSegments
             * @default 18
             * @type Number
             */
            heightSegments: {

                set: function (value) {

                    value = value || 18;

                    if (this._heightSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative heightSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._heightSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this SphereGeometry's {{#crossLink "SphereGeometry/heightSegments:property"}}{{/crossLink}} property changes.
                     * @event heightSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("heightSegments", this._heightSegments);
                },

                get: function () {
                    return this._heightSegments;
                }
            },

            /**
             * The SphereGeometry's number of longitudinal bands.
             *
             * Fires a {{#crossLink "SphereGeometry/widthSegments:event"}}{{/crossLink}} event on change.
             *
             * @property widthSegments
             * @default 24
             * @type Number
             */
            widthSegments: {

                set: function (value) {

                    value = value || 24;

                    if (this._widthSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative widthSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._widthSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this SphereGeometry's {{#crossLink "SphereGeometry/widthSegments:property"}}{{/crossLink}} property changes.
                     * @event widthSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("widthSegments", this._widthSegments);
                },

                get: function () {
                    return this._widthSegments;
                }
            }
        },

        _getJSON: function () {
            return {
                // Don't save lod
                center: this._center.slice(),
                radius: this._radius,
                heightSegments: this._heightSegments,
                widthSegments: this._widthSegments
            };
        }
    });

})();
;/**
 An **BoundingSphereGeometry** is a {{#crossLink "Geometry"}}{{/crossLink}} that shows the extents of a World-space bounding sphere.

 <a href="../../examples/#boundaries_Entity_worldBoundary_sphere"><img src="https://i.giphy.com/3oz8xRv4g56Y4pZKWk.gif"></img></a>

 ## Overview

 * A sphere is given as a four-element Float32Array containing elements````[x,y,z,radius]````.
 * Set the BoundingSphereGeometry's {{#crossLink "BoundingSphereGeometry/sphere:property"}}{{/crossLink}} property to a sphere to fix the BoundingSphereGeometry to those extents, or
 * Set the BoundingSphereGeometry's {{#crossLink "BoundingSphereGeometry/boundary:property"}}{{/crossLink}} property to a {{#crossLink "Boundary3D"}}{{/crossLink}}
 to make it dynamically fit itself to changes in the {{#crossLink "Boundary3D"}}{{/crossLink}}'s {{#crossLink "Boundary3D/sphere:property"}}{{/crossLink}} extents.

 ## Examples

 * [Rendering a BoundingSphereGeometry](../../examples/#boundaries_Entity_worldBoundary_sphere)

 ## Usage

 In the example below we'll render a transparent {{#crossLink "Entity"}}{{/crossLink}} with a BoundingSphereGeometry that shows the spherical extents of the
 World-space {{#crossLink "Boundary3D"}}{{/crossLink}} of another {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 // First Entity with a TorusGeometry
 var torus = new xeogl.Entity({
     geometry: new xeogl.TorusGeometry()
 });

 // Second Entity with an BoundingSphereGeometry that shows a wireframe box
 // for the World-space boundary of the first Entity

 var boundaryHelper = new xeogl.Entity({

     geometry: new xeogl.BoundingSphereGeometry({
         boundary: torus.worldBoundary
     }),

     material: new xeogl.PhongMaterial({
         diffuse: [0.5, 1.0, 0.5],
         emissive: [0.5, 1.0, 0.5],
         opacity: 0.4
     }),

     modes: new xeogl.Modes({
        transparent: true
     })
 });
 ````

 Now whenever our torus {{#crossLink "Entity"}}{{/crossLink}} changes shape or position, our BoundingSphereGeometry will automatically
 update to stay fitted to it.

 As shown below, we can also directly configure the BoundingSphereGeometry with
 the {{#crossLink "Boundary3D"}}{{/crossLink}}'s {{#crossLink "Boundary3D/aabb:property"}}AABB{{/crossLink}}. In this second example, we'll
 show the sphere as wireframe.

 ````javascript
 var boundaryHelper2 = new xeogl.Entity({

     geometry: new xeogl.BoundingSphereGeometry({
         boundary: torus.worldBoundary.sphere,
         primitive: "lines"
     }),

     material: new xeogl.PhongMaterial({
         diffuse: [0.5, 1.0, 0.5],
         emissive: [0.5, 1.0, 0.5],
         lineWidth:2
     })
 });
 ````
 Note that, without the reference to a {{#crossLink "Boundary3D"}}{{/crossLink}}, our second BoundingSphereGeometry is fixed to the
 given AABB and will not automatically update whenever our torus {{#crossLink "Entity"}}{{/crossLink}} changes shape or position.

 @class BoundingSphereGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this BoundingSphereGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this BoundingSphereGeometry.
 @param [cfg.boundary] {Number|String|Boundary3D} ID or instance of a {{#crossLink "Boundary3D"}}{{/crossLink}}.
 @param [cfg.aabb] {Float32Array} An axis-aligned box (AABB) in a six-element Float32Array
 containing the min/max extents of the axis-aligned volume, ie. ````(xmin,ymin,zmin,xmax,ymax,zmax)````.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.BoundingSphereGeometry = xeogl.SphereGeometry.extend({

        type: "xeogl.BoundingSphereGeometry",

        _init: function (cfg) {

            this._super(cfg);

           // this.primitive = cfg.primitive || "lines";

            if (cfg.boundary) {
                this.boundary = cfg.boundary;

            } else if (cfg.sphere) {
                this.sphere = cfg.sphere;
            }
        },

        _props: {

            /**
             A {{#crossLink "Boundary3D"}}{{/crossLink}} whose {{#crossLink "Boundary3D/aabb:property"}}OBB{{/crossLink}} we'll
             dynamically fit this OBBGeometry to.

             This property effectively replaces the {{#crossLink "BoundingSphereGeometry/aabb:property"}}{{/crossLink}} property.

             Fires a {{#crossLink "BoundingSphereGeometry/boundary:event"}}{{/crossLink}} event on change.

             @property boundary
             @type Boundary3D
             */
            boundary: {

                set: function (value) {

                    var geometryDirty = false;
                    var self = this;

                    /**
                     * Fired whenever this BoundingSphereGeometry's {{#crossLink "BoundingSphereGeometry/boundary:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event boundary
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "boundary",
                        type: "xeogl.Boundary3D",
                        component: value,
                        sceneDefault: false,
                        on: {
                            updated: function () {
                                if (geometryDirty) {
                                    return;
                                }
                                geometryDirty = true;
                                xeogl.scheduleTask(function () {
                                    self._setFromSphere(self._attached.boundary.sphere);
                                    geometryDirty = false;
                                });
                            }
                        },
                        onAttached: function () {
                            self._setFromSphere(self._attached.boundary.sphere);
                        }
                    });
                },

                get: function () {
                    return this._attached.boundary;
                }
            },

            /**
             Sets this BoundingSphereGeometry to an axis-aligned box (SPHERE), given as a six-element Float32Array
             containing the min/max extents of the
             axis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.

             This property overrides the {{#crossLink "BoundingSphereGeometry/boundary:property"}}{{/crossLink}} property, causing it to become null.

             @property sphere
             @type Float32Array
             */
            sphere: {

                set: function (value) {

                    if (!value) {
                        return;
                    }

                    if (this._attached.boundary) {
                        this.boundary = null;
                    }

                    this._setFromSphere(value);
                }
            }
        },

        _setFromSphere: (function () {

            var vec3 = xeogl.math.vec3();

            return function (sphere) {

                vec3[0] = sphere[0];
                vec3[1] = sphere[1];
                vec3[2] = sphere[2];

                this.center = vec3;
                this.radius = sphere[4];
            };
        })()

        //_getJSON: function () {
        //
        //    var json = {};
        //
        //    if (this._attached.boundary) {
        //        json.boundary = this._attached.boundary.id;
        //
        //    } else if (this.positions) {
        //        this.positions = this.positions;
        //    }
        //
        //    return json;
        //},

    });
})();
;/**
 An **OBBGeometry** is a {{#crossLink "Geometry"}}{{/crossLink}} that shows the extents of a World-space entity-oriented bounding box (OBB).

 <a href="../../examples/#geometry_OBBGeometry"><img src="https://i.giphy.com/3o6ZsSVy0NKXZ1vDSo.gif"></img></a>

 ## Overview

 * A World-space OBB a bounding box that's oriented to its contents, given as a 32-element array containing the homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].
 * Set an OBBGeometry's {{#crossLink "OBBGeometry/obb:property"}}{{/crossLink}} property to an OBB to fix it to those extents, or
 * Set an OBBGeometry's {{#crossLink "OBBGeometry/boundary:property"}}{{/crossLink}} property to a {{#crossLink "Boundary3D"}}{{/crossLink}}
 to make it dynamically fit itself to changes in the {{#crossLink "Boundary3D"}}{{/crossLink}}'s {{#crossLink "Boundary3D/obb:property"}}{{/crossLink}} extents.

 ## Examples

 * [Rendering an OBBGeometry](../../examples/#geometry_OBBGeometry)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a OBBGeometry that shows the extents of the
 World-space {{#crossLink "Boundary3D"}}{{/crossLink}} of another {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 // First Entity with a TorusGeometry
 var torus = new xeogl.Entity({
     geometry: new xeogl.TorusGeometry()
 });

 // Second Entity with an OBBGeometry that shows a wireframe box
 // for the World-space boundary of the first Entity

 var boundaryHelper = new xeogl.Entity({

     geometry: new xeogl.OBBGeometry({
         boundary: torus.worldBoundary
     }),

     material: new xeogl.PhongMaterial({
         diffuse: [0.5, 1.0, 0.5],
         emissive: [0.5, 1.0, 0.5],
         lineWidth:2
     })
 });
 ````

 Now whenever our torus {{#crossLink "Entity"}}{{/crossLink}} changes shape or position, our OBBGeometry will automatically
 update to stay fitted to it.

 We could also directly configure the OBBGeometry with
 the {{#crossLink "Boundary3D"}}{{/crossLink}}'s {{#crossLink "Boundary3D/obb:property"}}OBB{{/crossLink}}:

 ````javascript
 var boundaryHelper2 = new xeogl.Entity({

     geometry: new xeogl.OBBGeometry({
         boundary: torus.worldBoundary.obb
     }),

     material: new xeogl.PhongMaterial({
         diffuse: [0.5, 1.0, 0.5],
         emissive: [0.5, 1.0, 0.5],
         lineWidth:2
     })
 });
 ````
 Note that, without the reference to a {{#crossLink "Boundary3D"}}{{/crossLink}}, our second OBBGeometry is fixed to the
 given OBB and will not automatically update whenever our torus {{#crossLink "Entity"}}{{/crossLink}} changes shape or position.

 @class OBBGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this OBBGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this OBBGeometry.
 @param [cfg.boundary] {Number|String|Boundary3D} ID or instance of a {{#crossLink "Boundary3D"}}{{/crossLink}}.
 @param [cfg.obb] {Float32Array} An entity-oriented box (OBB) in a 32-element Float32Array
 containing homogeneous coordinates for the eight corner vertices, ie. each having elements (x,y,z,w).
 @extends Component
 */
(function () {

    "use strict";

    xeogl.OBBGeometry = xeogl.Geometry.extend({

        type: "xeogl.OBBGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.primitive = cfg.primitive || "lines";

            this.indices = [
                0, 1, 1, 2, 2, 3, 3, 0, 4,
                5, 5, 6, 6, 7, 7, 4, 0, 4,
                1, 5, 2, 6, 3, 7
            ];

            if (cfg.boundary) {
                this.boundary = cfg.boundary;

            } else if (cfg.obb) {
                this.obb = cfg.obb;

            } else if (cfg.positions) {
                this.positions = cfg.positions;

            } else {
                this.positions = [
                    1.0, 1.0, 1.0,
                    1.0, -1.0, 1.0,
                    -1.0, -1.0, 1.0,
                    -1.0, 1.0, 1.0,
                    1.0, 1.0, -1.0,
                    1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0,
                    -1.0, 1.0, -1.0
                ];
            }
        },

        _props: {

            /**
             A {{#crossLink "Boundary3D"}}{{/crossLink}} whose {{#crossLink "Boundary3D/obb:property"}}OBB{{/crossLink}} we'll
             dynamically fit this OBBGeometry to.

             This property effectively replaces the {{#crossLink "OBBGeometry/obb:property"}}{{/crossLink}} property.

             Fires a {{#crossLink "OBBGeometry/boundary:event"}}{{/crossLink}} event on change.

             @property boundary
             @type Boundary3D
             */
            boundary: {

                set: function (value) {

                    var geometryDirty = false;
                    var self = this;

                    /**
                     * Fired whenever this OBBGeometry's {{#crossLink "OBBGeometry/boundary:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event boundary
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "boundary",
                        type: "xeogl.Boundary3D",
                        component: value,
                        sceneDefault: false,
                        on: {
                            updated: function () {
                                if (geometryDirty) {
                                    return;
                                }
                                geometryDirty = true;
                                xeogl.scheduleTask(function () {
                                    self._setPositionsFromOBB(self._attached.boundary.obb);
                                    geometryDirty = false;
                                });
                            }
                        },
                        onAttached: function () {
                            self._setPositionsFromOBB(self._attached.boundary.obb);
                        }
                    });
                },

                get: function () {
                    return this._attached.boundary;
                }
            },

            /**
             Sets this OBBGeometry to an entity-oriented bounding box (OBB), given as a 32-element Float32Array
             containing homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].

             This property effectively replaces the {{#crossLink "OBBGeometry/boundary:property"}}{{/crossLink}} property, causing it to become null.

             @property obb
             @type Float32Array
             */
            obb: {

                set: function (value) {

                    if (!value) {
                        return;
                    }

                    if (this._attached.boundary) {
                        this.boundary = null;
                    }

                    this._setPositionsFromOBB(value);
                }
            }
        },

        _setPositionsFromOBB: function (obb) {
            this.positions = [
                obb[0], obb[1], obb[2],
                obb[4], obb[5], obb[6],
                obb[8], obb[9], obb[10],
                obb[12], obb[13], obb[14],
                obb[16], obb[17], obb[18],
                obb[20], obb[21], obb[22],
                obb[24], obb[25], obb[26],
                obb[28], obb[29], obb[30]
            ];
        },

        _getJSON: function () {

            var json = {};

            if (this._attached.boundary) {
                json.boundary = this._attached.boundary.id;

            } else if (this.positions) {
                json.positions = this.positions;
            }

            return json;
        }
    });
})();
;/**
 An **AABBGeometry** is a {{#crossLink "Geometry"}}{{/crossLink}} that shows the extents of a World-space axis-aligned bounding box (AABB).

 <a href="../../examples/#geometry_AABBGeometry"><img src="https://i.giphy.com/3o6ZsSVy0NKXZ1vDSo.gif"></img></a>

 ## Overview

 * A World-space AABB is an axis-aligned box given as a six-element array containing the min/max extents of an axis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.
 * Set a AABBGeometry's {{#crossLink "AABBGeometry/aabb:property"}}{{/crossLink}} property to an AABB to fix the AABBGeometry to those extents, or
 * set a AABBGeometry's {{#crossLink "AABBGeometry/boundary:property"}}{{/crossLink}} property to a {{#crossLink "Boundary3D"}}{{/crossLink}}
 to make it dynamically fit itself to changes in the {{#crossLink "Boundary3D"}}{{/crossLink}}'s {{#crossLink "Boundary3D/aabb:property"}}{{/crossLink}} extents.

 ## Examples

 * [Rendering an AABBGeometry](../../examples/#geometry_AABBGeometry)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a AABBGeometry that shows the extents of the
 World-space {{#crossLink "Boundary3D"}}{{/crossLink}} of another {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 // First Entity with a TorusGeometry
 var torus = new xeogl.Entity({
     geometry: new xeogl.TorusGeometry()
 });

 // Second Entity with an AABBGeometry that shows a wireframe box
 // for the World-space boundary of the first Entity

 var boundaryHelper = new xeogl.Entity({

     geometry: new xeogl.AABBGeometry({
         boundary: torus.worldBoundary
     }),

     material: new xeogl.PhongMaterial({
         diffuse: [0.5, 1.0, 0.5],
         emissive: [0.5, 1.0, 0.5],
         lineWidth:2
     })
 });
 ````

 Now whenever our torus {{#crossLink "Entity"}}{{/crossLink}} changes shape or position, our AABBGeometry will automatically
 update to stay fitted to it.

 We could also directly configure the AABBGeometry with
 the {{#crossLink "Boundary3D"}}{{/crossLink}}'s {{#crossLink "Boundary3D/aabb:property"}}AABB{{/crossLink}}:

 ````javascript
 var boundaryHelper2 = new xeogl.Entity({

     geometry: new xeogl.AABBGeometry({
         boundary: torus.worldBoundary.aabb
     }),

     material: new xeogl.PhongMaterial({
         diffuse: [0.5, 1.0, 0.5],
         emissive: [0.5, 1.0, 0.5],
         lineWidth:2
     })
 });
 ````
 Note that, without the reference to a {{#crossLink "Boundary3D"}}{{/crossLink}}, our second AABBGeometry is fixed to the
 given AABB and will not automatically update whenever our torus {{#crossLink "Entity"}}{{/crossLink}} changes shape or position.

 @class AABBGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this AABBGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this AABBGeometry.
 @param [cfg.boundary] {Number|String|Boundary3D} ID or instance of a {{#crossLink "Boundary3D"}}{{/crossLink}}.
 @param [cfg.aabb] {Float32Array} An axis-aligned box (AABB) in a six-element Float32Array
 containing the min/max extents of the axis-aligned volume, ie. ````(xmin,ymin,zmin,xmax,ymax,zmax)````.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.AABBGeometry = xeogl.Geometry.extend({

        type: "xeogl.AABBGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.primitive = cfg.primitive || "lines";

            this.indices = [
                0, 1, 1, 2, 2, 3, 3, 0, 4,
                5, 5, 6, 6, 7, 7, 4, 0, 4,
                1, 5, 2, 6, 3, 7
            ];

            if (cfg.boundary) {
                this.boundary = cfg.boundary;

            } else if (cfg.aabb) {
                this.aabb = cfg.aabb;

            } else if (cfg.positions) {
                this.positions = cfg.positions;

            } else {
                this.positions = [
                    1.0, 1.0, 1.0,
                    1.0, -1.0, 1.0,
                    -1.0, -1.0, 1.0,
                    -1.0, 1.0, 1.0,
                    1.0, 1.0, -1.0,
                    1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0,
                    -1.0, 1.0, -1.0
                ];
            }
        },

        _props: {

            /**
             A {{#crossLink "Boundary3D"}}{{/crossLink}} whose {{#crossLink "Boundary3D/aabb:property"}}OBB{{/crossLink}} we'll
             dynamically fit this OBBGeometry to.

             This property effectively replaces the {{#crossLink "AABBGeometry/aabb:property"}}{{/crossLink}} property.

             Fires a {{#crossLink "AABBGeometry/boundary:event"}}{{/crossLink}} event on change.

             @property boundary
             @type Boundary3D
             */
            boundary: {

                set: function (value) {

                    var geometryDirty = false;
                    var self = this;

                    /**
                     * Fired whenever this AABBGeometry's {{#crossLink "AABBGeometry/boundary:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event boundary
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "boundary",
                        type: "xeogl.Boundary3D",
                        component: value,
                        sceneDefault: false,
                        on: {
                            updated: function () {
                                if (geometryDirty) {
                                    return;
                                }
                                geometryDirty = true;
                                xeogl.scheduleTask(function () {
                                    self._setPositionsFromAABB(self._attached.boundary.aabb);
                                    geometryDirty = false;
                                });
                            }
                        },
                        onAttached: function () {
                            self._setPositionsFromAABB(self._attached.boundary.aabb);
                        }
                    });
                },

                get: function () {
                    return this._attached.boundary;
                }
            },

            /**
             Sets this AABBGeometry to an axis-aligned box (AABB), given as a six-element Float32Array
             containing the min/max extents of the
             axis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.

             This property overrides the {{#crossLink "AABBGeometry/boundary:property"}}{{/crossLink}} property, causing it to become null.

             @property aabb
             @type Float32Array
             */
            aabb: {

                set: function (value) {

                    if (!value) {
                        return;
                    }

                    if (this._attached.boundary) {
                        this.boundary = null;
                    }

                    this._setPositionsFromAABB(value);
                }
            }
        },

        _setPositionsFromAABB: function (aabb) {
            this.positions = [
                aabb[3], aabb[4], aabb[5],
                aabb[3], aabb[1], aabb[5],
                aabb[0], aabb[1], aabb[5],
                aabb[0], aabb[4], aabb[5],
                aabb[3], aabb[4], aabb[2],
                aabb[3], aabb[1], aabb[2],
                aabb[0], aabb[1], aabb[2],
                aabb[0], aabb[4], aabb[2]
            ];
        },

        _getJSON: function () {

            var json = {};

            if (this._attached.boundary) {
                json.boundary = this._attached.boundary.id;

            } else if (this.positions) {
                this.positions = this.positions;
            }

            return json;
        }
    });
})();
;/**

 A **PathGeometry** is a {{#crossLink "Geometry"}}{{/crossLink}} that is defined by a {{#crossLink "Curve"}}{{/crossLink}}.

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a PathGeometry, a {{#crossLink "Path"}}{{/crossLink}} and
 a {{#crossLink "PhongMaterial"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.PathGeometry({

        divisions: 10,

        path: new xeogl.Path({

            // Subpaths

            curves: [
                new xeogl.CubicBezierCurve({
                    v0: [-10, 0, 0],
                    v1: [-5, 15, 0],
                    v2: [20, 15, 0],
                    v3: [10, 0, 0]
                }),
                new xeogl.QuadraticBezierCurve({
                    v0: [10, 0, 0],
                    v1: [30, 15, 0],
                    v2: [20, 0, 0]
                }),
                new xeogl.SplineCurve({
                    points: [
                        [20, 0, 0],
                        [-5, 15, 0],
                        [20, 15, 0],
                        [10, 0, 0]
                    ]
                })
            ]
        })
     }),

     material: new xeogl.PhongMaterial(
        diffuse: [1,0,0]
     })
 });
 ````

 @class PathGeometry
 @module xeogl
 @submodule geometry
 @extends Geometry
 */
xeogl.PathGeometry = xeogl.Geometry.extend({

    type: "xeogl.PathGeometry",

    // Constructor

    _init: function (cfg) {

        this._super(cfg);

        this.path = cfg.path;
        this.divisions = cfg.divisions;
    },

    /**
     * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
     * to generate geometry data arrays.
     *
     * @protected
     */
    _update: function () {

        var path = this._attached.path;

        if (!path) {
            return;
        }

        var i;
        var len;

        var points = path.getPoints(this._divisions);

        var positions = [];
        var point;

        for (i = 0, len = points.length; i < len; i++) {

            point = points[i];

            positions.push(point[0]);
            positions.push(point[1]);
            positions.push(point[2]);
        }

        var indices = [];

        for (i = 0, len = points.length - 1; i < len; i++) {
            indices.push(i);
            indices.push(i + 1);
        }

        this.primitive = "lines";
        this.positions = positions;
        this.indices = indices;
        this.normals = null;
        this.uv = null;
    },

    _props: {

        /**
         * The Path for this PathGeometry.
         *
         * Fires a {{#crossLink "PathGeometry/path:event"}}{{/crossLink}} event on change.
         *
         * @property path
         * @type {Path}
         */
        path: {

            set: function (value) {

                /**
                 * Fired whenever this CameraPaths's {{#crossLink "CameraPath/path:property"}}{{/crossLink}} property changes.
                 * @event path
                 * @param value The property's new value
                 */
                this._attach({
                    name: "path",
                    type: "xeogl.Curve",
                    component: value,
                    sceneDefault: false,
                    on: {
                        curves: {
                            callback: this._scheduleUpdate,
                            scope: this
                        }
                    }
                });
            },

            get: function () {
                return this._attached.path;
            }
        },

        /**
         * The number of segments in this PathGeometry.
         *
         * Fires a {{#crossLink "PathGeometry/divisions:event"}}{{/crossLink}} event on change.
         *
         * @property divisions
         * @default 6
         * @type {Number}
         */
        divisions: {

            set: function (value) {

                value = value || 6;

                this._divisions = value;

                this._scheduleUpdate();

                this.fire("divisions", this._divisions);
            },

            get: function () {
                return this._divisions;
            }
        }
    },

    _getJSON: function () {

        var json = {
            divisions: this._divisions
        };

        if (this._attached.path) {
            json.path = this._attached.path.id;
        }

        return json;
    }
});;/**
 A **CylinderGeometry** is a parameterized {{#crossLink "Geometry"}}{{/crossLink}} that defines a cylinder-shaped mesh for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#geometry_CylinderGeometry"><img src="../../assets/images/screenshots/CylinderGeometry.png"></img></a>

 ## Overview

 * Dynamically modify a CylinderGeometry's shape at any time by updating its {{#crossLink "CylinderGeometry/center:property"}}{{/crossLink}}, {{#crossLink "CylinderGeometry/radiusTop:property"}}{{/crossLink}}, {{#crossLink "CylinderGeometry/radiusBottom:property"}}{{/crossLink}}, {{#crossLink "CylinderGeometry/height:property"}}{{/crossLink}},
 {{#crossLink "CylinderGeometry/radialSegments:property"}}{{/crossLink}}, {{#crossLink "CylinderGeometry/heightSegments:property"}}{{/crossLink}} and
 {{#crossLink "CylinderGeometry/openEnded:property"}}{{/crossLink}} properties.
 * Dynamically switch its primitive type between ````"points"````, ````"lines"```` and ````"triangles"```` at any time by
 updating its {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} property.

 ## Examples

 * [Textured CylinderGeometry](../../examples/#geometry_CylinderGeometry)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a CylinderGeometry and a {{#crossLink "PhongMaterial"}}{{/crossLink}} with
 diffuse {{#crossLink "Texture"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.CylinderGeometry({
         center: [0,0,0],
         radiusTop: 2.0,
         radiusBottom: 2.0,
         height: 5.0,
         radialSegments: 20,
         heightSegments: 1,
         openEnded: false
     }),

     material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
     })
 });
 ````

 @class CylinderGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this CylinderGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this CylinderGeometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values for a CylinderGeometry are 'points', 'lines' and 'triangles'.
 @param [cfg.center] {Float32Array} 3D point indicating the center position of the CylinderGeometry.
 @param [cfg.radiusTop=1] {Number} Radius of top.
 @param [cfg.radiusBottom=1] {Number} Radius of bottom.
 @param [cfg.height=1] {Number} Height.
 @param [cfg.radialSegments=60] {Number} Number of segments around the CylinderGeometry.
 @param [cfg.heightSegments=1] {Number} Number of vertical segments.
 @param [cfg.openEnded=false] {Boolean} Whether or not the CylinderGeometry has solid caps on the ends.
 @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].
 @extends Geometry
 */
(function () {

    "use strict";

    xeogl.CylinderGeometry = xeogl.Geometry.extend({

        type: "xeogl.CylinderGeometry",

        _init: function (cfg) {

            this._super(cfg);
            this.center = cfg.center;
            this.lod = cfg.lod;
            this.center = cfg.center;
            this.radiusTop = cfg.radiusTop;
            this.radiusBottom = cfg.radiusBottom;
            this.height = cfg.height;
            this.radialSegments = cfg.radialSegments;
            this.heightSegments = cfg.heightSegments;
            this.openEnded = cfg.openEnded;
        },

        /**
         * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
         * to generate geometry data arrays.
         *
         * @protected
         */
        _update: function () {

            var centerX = this._center[0];
            var centerY = this._center[1];
            var centerZ = this._center[2];

            var radiusTop = this._radiusTop;
            var radiusBottom = this._radiusBottom;
            var height = this._height;
            var radialSegments = Math.floor(this._radialSegments * this._lod);
            var heightSegments = Math.floor(this._heightSegments * this._lod);

            if (radialSegments < 3) {
                radialSegments = 3;
            }

            if (heightSegments < 1) {
                heightSegments = 1;
            }

            var openEnded = this._openEnded;

            var heightHalf = height / 2;
            var heightLength = height / heightSegments;
            var radialAngle = (2.0 * Math.PI / radialSegments);
            var radialLength = 1.0 / radialSegments;
            //var nextRadius = this._radiusBottom;
            var radiusChange = (radiusTop - radiusBottom) / heightSegments;

            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];

            var h;
            var i;

            var x;
            var z;

            var currentRadius;
            var currentHeight;

            var center;
            var first;
            var second;

            var startIndex;
            var tu;
            var tv;

            // create vertices
            var normalY = (90.0 - (Math.atan(height / (radiusBottom - radiusTop))) * 180 / Math.PI) / 90.0;

            for (h = 0; h <= heightSegments; h++) {
                currentRadius = radiusTop - h * radiusChange;
                currentHeight = heightHalf - h * heightLength;

                for (i = 0; i <= radialSegments; i++) {
                    x = Math.sin(i * radialAngle);
                    z = Math.cos(i * radialAngle);

                    normals.push(currentRadius * x);
                    normals.push(normalY); //todo
                    normals.push(currentRadius * z);

                    uvs.push((i * radialLength));
                    uvs.push(1 - h * 1 / heightSegments);

                    positions.push((currentRadius * x) + centerX);
                    positions.push((currentHeight) + centerY);
                    positions.push((currentRadius * z) + centerZ);
                }
            }

            // create faces
            for (h = 0; h < heightSegments; h++) {
                for (i = 0; i <= radialSegments; i++) {

                    first = h * (radialSegments + 1) + i;
                    second = first + radialSegments;

                    indices.push(first);
                    indices.push(second);
                    indices.push(second + 1);

                    indices.push(first);
                    indices.push(second + 1);
                    indices.push(first + 1);
                }
            }

            // create top cap
            if (!openEnded && radiusTop > 0) {
                startIndex = (positions.length / 3);

                // top center
                normals.push(0.0);
                normals.push(1.0);
                normals.push(0.0);

                uvs.push(0.5);
                uvs.push(0.5);

                positions.push(0 + centerX);
                positions.push(heightHalf + centerY);
                positions.push(0 + centerZ);

                // top triangle fan
                for (i = 0; i <= radialSegments; i++) {
                    x = Math.sin(i * radialAngle);
                    z = Math.cos(i * radialAngle);
                    tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;
                    tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;

                    normals.push(radiusTop * x);
                    normals.push(1.0);
                    normals.push(radiusTop * z);

                    uvs.push(tu);
                    uvs.push(tv);

                    positions.push((radiusTop * x) + centerX);
                    positions.push((heightHalf) + centerY);
                    positions.push((radiusTop * z) + centerZ);
                }

                for (i = 0; i < radialSegments; i++) {
                    center = startIndex;
                    first = startIndex + 1 + i;

                    indices.push(first);
                    indices.push(first + 1);
                    indices.push(center);
                }
            }

            // create bottom cap
            if (!openEnded && radiusBottom > 0) {

                startIndex = (positions.length / 3);

                // top center
                normals.push(0.0);
                normals.push(-1.0);
                normals.push(0.0);

                uvs.push(0.5);
                uvs.push(0.5);

                positions.push(0 + centerX);
                positions.push(0 - heightHalf + centerY);
                positions.push(0 + centerZ);

                // top triangle fan
                for (i = 0; i <= radialSegments; i++) {

                    x = Math.sin(i * radialAngle);
                    z = Math.cos(i * radialAngle);

                    tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;
                    tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;

                    normals.push(radiusBottom * x);
                    normals.push(-1.0);
                    normals.push(radiusBottom * z);

                    uvs.push(tu);
                    uvs.push(tv);

                    positions.push((radiusBottom * x) + centerX);
                    positions.push((0 - heightHalf) + centerY);
                    positions.push((radiusBottom * z) + centerZ);
                }

                for (i = 0; i < radialSegments; i++) {

                    center = startIndex;
                    first = startIndex + 1 + i;

                    indices.push(center);
                    indices.push(first + 1);
                    indices.push(first);
                }
            }

            this.positions = positions;
            this.normals = normals;
            this.uv = uvs;
            this.indices = indices;
        },

        _props: {

            /**
             * The CylinderGeometry's level-of-detail factor.
             *
             * Fires a {{#crossLink "CylinderGeometry/lod:event"}}{{/crossLink}} event on change.
             *
             * @property lod
             * @default 1
             * @type Number
             */
            lod: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._lod === value) {
                        return;
                    }

                    if (value < 0 || value > 1) {
                        this.warn("clamping lod to [0..1]");
                        value = value < 0 ? 0 : 1;
                    }

                    this._lod = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/lod:property"}}{{/crossLink}} property changes.
                     * @event lod
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("lod", this._lod);
                },

                get: function () {
                    return this._lod;
                }
            },

            /**
             * 3D point indicating the center position of this CylinderGeometry.
             *
             * Fires an {{#crossLink "CylinderGeometry/center:event"}}{{/crossLink}} event on change.
             *
             * @property center
             * @default [0,0,0]
             * @type {Float32Array}
             */
            center: {

                set: function (value) {

                    (this._center = this._center || new xeogl.math.vec3()).set(value || [0, 0, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/center:property"}}{{/crossLink}} property changes.
                     @event center
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("center", this._center);
                },

                get: function () {
                    return this._center;
                }
            },

            /**
             * The CylinderGeometry's top radius.
             *
             * Fires a {{#crossLink "CylinderGeometry/radiusTop:event"}}{{/crossLink}} event on change.
             *
             * @property radiusTop
             * @default 1
             * @type Number
             */
            radiusTop: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._radiusTop === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative radiusTop not allowed - will invert");
                        value = value * -1;
                    }

                    this._radiusTop = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/radiusTop:property"}}{{/crossLink}} property changes.
                     * @event radiusTop
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("radiusTop", this._radiusTop);
                },

                get: function () {
                    return this._radiusTop;
                }
            },

            /**
             * The CylinderGeometry's bottom radius.
             *
             * Fires a {{#crossLink "CylinderGeometry/radiusBottom:event"}}{{/crossLink}} event on change.
             *
             * @property radiusBottom
             * @default 1
             * @type Number
             */
            radiusBottom: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._radiusBottom === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative radiusBottom not allowed - will invert");
                        value = value * -1;
                    }

                    this._radiusBottom = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/radiusBottom:property"}}{{/crossLink}} property changes.
                     * @event radiusBottom
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("radiusBottom", this._radiusBottom);
                },

                get: function () {
                    return this._radiusBottom;
                }
            },

            /**
             * The CylinderGeometry's height.
             *
             * Fires a {{#crossLink "CylinderGeometry/height:event"}}{{/crossLink}} event on change.
             *
             * @property height
             * @default 1
             * @type Number
             */
            height: {

                set: function (value) {

                    value = value || 1;

                    if (this._height === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative height not allowed - will invert");
                        value = value * -1;
                    }

                    this._height = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/height:property"}}{{/crossLink}} property changes.
                     * @event height
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("height", this._height);
                },

                get: function () {
                    return this._height;
                }
            },

            /**
             * The CylinderGeometry's radial segments.
             *
             * Fires a {{#crossLink "CylinderGeometry/radialSegments:event"}}{{/crossLink}} event on change.
             *
             * @property radialSegments
             * @default 60
             * @type Number
             */
            radialSegments: {

                set: function (value) {

                    value = value || 60;

                    if (this._radialSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative radialSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._radialSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/radialSegments:property"}}{{/crossLink}} property changes.
                     * @event radialSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("radialSegments", this._radialSegments);
                },

                get: function () {
                    return this._radialSegments;
                }
            },

            /**
             * The CylinderGeometry's height segments.
             *
             * Fires a {{#crossLink "CylinderGeometry/heightSegments:event"}}{{/crossLink}} event on change.
             *
             * @property heightSegments
             * @default 1
             * @type Number
             */
            heightSegments: {

                set: function (value) {

                    value = value || 1;

                    if (this._heightSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative heightSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._heightSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/heightSegments:property"}}{{/crossLink}} property changes.
                     * @event heightSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("heightSegments", this._heightSegments);
                },

                get: function () {
                    return this._heightSegments;
                }
            },

            /**
             * Indicates whether this CylinderGeometry's is open-ended.
             *
             * Fires a {{#crossLink "CylinderGeometry/openEnded:event"}}{{/crossLink}} event on change.
             *
             * @property openEnded
             * @default false
             * @type Boolean
             */
            openEnded: {

                set: function (value) {

                    value = value === undefined ? false : value;

                    if (this._openEnded === value) {
                        return;
                    }

                    this._openEnded = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this CylinderGeometry's {{#crossLink "CylinderGeometry/openEnded:property"}}{{/crossLink}} property changes.
                     * @event openEnded
                     * @type Boolean
                     * @param value The property's new value
                     */
                    this.fire("openEnded", this._openEnded);
                },

                get: function () {
                    return this._openEnded;
                }
            }
        },


        _getJSON: function () {
            return {
                // Don't save lod
                center: this._center.slice(),
                radiusTop: this._radiusTop,
                radiusBottom: this._radiusBottom,
                height: this._height,
                radialSegments: this._radialSegments,
                heightSegments: this._heightSegments,
                openEnded: this._openEnded
            };
        }
    });

})();
;/**
 A **PlaneGeometry** is a parameterized {{#crossLink "Geometry"}}{{/crossLink}} that defines a plane-shaped mesh for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#geometry_PlaneGeometry"><img src="../../assets/images/screenshots/PlaneGeometry.png"></img></a>

 ## Overview

 * A PlaneGeometry lies in the X-Z plane.
 * Dynamically modify it's shape at any time by updating its {{#crossLink "PlaneGeometry/center:property"}}{{/crossLink}}, {{#crossLink "PlaneGeometry/xSize:property"}}{{/crossLink}}, {{#crossLink "PlaneGeometry/zSize:property"}}{{/crossLink}}, {{#crossLink "PlaneGeometry/xSegments:property"}}{{/crossLink}} and
 {{#crossLink "PlaneGeometry/zSegments:property"}}{{/crossLink}} properties.
 * Dynamically switch its primitive type between ````"points"````, ````"lines"```` and ````"triangles"```` at any time by
 updating its {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} property.
 
 ## Examples

 * [Textured PlaneGeometry](../../examples/#geometry_PlaneGeometry)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a PlaneGeometry and a {{#crossLink "PhongMaterial"}}{{/crossLink}} with
 diffuse {{#crossLink "Texture"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.PlaneGeometry({
         primitive: "triangles",
         center: [0,0,0],
         xSize: 2,
         zSize: 2,
         xSegments: 10,
         zSegments: 10,
         lod: 1.0 // Default
     }),

     material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
     })
 });
 ````

 @class PlaneGeometry
 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this PlaneGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this PlaneGeometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values for a PlaneGeometry are 'points', 'lines' and 'triangles'.
 @param [cfg.center] {Float32Array} 3D point indicating the center position of the PlaneGeometry.
 @param [cfg.xSize=1] {Number} Dimension on the X-axis.
 @param [cfg.zSize=1] {Number} Dimension on the Z-axis.
 @param [cfg.xSegments=1] {Number} Number of segments on the X-axis.
 @param [cfg.zSegments=1] {Number} Number of segments on the Z-axis.

 @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].
 @extends Geometry
 */
(function () {

    "use strict";

    xeogl.PlaneGeometry = xeogl.Geometry.extend({

        type: "xeogl.PlaneGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.center = cfg.center;
            
            this.xSize = cfg.xSize;
            this.zSize = cfg.zSize;

            this.xSegments = cfg.xSegments;
            this.zSegments = cfg.zSegments;

            this.lod = cfg.lod;

            this.autoNormals = cfg.autoNormals !== false;
        },

        /**
         * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
         * to generate geometry data arrays.
         *
         * @protected
         */
        _update: function () {

            var centerX = this._center[0];
            var centerY = this._center[1];
            var centerZ = this._center[2];

            var width = this._xSize;
            var height = this._zSize;

            var xSegments = Math.floor(this._lod * this._xSegments);
            var zSegments = Math.floor(this._lod * this._zSegments);

            if (zSegments < 1) {
                zSegments = 1;
            }

            if (zSegments < 1) {
                zSegments = 1;
            }

            var halfWidth = width / 2;
            var halfHeight = height / 2;

            var planeX = Math.floor(xSegments) || 1;
            var planeZ = Math.floor(zSegments) || 1;

            var planeX1 = planeX + 1;
            var planeZ1 = planeZ + 1;

            var segmentWidth = width / planeX;
            var segmentHeight = height / planeZ;

            var positions = new Float32Array(planeX1 * planeZ1 * 3);
            var normals = new Float32Array(planeX1 * planeZ1 * 3);
            var uvs = new Float32Array(planeX1 * planeZ1 * 2);

            var offset = 0;
            var offset2 = 0;

            var iz;
            var ix;
            var x;
            var a;
            var b;
            var c;
            var d;

            for (iz = 0; iz < planeZ1; iz++) {

                var z = iz * segmentHeight - halfHeight;

                for (ix = 0; ix < planeX1; ix++) {

                    x = ix * segmentWidth - halfWidth;

                    positions[offset] = x + centerX;
                    positions[offset + 1] = centerY;
                    positions[offset + 2] = -z + centerZ;

                    normals[offset + 2] = -1;

                    uvs[offset2] = (planeX - ix) / planeX;
                    uvs[offset2 + 1] = ( (planeZ - iz) / planeZ );

                    offset += 3;
                    offset2 += 2;
                }
            }

            offset = 0;

            var indices = new ( ( positions.length / 3 ) > 65535 ? Uint32Arraz : Uint16Array )(planeX * planeZ * 6);

            for (iz = 0; iz < planeZ; iz++) {

                for (ix = 0; ix < planeX; ix++) {

                    a = ix + planeX1 * iz;
                    b = ix + planeX1 * ( iz + 1 );
                    c = ( ix + 1 ) + planeX1 * ( iz + 1 );
                    d = ( ix + 1 ) + planeX1 * iz;

                    indices[offset] = d;
                    indices[offset + 1] = b;
                    indices[offset + 2] = a;

                    indices[offset + 3] = d;
                    indices[offset + 4] = c;
                    indices[offset + 5] = b;

                    offset += 6;
                }
            }

            this.positions = positions;
            this.normals = normals;
            this.uv = uvs;
            this.indices = indices;
        },


        _props: {

            /**
             * The PlaneGeometry's level-of-detail factor.
             *
             * Fires a {{#crossLink "PlaneGeometry/lod:event"}}{{/crossLink}} event on change.
             *
             * @property lod
             * @default 1
             * @type Number
             */
            lod: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._lod === value) {
                        return;
                    }

                    if (value < 0 || value > 1) {
                        this.warn("clamping lod to [0..1]");
                        value = value < 0 ? 0 : 1;
                    }

                    this._lod = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this PlaneGeometry's {{#crossLink "PlaneGeometry/lod:property"}}{{/crossLink}} property changes.
                     * @event lod
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("lod", this._lod);
                },

                get: function () {
                    return this._lod;
                }
            },

            /**
             * 3D point indicating the center position of this PlaneGeometry.
             *
             * Fires an {{#crossLink "PlaneGeometry/center:event"}}{{/crossLink}} event on change.
             *
             * @property center
             * @default [0,0,0]
             * @type {Float32Array}
             */
            center: {

                set: function (value) {

                    (this._center = this._center || new xeogl.math.vec3()).set(value || [0, 0, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this PlaneGeometry's {{#crossLink "PlaneGeometry/center:property"}}{{/crossLink}} property changes.
                     @event center
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("center", this._center);
                },

                get: function () {
                    return this._center;
                }
            },

            /**
             * The PlaneGeometry's dimension on the X-axis.
             *
             * Fires a {{#crossLink "PlaneGeometry/xSize:event"}}{{/crossLink}} event on change.
             *
             * @property xSize
             * @default 1
             * @type Number
             */
            xSize: {

                set: function (value) {

                    value = value || 1;

                    if (this._xSize === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative xSize not allowed - will invert");
                        value = value * -1;
                    }

                    this._xSize = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this PlaneGeometry's {{#crossLink "PlaneGeometry/xSize:property"}}{{/crossLink}} property changes.
                     * @event xSize
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("xSize", this._xSize);
                },

                get: function () {
                    return this._xSize;
                }
            },

            /**
             * The PlaneGeometry's dimension on the Y-axis.
             *
             * Fires a {{#crossLink "PlaneGeometry/zSize:event"}}{{/crossLink}} event on change.
             *
             * @property zSize
             * @default 1.0
             * @type Number
             */
            zSize: {

                set: function (value) {

                    value = value || 1.0;

                    if (this._zSize === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative zSize not allowed - will invert");
                        value = value * -1;
                    }

                    this._zSize = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this PlaneGeometry's {{#crossLink "PlaneGeometry/zSize:property"}}{{/crossLink}} property changes.
                     * @event zSize
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("zSize", this._zSize);
                },

                get: function () {
                    return this._zSize;
                }
            },

            /**
             * The PlaneGeometry's number of segments on the X-axis.
             *
             * Fires a {{#crossLink "PlaneGeometry/xSegments:event"}}{{/crossLink}} event on change.
             *
             * @property xSegments
             * @default 1
             * @type Number
             */
            xSegments: {

                set: function (value) {

                    value = value || 1;

                    if (this._xSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative xSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._xSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this PlaneGeometry's {{#crossLink "PlaneGeometry/xSegments:property"}}{{/crossLink}} property changes.
                     * @event xSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("xSegments", this._xSegments);
                },

                get: function () {
                    return this._xSegments;
                }
            },

            /**
             * The PlaneGeometry's number of segments on the Y-axis.
             *
             * Fires a {{#crossLink "PlaneGeometry/zSegments:event"}}{{/crossLink}} event on change.
             *
             * @property zSegments
             * @default 1
             * @type Number
             */
            zSegments: {

                set: function (value) {

                    value = value || 1;

                    if (this._zSegments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative zSegments not allowed - will invert");
                        value = value * -1;
                    }

                    this._zSegments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this PlaneGeometry's {{#crossLink "PlaneGeometry/zSegments:property"}}{{/crossLink}} property changes.
                     * @event zSegments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("zSegments", this._zSegments);
                },

                get: function () {
                    return this._zSegments;
                }
            }
        },

        _getJSON: function () {
            return {
                center: this._center.slice(),
                xSize: this._xSize,
                zSize: this._zSize,
                xSegments: this._xSegments,
                zSegments: this._zSegments
            };
        }
    });

})();
;/**
 A **LatheGeometry** is a {{#crossLink "Geometry"}}{{/crossLink}} that's defined as the revolution of a profile about an exis.

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a LatheGeometry and a {{#crossLink "PhongMaterial"}}{{/crossLink}} with
 diffuse {{#crossLink "Texture"}}{{/crossLink}}:

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.LatheGeometry({
        primitive: "triangles",
        points: [
            [ 0, 0,  8],
            [-2, 0,  5],
            [-1, 0,  5.1],
            [-1, 0, -2],
            [ 0, 0, -2]
        ],
        segments: 10,
        phiStart: 0,
        phiLength:90,
        lod: 1.0, // Default
        autoNormals: true // Default
     }),

     material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
     })
 });
 ````

 @module xeogl
 @submodule geometry
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this LatheGeometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
 generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this LatheGeometry.
 @param [cfg.primitive="triangles"] {String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.
 @param [cfg.points=[]] Profile points.
 @param [cfg.segments=4] {Number} Number of revolution segments.
 @param [cfg.phiStart=0] {Number} Angle in degrees at which revolution starts.
 @param [cfg.phiLength=360] {Number} Length of revolution in degrees.
 @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].
 @extends Geometry
 */
(function () {

    "use strict";

    xeogl.LatheGeometry = xeogl.Geometry.extend({

        type: "xeogl.LatheGeometry",

        _init: function (cfg) {

            this._super(cfg);

            this.points = cfg.points;
            this.segments = cfg.segments;
            this.phiStart = cfg.phiStart;
            this.phiLength = cfg.phiLength;
            this.lod = cfg.lod;
            this.autoNormals = cfg.autoNormals !== false;
        },

        /**
         * Implement protected virtual template method {{#crossLink "Geometry/method:_update"}}{{/crossLink}},
         * to generate geometry data arrays.
         *
         * @protected
         */
        _update: function () {

            var positions = [];
            var uvs = [];
            var indices = [];
            var segments = Math.floor(this._lod * this._segments);
            if (segments < 4) {
                segments = 4;
            }
            var phiStart = this._phiStart * xeogl.math.DEGTORAD;
            var phiLength = this._phiLength * xeogl.math.DEGTORAD;
            var points = this._points;
            var inversePointLength = 1.0 / ( points.length - 1 );
            var inverseSegments = 1.0 / segments;

            for (var i = 0, il = segments; i <= il; i++) {

                var phi = phiStart + i * inverseSegments * phiLength;

                var c = Math.cos(phi);
                var s = Math.sin(phi);

                for (var j = 0, jl = points.length; j < jl; j++) {

                    var pt = points[j];

                    positions.push(c * pt[0] - s * pt[1]);
                    positions.push(s * pt[0] + c * pt[1]);
                    positions.push(pt[2]);
                }
            }

            var np = points.length;

            for (var i = 0, il = segments; i < il; i++) {

                for (var j = 0, jl = points.length - 1; j < jl; j++) {

                    var base = j + np * i;
                    var a = base;
                    var b = base + np;
                    var c = base + 1 + np;
                    var d = base + 1;

                    var u0 = i * inverseSegments;
                    var v0 = j * inversePointLength;
                    var u1 = u0 + inverseSegments;
                    var v1 = v0 + inversePointLength;

                    indices.push(d);
                    indices.push(b);
                    indices.push(a);

                    //uvs.push(u0);
                    //uvs.push(v0);
                    //
                    //uvs.push(u1);
                    //uvs.push(v0);
                    //
                    //uvs.push(u0);
                    //uvs.push(v1);

                    indices.push(d);
                    indices.push(c);
                    indices.push(b);

                    //uvs.push(u1);
                    //uvs.push(v0);
                    //
                    //uvs.push(u1);
                    //uvs.push(v1);
                    //
                    //uvs.push(u0);
                    //uvs.push(v1);
                }
            }

            this.positions = positions;
         //   this.normals = positions;
          //  this.uv = positions;
            this.indices = indices;
        },

        _props: {

            /**
             Profile points on this LatheGeometry.

             Fires a {{#crossLink "LatheGeometry/points:event"}}{{/crossLink}} event on change.

             @property points
             @default []
             @type Float32Array
             */
            points: {

                set: function (value) {

                    this._points = value || [];

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this LatheGeometry's
                     * {{#crossLink "LatheGeometry/points:property"}}{{/crossLink}} property changes.
                     * @event points
                     * @param value The property's new value
                     */
                    this.fire("points", this._points);
                },

                get: function () {
                    return this._points;
                }
            },

            /**
             * The LatheGeometry's level-of-detail factor.
             *
             * Fires a {{#crossLink "LatheGeometry/lod:event"}}{{/crossLink}} event on change.
             *
             * @property lod
             * @default 1
             * @type Number
             */
            lod: {

                set: function (value) {

                    value = value !== undefined ? value : 1;

                    if (this._lod === value) {
                        return;
                    }

                    if (value < 0 || value > 1) {
                        this.warn("clamping lod to [0..1]");
                        value = value < 0 ? 0 : 1;
                    }

                    this._lod = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this LatheGeometry's {{#crossLink "LatheGeometry/lod:property"}}{{/crossLink}} property changes.
                     * @event lod
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("lod", this._lod);
                },

                get: function () {
                    return this._lod;
                }
            },

            /**
             * Angle at which this LatheGeometry's rotation starts.
             *
             * Fires a {{#crossLink "LatheGeometry/phiStart:event"}}{{/crossLink}} event on change.
             *
             * @property phiStart
             * @default 0
             * @type Number
             */
            phiStart: {

                set: function (value) {

                    value = value || 0;

                    if (this._phiStart === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative phiStart not allowed - will invert");
                        value = value * -1;
                    }

                    this._phiStart = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this LatheGeometry's {{#crossLink "LatheGeometry/phiStart:property"}}{{/crossLink}} property changes.
                     * @event phiStart
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("phiStart", this._phiStart);
                },

                get: function () {
                    return this._phiStart;
                }
            },

            /**
             * Angle at which this LatheGeometry's rotation starts.
             *
             * Fires a {{#crossLink "LatheGeometry/phiLength:event"}}{{/crossLink}} event on change.
             *
             * @property phiLength
             * @default 1
             * @type Number
             */
            phiLength: {

                set: function (value) {

                    value = value || 1;

                    if (this._phiLength === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative phiLength not allowed - will invert");
                        value = value * -1;
                    }

                    this._phiLength = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this LatheGeometry's {{#crossLink "LatheGeometry/phiLength:property"}}{{/crossLink}} property changes.
                     * @event phiLength
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("phiLength", this._phiLength);
                },

                get: function () {
                    return this._phiLength;
                }
            },

            /**
             * The LatheGeometry's number of segments of rotation.
             *
             * Fires a {{#crossLink "LatheGeometry/segments:event"}}{{/crossLink}} event on change.
             *
             * @property segments
             * @default 4
             * @type Number
             */
            segments: {

                set: function (value) {

                    value = Math.floor(value || 4);

                    if (this._segments === value) {
                        return;
                    }

                    if (value < 0) {
                        this.warn("negative segments not allowed - will invert");
                        value = value * -1;
                    }

                    this._segments = value;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this LatheGeometry's {{#crossLink "LatheGeometry/segments:property"}}{{/crossLink}} property changes.
                     * @event segments
                     * @type Number
                     * @param value The property's new value
                     */
                    this.fire("segments", this._segments);
                },

                get: function () {
                    return this._segments;
                }
            }
        },

        _getJSON: function () {
            return {
                points: this._points,
                phiStart: this._phiStart,
                phiLength: this._phiLength,
                segments: this._segments
            };
        }
    });

})();
;/**
 * Components for capturing user input.
 *
 * @module xeogl
 * @submodule input
 */;/**
 Publishes keyboard and mouse events that occur on the parent {{#crossLink "Scene"}}{{/crossLink}}'s {{#crossLink "Canvas"}}{{/crossLink}}.

 * Each {{#crossLink "Scene"}}{{/crossLink}} provides an Input on itself as a read-only property.

 <img src="../../../assets/images/Input.png"></img>

 ## Usage

 In this example, we're subscribing to some mouse and key events that will occur on
 a {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}Canvas{{/crossLink}}.

 ````javascript
 var myScene = new xeogl.Scene();

 var input = myScene.input;

 // We'll save a handle to this subscription
 // to show how to unsubscribe, further down
 var handle = input.on("mousedown", function(coords) {
       console.log("Mouse down at: x=" + coords[0] + ", y=" + coords[1]);
 });

 input.on("mouseup", function(coords) {
       console.log("Mouse up at: x=" + coords[0] + ", y=" + coords[1]);
 });

 input.on("mouseclicked", function(coords) {
      console.log("Mouse clicked at: x=" + coords[0] + ", y=" + coords[1]);
 });

 input.on("dblclick", function(coords) {
       console.log("Double-click at: x=" + coords[0] + ", y=" + coords[1]);
 });

 input.on("keydown", function(keyCode) {
        switch (keyCode) {

            case this.KEY_A:
               console.log("The 'A' key is down");
               break;

            case this.KEY_B:
               console.log("The 'B' key is down");
               break;

            case this.KEY_C:
               console.log("The 'C' key is down");
               break;

            default:
               console.log("Some other key is down");
       }
     });

 input.on("keyup", function(keyCode) {
        switch (keyCode) {

            case this.KEY_A:
               console.log("The 'A' key is up");
               break;

            case this.KEY_B:
               console.log("The 'B' key is up");
               break;

            case this.KEY_C:
               console.log("The 'C' key is up");
               break;

            default:
               console.log("Some other key is up");
        }
     });

 // TODO: ALT and CTRL keys etc
 ````

 ### Unsubscribing from Events

 In the snippet above, we saved a handle to one of our event subscriptions.

 We can then use that handle to unsubscribe again, like this:

 ````javascript
 input.off(handle);
 ````

 @class Input
 @module xeogl
 @submodule input
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Input = xeogl.Component.extend({

        type: "xeogl.Input",

        serializable: false,

        _init: function (cfg) {

            var self = this;

            // True when ALT down
            this.altDown = false;

            /** True whenever CTRL is down
             *
             * @type {boolean}
             */
            this.ctrlDown = false;

            /** True whenever left mouse button is down
             *
             * @type {boolean}
             */
            this.mouseDownLeft = false;

            /** True whenever middle mouse button is down
             *
             * @type {boolean}
             */
            this.mouseDownMiddle = false;

            /** True whenever right mouse button is down
             *
             * @type {boolean}
             */
            this.mouseDownRight = false;

            /** Flag for each key that's down
             *
             * @type {boolean}
             */
            this.keyDown = [];

            /** True while input enabled
             *
             * @type {boolean}
             */
            this.enabled = true;

            /** True while mouse is over the parent {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}Canvas{{/crossLink}}
             *
             * @type {boolean}
             */
            this.mouseover = false;

            // Capture input events and publish them on this component

            document.addEventListener("keydown",
                this._keyDownListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    if (e.target.tagName !== "INPUT" && e.target.tagName !== "TEXTAREA") {

                        if (e.ctrlKey) {
                            self.ctrlDown = true;

                        } else if (e.altKey) {
                            self.altDown = true;

                        } else {
                            self.keyDown[e.keyCode] = true;

                            /**
                             * Fired whenever a key is pressed while the parent
                             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}} has input focus.
                             * @event keydown
                             * @param value {Number} The key code, for example {{#crossLink "Input/KEY_LEFT_ARROW:property"}}{{/crossLink}},
                             */
                            self.fire("keydown", e.keyCode, true);
                        }
                    }

                    if (self.mouseover) {
                        e.preventDefault();
                    }

                }, true);

            document.addEventListener("keyup",
                this._keyUpListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    if (e.target.tagName !== "INPUT" && e.target.tagName !== "TEXTAREA") {

                        if (e.ctrlKey) {
                            self.ctrlDown = false;

                        } else if (e.altKey) {
                            self.altDown = false;

                        } else {
                            self.keyDown[e.keyCode] = false;

                            /**
                             * Fired whenever a key is released while the parent
                             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}} has input focus.
                             * @event keyup
                             * @param value {Number} The key code, for example {{#crossLink "Input/KEY_LEFT_ARROW:property"}}{{/crossLink}},
                             */
                            self.fire("keyup", e.keyCode, true);
                        }
                    }
                });

            cfg.element.addEventListener("mouseenter",
                this._mouseDownListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    self.mouseover = true;

                    var coords = self._getClickCoordsWithinElement(e);

                    /**
                     * Fired whenever the mouse is moved into of the parent
                     * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event mouseenter
                     * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                     */
                    self.fire("mouseenter", coords, true);
                });

            cfg.element.addEventListener("mouseleave",
                this._mouseDownListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    self.mouseover = false;

                    var coords = self._getClickCoordsWithinElement(e);

                    /**
                     * Fired whenever the mouse is moved out of the parent
                     * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event mouseleave
                     * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                     */
                    self.fire("mouseleave", coords, true);
                });


            document.addEventListener("mousedown",
                this._mouseDownListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    switch (e.which) {

                        case 1:// Left button
                            self.mouseDownLeft = true;
                            break;

                        case 2:// Middle/both buttons
                            self.mouseDownMiddle = true;
                            break;

                        case 3:// Right button
                            self.mouseDownRight = true;
                            break;

                        default:
                            break;
                    }

                    var coords = self._getClickCoordsWithinElement(e);

                    /**
                     * Fired whenever the mouse is pressed over the parent
                     * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event mousedown
                     * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                     */
                    self.fire("mousedown", coords, true);

                    if (self.mouseover) {
                        e.preventDefault();
                    }
                });

            document.addEventListener("mouseup",
                this._mouseUpListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    switch (e.which) {

                        case 1:// Left button
                            self.mouseDownLeft = false;
                            break;

                        case 2:// Middle/both buttons
                            self.mouseDownMiddle = false;
                            break;

                        case 3:// Right button
                            self.mouseDownRight = false;
                            break;

                        default:
                            break;
                    }

                    var coords = self._getClickCoordsWithinElement(e);

                    /**
                     * Fired whenever the mouse is released over the parent
                     * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event mouseup
                     * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                     */
                    self.fire("mouseup", coords, true);

                    if (self.mouseover) {
                        e.preventDefault();
                    }
                }, true);

            document.addEventListener("dblclick",
                this._dblClickListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    switch (e.which) {

                        case 1:// Left button
                            self.mouseDownLeft = false;
                            self.mouseDownRight = false;
                            break;

                        case 2:// Middle/both buttons
                            self.mouseDownMiddle = false;
                            break;

                        case 3:// Right button
                            self.mouseDownLeft = false;
                            self.mouseDownRight = false;
                            break;

                        default:
                            break;
                    }

                    var coords = self._getClickCoordsWithinElement(e);

                    /**
                     * Fired whenever the mouse is double-clicked over the parent
                     * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event dblclick
                     * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                     */
                    self.fire("dblclick", coords, true);

                    if (self.mouseover) {
                        e.preventDefault();
                    }
                });

            document.addEventListener("mousemove",
                this._mouseMoveListener = function (e) {

                    if (!self.enabled) {
                        return;
                    }

                    var coords = self._getClickCoordsWithinElement(e);

                    /**
                     * Fired whenever the mouse is moved over the parent
                     * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event mousedown
                     * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                     */
                    self.fire("mousemove", coords, true);

                    if (self.mouseover) {
                        e.preventDefault();
                    }
                });

            cfg.element.addEventListener("wheel",
                this._mouseWheelListener = function (e, d) {

                    if (!self.enabled) {
                        return;
                    }

                    var delta = Math.max(-1, Math.min(1, -e.deltaY * 40));

                    /**
                     * Fired whenever the mouse wheel is moved over the parent
                     * {{#crossLink "Viewer"}}Viewer{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                     * @event mousewheel
                     * @param delta {Number} The mouse wheel delta,
                     */
                    self.fire("mousewheel", delta, true);

                    if (self.mouseover) {
                        e.preventDefault();
                    }
                });

            // mouseclicked

            (function () {

                var downX;
                var downY;

                // Tolerance between down and up positions for a mouse click
                var tolerance = 2;

                self.on("mousedown",
                    function (params) {
                        downX = params[0];
                        downY = params[1];
                    });

                self.on("mouseup",
                    function (params) {

                        if (downX >= (params[0] - tolerance) &&
                            downX <= (params[0] + tolerance) &&
                            downY >= (params[1] - tolerance) &&
                            downY <= (params[1] + tolerance)) {

                            /**
                             * Fired whenever the mouse is clicked over the parent
                             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas{{/crossLink}}.
                             * @event mouseclicked
                             * @param value {[Number, Number]} The mouse coordinates within the {{#crossLink "Canvas"}}Canvas{{/crossLink}},
                             */
                            self.fire("mouseclicked", params, true);
                        }
                    });
            })();

            // VR

            (function () {

                var orientationAngleLookup = {
                    'landscape-primary': 90,
                    'landscape-secondary': -90,
                    'portrait-secondary': 180,
                    'portrait-primary': 0
                };

                var orientation;
                var orientationAngle;
                var acceleration = xeogl.math.vec3();
                var accelerationIncludingGravity = xeogl.math.vec3();

                var orientationChangeEvent = {
                    orientation: null,
                    orientationAngle: 0
                };

                var deviceMotionEvent = {
                    orientationAngle: 0,
                    acceleration: null,
                    accelerationIncludingGravity: accelerationIncludingGravity,
                    rotationRate: xeogl.math.vec3(),
                    interval: 0
                };

                var deviceOrientationEvent = {
                    alpha: 0,
                    beta: 0,
                    gamma: 0,
                    absolute: false
                };

                if (!window.OrientationChangeEvent) {
                    self.warn("Browser event not supported: orientationchange");

                } else {

                    window.addEventListener('orientationchange',
                        self._orientationchangedListener = function () {

                            orientation = window.screen.orientation || window.screen.mozOrientation || window.msOrientation || null;
                            orientationAngle = orientation ? (orientationAngleLookup[orientation] || 0) : 0;

                            orientationChangeEvent.orientation = orientation;
                            orientationChangeEvent.orientationAngle = orientationAngle;

                            /**
                             * Fired when the orientation of the device has changed.
                             *
                             * @event orientationchange
                             * @param orientation The orientation: "landscape-primary", "landscape-secondary", "portrait-secondary" or "portrait-primary"
                             * @param orientationAngle The orientation angle in degrees: 90 for landscape-primary, -90 for landscape-secondary, 180 for portrait-secondary or 0 for portrait-primary.
                             */
                            self.fire("orientationchange", orientationChangeEvent);
                        },
                        false);
                }

                if (!window.DeviceMotionEvent) {
                    self.warn("Browser event not supported: devicemotion");

                } else {

                    window.addEventListener('devicemotion',
                        self._deviceMotionListener = function (e) {

                            deviceMotionEvent.interval = e.interval;
                            deviceMotionEvent.orientationAngle = orientationAngle;

                            var accel = e.acceleration;

                            if (accel) {
                                acceleration[0] = accel.x;
                                acceleration[1] = accel.y;
                                acceleration[2] = accel.z;
                                deviceMotionEvent.acceleration = acceleration;
                            } else {
                                deviceMotionEvent.acceleration = null;
                            }

                            var accelGrav = e.accelerationIncludingGravity;

                            if (accelGrav) {
                                accelerationIncludingGravity[0] = accelGrav.x;
                                accelerationIncludingGravity[1] = accelGrav.y;
                                accelerationIncludingGravity[2] = accelGrav.z;
                                deviceMotionEvent.accelerationIncludingGravity = accelerationIncludingGravity;
                            } else {
                                deviceMotionEvent.accelerationIncludingGravity = null;
                            }

                            deviceMotionEvent.rotationRate = e.rotationRate;

                            /**
                             * Fires on a regular interval and returns data about the rotation
                             * (in degrees per second) and acceleration (in meters per second squared) of the device, at that moment in
                             * time. Some devices do not have the hardware to exclude the effect of gravity.
                             *
                             * @event devicemotion
                             * @param Float32Array acceleration The acceleration of the device, in meters per second squared, as a 3-element vector. This value has taken into account the effect of gravity and removed it from the figures. This value may not exist if the hardware doesn't know how to remove gravity from the acceleration data.
                             * @param Float32Array accelerationIncludingGravity The acceleration of the device, in meters per second squared, as a 3-element vector. This value includes the effect of gravity, and may be the only value available on devices that don't have a gyroscope to allow them to properly remove gravity from the data.
                             * @param, Number interval The interval, in milliseconds, at which this event is fired. The next event will be fired in approximately this amount of time.
                             * @param  Float32Array rotationRate The rates of rotation of the device about each axis, in degrees per second.
                             */
                            self.fire("devicemotion", deviceMotionEvent);
                        },
                        false);
                }

                if (!window.DeviceOrientationEvent) {
                    self.warn("Browser event not supported: deviceorientation");

                } else {

                    window.addEventListener("deviceorientation",
                        self._deviceOrientListener = function (e) {

                            deviceOrientationEvent.gamma = e.gamma;
                            deviceOrientationEvent.beta = e.beta;
                            deviceOrientationEvent.alpha = e.alpha;
                            deviceOrientationEvent.absolute = e.absolute;

                            /**
                             * Fired when fresh data is available from an orientation sensor about the current orientation
                             * of the device as compared to the Earth coordinate frame. This data is gathered from a
                             * magnetometer inside the device. See
                             * <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Orientation_and_motion_data_explained">Orientation and motion data explained</a> for more info.
                             *
                             * @event deviceorientation
                             * @param Number alpha The current orientation of the device around the Z axis in degrees; that is, how far the device is rotated around a line perpendicular to the device.
                             * @param Number beta The current orientation of the device around the X axis in degrees; that is, how far the device is tipped forward or backward.
                             * @param Number gamma The current orientation of the device around the Y axis in degrees; that is, how far the device is turned left or right.
                             * @param Boolean absolute This value is true if the orientation is provided as a difference between the device coordinate frame and the Earth coordinate frame; if the device can't detect the Earth coordinate frame, this value is false.
                             */
                            self.fire("deviceorientation", deviceOrientationEvent);
                        },
                        false);
                }
            })();
        },

        _getClickCoordsWithinElement: function (event) {
            var coords = [0, 0];
            if (!event) {
                event = window.event;
                coords.x = event.x;
                coords.y = event.y;
            }
            else {
                var element = event.target;
                var totalOffsetLeft = 0;
                var totalOffsetTop = 0;

                while (element.offsetParent) {
                    totalOffsetLeft += element.offsetLeft;
                    totalOffsetTop += element.offsetTop;
                    element = element.offsetParent;
                }
                coords[0] = event.pageX - totalOffsetLeft;
                coords[1] = event.pageY - totalOffsetTop;
            }
            return coords;
        },

        /**
         * Enable or disable all input handlers
         *
         * @param enable
         */
        setEnabled: function (enable) {
            if (this.enabled !== enable) {
                this.fire("enabled", this.enabled = enable);
            }
        },

        // Key codes

        /**
         * Code for the BACKSPACE key.
         * @property KEY_BACKSPACE
         * @final
         * @type Number
         */
        KEY_BACKSPACE: 8,

        /**
         * Code for the TAB key.
         * @property KEY_TAB
         * @final
         * @type Number
         */
        KEY_TAB: 9,

        /**
         * Code for the ENTER key.
         * @property KEY_ENTER
         * @final
         * @type Number
         */
        KEY_ENTER: 13,

        /**
         * Code for the SHIFT key.
         * @property KEY_SHIFT
         * @final
         * @type Number
         */
        KEY_SHIFT: 16,

        /**
         * Code for the CTRL key.
         * @property KEY_CTRL
         * @final
         * @type Number
         */
        KEY_CTRL: 17,

        /**
         * Code for the ALT key.
         * @property KEY_ALT
         * @final
         * @type Number
         */
        KEY_ALT: 18,

        /**
         * Code for the PAUSE_BREAK key.
         * @property KEY_PAUSE_BREAK
         * @final
         * @type Number
         */
        KEY_PAUSE_BREAK: 19,

        /**
         * Code for the CAPS_LOCK key.
         * @property KEY_CAPS_LOCK
         * @final
         * @type Number
         */
        KEY_CAPS_LOCK: 20,

        /**
         * Code for the ESCAPE key.
         * @property KEY_ESCAPE
         * @final
         * @type Number
         */
        KEY_ESCAPE: 27,

        /**
         * Code for the PAGE_UP key.
         * @property KEY_PAGE_UP
         * @final
         * @type Number
         */
        KEY_PAGE_UP: 33,

        /**
         * Code for the PAGE_DOWN key.
         * @property KEY_PAGE_DOWN
         * @final
         * @type Number
         */
        KEY_PAGE_DOWN: 34,

        /**
         * Code for the END key.
         * @property KEY_END
         * @final
         * @type Number
         */
        KEY_END: 35,

        /**
         * Code for the HOME key.
         * @property KEY_HOME
         * @final
         * @type Number
         */
        KEY_HOME: 36,

        /**
         * Code for the LEFT_ARROW key.
         * @property KEY_LEFT_ARROW
         * @final
         * @type Number
         */
        KEY_LEFT_ARROW: 37,

        /**
         * Code for the UP_ARROW key.
         * @property KEY_UP_ARROW
         * @final
         * @type Number
         */
        KEY_UP_ARROW: 38,

        /**
         * Code for the RIGHT_ARROW key.
         * @property KEY_RIGHT_ARROW
         * @final
         * @type Number
         */
        KEY_RIGHT_ARROW: 39,

        /**
         * Code for the DOWN_ARROW key.
         * @property KEY_DOWN_ARROW
         * @final
         * @type Number
         */
        KEY_DOWN_ARROW: 40,

        /**
         * Code for the INSERT key.
         * @property KEY_INSERT
         * @final
         * @type Number
         */
        KEY_INSERT: 45,

        /**
         * Code for the DELETE key.
         * @property KEY_DELETE
         * @final
         * @type Number
         */
        KEY_DELETE: 46,

        /**
         * Code for the 0 key.
         * @property KEY_NUM_0
         * @final
         * @type Number
         */
        KEY_NUM_0: 48,

        /**
         * Code for the 1 key.
         * @property KEY_NUM_1
         * @final
         * @type Number
         */
        KEY_NUM_1: 49,

        /**
         * Code for the 2 key.
         * @property KEY_NUM_2
         * @final
         * @type Number
         */
        KEY_NUM_2: 50,

        /**
         * Code for the 3 key.
         * @property KEY_NUM_3
         * @final
         * @type Number
         */
        KEY_NUM_3: 51,

        /**
         * Code for the 4 key.
         * @property KEY_NUM_4
         * @final
         * @type Number
         */
        KEY_NUM_4: 52,

        /**
         * Code for the 5 key.
         * @property KEY_NUM_5
         * @final
         * @type Number
         */
        KEY_NUM_5: 53,

        /**
         * Code for the 6 key.
         * @property KEY_NUM_6
         * @final
         * @type Number
         */
        KEY_NUM_6: 54,

        /**
         * Code for the 7 key.
         * @property KEY_NUM_7
         * @final
         * @type Number
         */
        KEY_NUM_7: 55,

        /**
         * Code for the 8 key.
         * @property KEY_NUM_8
         * @final
         * @type Number
         */
        KEY_NUM_8: 56,

        /**
         * Code for the 9 key.
         * @property KEY_NUM_9
         * @final
         * @type Number
         */
        KEY_NUM_9: 57,

        /**
         * Code for the A key.
         * @property KEY_A
         * @final
         * @type Number
         */
        KEY_A: 65,

        /**
         * Code for the B key.
         * @property KEY_B
         * @final
         * @type Number
         */
        KEY_B: 66,

        /**
         * Code for the C key.
         * @property KEY_C
         * @final
         * @type Number
         */
        KEY_C: 67,

        /**
         * Code for the D key.
         * @property KEY_D
         * @final
         * @type Number
         */
        KEY_D: 68,

        /**
         * Code for the E key.
         * @property KEY_E
         * @final
         * @type Number
         */
        KEY_E: 69,

        /**
         * Code for the F key.
         * @property KEY_F
         * @final
         * @type Number
         */
        KEY_F: 70,

        /**
         * Code for the G key.
         * @property KEY_G
         * @final
         * @type Number
         */
        KEY_G: 71,

        /**
         * Code for the H key.
         * @property KEY_H
         * @final
         * @type Number
         */
        KEY_H: 72,

        /**
         * Code for the I key.
         * @property KEY_I
         * @final
         * @type Number
         */
        KEY_I: 73,

        /**
         * Code for the J key.
         * @property KEY_J
         * @final
         * @type Number
         */
        KEY_J: 74,

        /**
         * Code for the K key.
         * @property KEY_K
         * @final
         * @type Number
         */
        KEY_K: 75,

        /**
         * Code for the L key.
         * @property KEY_L
         * @final
         * @type Number
         */
        KEY_L: 76,

        /**
         * Code for the M key.
         * @property KEY_M
         * @final
         * @type Number
         */
        KEY_M: 77,

        /**
         * Code for the N key.
         * @property KEY_N
         * @final
         * @type Number
         */
        KEY_N: 78,

        /**
         * Code for the O key.
         * @property KEY_O
         * @final
         * @type Number
         */
        KEY_O: 79,

        /**
         * Code for the P key.
         * @property KEY_P
         * @final
         * @type Number
         */
        KEY_P: 80,

        /**
         * Code for the Q key.
         * @property KEY_Q
         * @final
         * @type Number
         */
        KEY_Q: 81,

        /**
         * Code for the R key.
         * @property KEY_R
         * @final
         * @type Number
         */
        KEY_R: 82,

        /**
         * Code for the S key.
         * @property KEY_S
         * @final
         * @type Number
         */
        KEY_S: 83,

        /**
         * Code for the T key.
         * @property KEY_T
         * @final
         * @type Number
         */
        KEY_T: 84,

        /**
         * Code for the U key.
         * @property KEY_U
         * @final
         * @type Number
         */
        KEY_U: 85,

        /**
         * Code for the V key.
         * @property KEY_V
         * @final
         * @type Number
         */
        KEY_V: 86,

        /**
         * Code for the W key.
         * @property KEY_W
         * @final
         * @type Number
         */
        KEY_W: 87,

        /**
         * Code for the X key.
         * @property KEY_X
         * @final
         * @type Number
         */
        KEY_X: 88,

        /**
         * Code for the Y key.
         * @property KEY_Y
         * @final
         * @type Number
         */
        KEY_Y: 89,

        /**
         * Code for the Z key.
         * @property KEY_Z
         * @final
         * @type Number
         */
        KEY_Z: 90,

        /**
         * Code for the LEFT_WINDOW key.
         * @property KEY_LEFT_WINDOW
         * @final
         * @type Number
         */
        KEY_LEFT_WINDOW: 91,

        /**
         * Code for the RIGHT_WINDOW key.
         * @property KEY_RIGHT_WINDOW
         * @final
         * @type Number
         */
        KEY_RIGHT_WINDOW: 92,

        /**
         * Code for the SELECT key.
         * @property KEY_SELECT
         * @final
         * @type Number
         */
        KEY_SELECT_KEY: 93,

        /**
         * Code for the number pad 0 key.
         * @property KEY_NUMPAD_0
         * @final
         * @type Number
         */
        KEY_NUMPAD_0: 96,

        /**
         * Code for the number pad 1 key.
         * @property KEY_NUMPAD_1
         * @final
         * @type Number
         */
        KEY_NUMPAD_1: 97,

        /**
         * Code for the number pad 2 key.
         * @property KEY_NUMPAD 2
         * @final
         * @type Number
         */
        KEY_NUMPAD_2: 98,

        /**
         * Code for the number pad 3 key.
         * @property KEY_NUMPAD_3
         * @final
         * @type Number
         */
        KEY_NUMPAD_3: 99,

        /**
         * Code for the number pad 4 key.
         * @property KEY_NUMPAD_4
         * @final
         * @type Number
         */
        KEY_NUMPAD_4: 100,

        /**
         * Code for the number pad 5 key.
         * @property KEY_NUMPAD_5
         * @final
         * @type Number
         */
        KEY_NUMPAD_5: 101,

        /**
         * Code for the number pad 6 key.
         * @property KEY_NUMPAD_6
         * @final
         * @type Number
         */
        KEY_NUMPAD_6: 102,

        /**
         * Code for the number pad 7 key.
         * @property KEY_NUMPAD_7
         * @final
         * @type Number
         */
        KEY_NUMPAD_7: 103,

        /**
         * Code for the number pad 8 key.
         * @property KEY_NUMPAD_8
         * @final
         * @type Number
         */
        KEY_NUMPAD_8: 104,

        /**
         * Code for the number pad 9 key.
         * @property KEY_NUMPAD_9
         * @final
         * @type Number
         */
        KEY_NUMPAD_9: 105,

        /**
         * Code for the MULTIPLY key.
         * @property KEY_MULTIPLY
         * @final
         * @type Number
         */
        KEY_MULTIPLY: 106,

        /**
         * Code for the ADD key.
         * @property KEY_ADD
         * @final
         * @type Number
         */
        KEY_ADD: 107,

        /**
         * Code for the SUBTRACT key.
         * @property KEY_SUBTRACT
         * @final
         * @type Number
         */
        KEY_SUBTRACT: 109,

        /**
         * Code for the DECIMAL POINT key.
         * @property KEY_DECIMAL_POINT
         * @final
         * @type Number
         */
        KEY_DECIMAL_POINT: 110,

        /**
         * Code for the DIVIDE key.
         * @property KEY_DIVIDE
         * @final
         * @type Number
         */
        KEY_DIVIDE: 111,

        /**
         * Code for the F1 key.
         * @property KEY_F1
         * @final
         * @type Number
         */
        KEY_F1: 112,

        /**
         * Code for the F2 key.
         * @property KEY_F2
         * @final
         * @type Number
         */
        KEY_F2: 113,

        /**
         * Code for the F3 key.
         * @property KEY_F3
         * @final
         * @type Number
         */
        KEY_F3: 114,

        /**
         * Code for the F4 key.
         * @property KEY_F4
         * @final
         * @type Number
         */
        KEY_F4: 115,

        /**
         * Code for the F5 key.
         * @property KEY_F5
         * @final
         * @type Number
         */
        KEY_F5: 116,

        /**
         * Code for the F6 key.
         * @property KEY_F6
         * @final
         * @type Number
         */
        KEY_F6: 117,

        /**
         * Code for the F7 key.
         * @property KEY_F7
         * @final
         * @type Number
         */
        KEY_F7: 118,

        /**
         * Code for the F8 key.
         * @property KEY_F8
         * @final
         * @type Number
         */
        KEY_F8: 119,

        /**
         * Code for the F9 key.
         * @property KEY_F9
         * @final
         * @type Number
         */
        KEY_F9: 120,

        /**
         * Code for the F10 key.
         * @property KEY_F10
         * @final
         * @type Number
         */
        KEY_F10: 121,

        /**
         * Code for the F11 key.
         * @property KEY_F11
         * @final
         * @type Number
         */
        KEY_F11: 122,

        /**
         * Code for the F12 key.
         * @property KEY_F12
         * @final
         * @type Number
         */
        KEY_F12: 123,

        /**
         * Code for the NUM_LOCK key.
         * @property KEY_NUM_LOCK
         * @final
         * @type Number
         */
        KEY_NUM_LOCK: 144,

        /**
         * Code for the SCROLL_LOCK key.
         * @property KEY_SCROLL_LOCK
         * @final
         * @type Number
         */
        KEY_SCROLL_LOCK: 145,

        /**
         * Code for the SEMI_COLON key.
         * @property KEY_SEMI_COLON
         * @final
         * @type Number
         */
        KEY_SEMI_COLON: 186,

        /**
         * Code for the EQUAL_SIGN key.
         * @property KEY_EQUAL_SIGN
         * @final
         * @type Number
         */
        KEY_EQUAL_SIGN: 187,

        /**
         * Code for the COMMA key.
         * @property KEY_COMMA
         * @final
         * @type Number
         */
        KEY_COMMA: 188,

        /**
         * Code for the DASH key.
         * @property KEY_DASH
         * @final
         * @type Number
         */
        KEY_DASH: 189,

        /**
         * Code for the PERIOD key.
         * @property KEY_PERIOD
         * @final
         * @type Number
         */
        KEY_PERIOD: 190,

        /**
         * Code for the FORWARD_SLASH key.
         * @property KEY_FORWARD_SLASH
         * @final
         * @type Number
         */
        KEY_FORWARD_SLASH: 191,

        /**
         * Code for the GRAVE_ACCENT key.
         * @property KEY_GRAVE_ACCENT
         * @final
         * @type Number
         */
        KEY_GRAVE_ACCENT: 192,

        /**
         * Code for the OPEN_BRACKET key.
         * @property KEY_OPEN_BRACKET
         * @final
         * @type Number
         */
        KEY_OPEN_BRACKET: 219,

        /**
         * Code for the BACK_SLASH key.
         * @property KEY_BACK_SLASH
         * @final
         * @type Number
         */
        KEY_BACK_SLASH: 220,

        /**
         * Code for the CLOSE_BRACKET key.
         * @property KEY_CLOSE_BRACKET
         * @final
         * @type Number
         */
        KEY_CLOSE_BRACKET: 221,

        /**
         * Code for the SINGLE_QUOTE key.
         * @property KEY_SINGLE_QUOTE
         * @final
         * @type Number
         */
        KEY_SINGLE_QUOTE: 222,

        /**
         * Code for the SPACE key.
         * @property KEY_SPACE
         * @final
         * @type Number
         */
        KEY_SPACE: 32,


        _destroy: function () {
            document.removeEventListener("keydown", this._keyDownListener);
            document.removeEventListener("keyup", this._keyUpListener);
        }
    });

})();
;/**
 * Components for defining light sources.
 *
 * @module xeogl
 * @submodule lighting
 */;/**
 A **Lights** defines a group of light sources that illuminate attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 A Lights may contain a virtually unlimited number of three types of light source:

 * {{#crossLink "AmbientLight"}}AmbientLight{{/crossLink}}s, which are fixed-intensity and fixed-color, and
 affect all the {{#crossLink "Entity"}}Entities{{/crossLink}} equally,
 * {{#crossLink "PointLight"}}PointLight{{/crossLink}}s, which emit light that
 originates from a single point and spreads outward in all directions, and
 * {{#crossLink "DirLight"}}DirLight{{/crossLink}}s, which illuminate all the
 {{#crossLink "Entity"}}Entities{{/crossLink}} equally from a given direction

 <img src="../../../assets/images/Lights.png"></img>

 ## Usage

 ```` javascript
 var entity = new xeogl.Entity({

     lights: new xeogl.Lights({
         lights: [

             new xeogl.AmbientLight({
                 color: [0.7, 0.7, 0.7]
             })

             new xeogl.DirLight({
                 dir:         [-1, -1, -1],
                 color:       [0.5, 0.7, 0.5],
                 intensity:   1.0,
                 space:      "view"  // Other option is "world", for World-space
             }),

             new xeogl.PointLight({
                 pos: [0, 100, 100],
                 color: [0.5, 0.7, 0.5],
                 intensity: 1
                 constantAttenuation: 0,
                 linearAttenuation: 0,
                 quadraticAttenuation: 0,
                 space: "view"
             })
         ]
    }),

    material: new xeogl.PhongMaterial({
        ambient:    [0.3, 0.3, 0.3],
        diffuse:    [0.7, 0.7, 0.7],
        specular:   [1. 1, 1],
        shininess:  30
    }),

    geometry: new xeogl.BoxGeometry()
 });
 ````

 @class Lights
 @constructor
 @module xeogl
 @submodule lighting
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Lights in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Lights.
 @param [cfg.lights] {{Array of String|Entity}} Array of light source IDs or instances.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Lights = xeogl.Component.extend({

        type: "xeogl.Lights",

        _init: function (cfg) {

            // Renderer state contains the states of the child light source components
            this._state = new xeogl.renderer.Lights({
                lights: [],
                hash: ""
            });

            this._dirty = true;

            // Array of child light source components
            this._lights = [];

            // Subscriptions to "dirty" events from child light source components
            this._dirtySubs = [];

            // Subscriptions to "destroyed" events from child light source components
            this._destroyedSubs = [];

            // Add initial light source components
            this.lights = cfg.lights;
        },

        _props: {

            /**
             The light sources in this Lights.

             That that, when removing or inserting light sources, you must reassign this property to the modified array,
             so that this Lights able to detect that lights sources were actually added or removed. For example:

             ````javascript
             var lights = myLights.lights;

             lights.push(new xeogl.PointLight({...}));

             myLights.lights = lights; // This way, the xeogl.Lights component is able to detect that the new light was added.
             ````

             We'll be able to relax this once JavaScript gets the (proper) ability to observe array updates.

             Fires a {{#crossLink "Lights/lights:event"}}{{/crossLink}} event on change.

             @property lights
             @default []
             @type {{Array of AmbientLight, PointLight and DirLight}}
             */
            lights: {

                set: function (value) {

                    value = value || [];

                    var light;
                    var i;
                    var len;

                    // Unsubscribe from events on old lights

                    for (i = 0, len = this._lights.length; i < len; i++) {

                        light = this._lights[i];

                        light.off(this._dirtySubs[i]);
                        light.off(this._destroyedSubs[i]);
                    }

                    this._lights = [];

                    this._dirtySubs = [];
                    this._destroyedSubs = [];

                    var self = this;

                    function lightDirty() {
                        self.fire("dirty", true);
                    }

                    function lightDestroyed() { // TODO: Cache this callback

                        var id = this.id; // Light ID

                        for (var i = 0, len = self._lights.length; i < len; i++) {

                            if (self._lights[i].id === id) {

                                self._lights = self._lights.slice(i, i + 1);
                                self._dirtySubs = self._dirtySubs.slice(i, i + 1);
                                self._destroyedSubs = self._destroyedSubs.slice(i, i + 1);

                                self._dirty = true;

                                self.fire("dirty", true);
                                self.fire("lights", self._lights);

                                return;
                            }
                        }
                    }

                    for (i = 0, len = value.length; i < len; i++) {

                        light = value[i];

                        if (xeogl._isNumeric(light) || xeogl._isString(light)) {

                            // ID given for light - find the light component

                            var id = light;

                            light = this.scene.components[id];

                            if (!light) {
                                this.error("Component not found: " + xeogl._inQuotes(id));
                                continue;
                            }
                        }

                        var type = light.type;

                        if (type !== "xeogl.AmbientLight" && type !== "xeogl.DirLight" && type !== "xeogl.PointLight") {
                            this.error("Component " + xeogl._inQuotes(light.id) + " is not an xeogl.AmbientLight, xeogl.DirLight or xeogl.PointLight ");
                            continue;
                        }

                        this._lights.push(light);

                        this._dirtySubs.push(light.on("dirty", lightDirty));

                        this._destroyedSubs.push(light.on("destroyed", lightDestroyed));
                    }

                    this._dirty = true;

                    this.fire("dirty", true);
                    this.fire("lights", this._lights);
                },

                get: function () {
                    return this._lights;
                }
            }
        },

        _compile: function () {

            var state = this._state;

            if (this._dirty) {

                state.lights = [];

                for (var i = 0, len = this._lights.length; i < len; i++) {
                    state.lights.push(this._lights[i]._state);
                }

                this._makeHash();

                this._dirty = false;
            }

            this._renderer.lights = state;
        },

        _makeHash: function () {

            var lights = this._state.lights;

            if (lights.length === 0) {
                return ";";
            }

            var hash = [];
            var light;

            for (var i = 0, len = lights.length; i < len; i++) {

                light = lights[i];

                hash.push(light.type);
                hash.push((light.space === "world") ? "w" : "v");
            }

            hash.push(";");

            this._state.hash = hash.join("");
        },

        _getJSON: function () {

            var lightIds = [];

            for (var i = 0, len = this._lights.length; i < len; i++) {
                lightIds.push(this._lights[i].id);
            }

            return {
                lights: lightIds
            };
        },

        _destroy: function () {

            var i;
            var len;
            var light;

            for (i = 0, len = this._lights.length; i < len; i++) {

                light = this._lights[i];

                light.off(this._dirtySubs[i]);
                light.off(this._destroyedSubs[i]);
            }

            this._state.destroy();
        }
    });
})();
;/**
 An **AmbientLight** defines an ambient light source of fixed intensity and color that affects all attached {{#crossLink "Entity"}}Entities{{/crossLink}}
 equally.

 <a href="../../examples/#lights_ambient"><img src="https://i.giphy.com/l0HlGTxXQWMRVOPwk.gif"></img></a>

 ## Overview

 * AmbientLights are grouped, along with other light source types, within
 {{#crossLink "Lights"}}Lights{{/crossLink}} components, which are attached to {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * When the {{#crossLink "Entity"}}Entities{{/crossLink}} have {{#crossLink "PhongMaterial"}}PhongMaterials{{/crossLink}},
 AmbientLight {{#crossLink "AmbientLight/color:property"}}color{{/crossLink}} is multiplied by
 {{#crossLink "PhongMaterial"}}PhongMaterial{{/crossLink}} {{#crossLink "PhongMaterial/ambient:property"}}{{/crossLink}} at each rendered fragment of the {{#crossLink "Geometry"}}{{/crossLink}} surface.

 <img src="../../../assets/images/AmbientLight.png"></img>

 ## Examples

 * [Ambient light source](../../examples/#lights_ambient)

 ## Usage

 ```` javascript
 var entity = new xeogl.Entity({

     lights: new xeogl.Lights({
         lights: [
             new xeogl.AmbientLight({
                 color: [0.7, 0.7, 0.7]
             })
         ]
     }),

     material: new xeogl.PhongMaterial({
        diffuse: [0.5, 0.5, 0.0]
     }),

     geometry: new xeogl.BoxGeometry()
 });
 ````

 @class AmbientLight
 @module xeogl
 @submodule lighting
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this AmbientLight within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted
 @param [cfg] {*} AmbientLight configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this AmbientLight.
 @param [cfg.color=[0.7, 0.7, 0.8]] {Array(Number)} The color of this AmbientLight.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.AmbientLight = xeogl.Component.extend({

        type: "xeogl.AmbientLight",

        _init: function (cfg) {

            this._state = {
                type: "ambient",
                color: xeogl.math.vec3([0.7, 0.7, 0.7]),
                intensity: 1.0
            };

            this.color = cfg.color;
            this.intensity = cfg.intensity;
        },

        _props: {

            /**
             The color of this AmbientLight.

             Fires an {{#crossLink "AmbientLight/color:event"}}{{/crossLink}} event on change.

             @property color
             @default [0.7, 0.7, 0.8]
             @type Float32Array
             */
            color: {

                set: function (value) {

                    this._state.color.set(value ||  [ 0.7, 0.7, 0.8 ]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this AmbientLight's {{#crossLink "AmbientLight/color:property"}}{{/crossLink}} property changes.

                     @event color
                     @param value The property's new value
                     */
                    this.fire("color", this._state.color);
                },

                get: function () {
                    return this._state.color;
                }
            },

            /**
             The intensity of this AmbientLight.

             Fires a {{#crossLink "AmbientLight/intensity:event"}}{{/crossLink}} event on change.

             @property intensity
             @default 1.0
             @type Number
             */
            intensity: {

                set: function (value) {

                    this._state.intensity = value !== undefined ? value :  1.0;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this AmbientLight's  {{#crossLink "AmbientLight/intensity:property"}}{{/crossLink}} property changes.
                     * @event intensity
                     * @param value The property's new value
                     */
                    this.fire("intensity", this._state.intensity);
                },

                get: function () {
                    return this._state.intensity;
                }
            }
        },

        _getJSON: function () {
            return {
                color: this._state.color,
                intensity: this._state.intensity
            };
        }
    });

})();
;/**
 A **DirLight** is a directional light source that illuminates all attached {{#crossLink "Entity"}}Entities{{/crossLink}} equally
 from a given direction.

 ## Overview

 * DirLights are grouped, along with other light source types, within {{#crossLink "Lights"}}Lights{{/crossLink}} components,
 which are attached to {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * DirLights have a direction, but no position.
 * DirLights may be defined in either **World** or **View** coordinate space. When in World-space, their direction
 is relative to the World coordinate system, and will appear to move as the {{#crossLink "Camera"}}{{/crossLink}} moves.
 When in View-space, their direction is relative to the View coordinate system, and will behave as if fixed to the viewer's
 head as the {{#crossLink "Camera"}}{{/crossLink}} moves.

 <img src="../../../assets/images/DirLight.png"></img>

 ## Examples

 * [View-space directional light](../../examples/#lights_directional_view)
 * [World-space directional light](../../examples/#lights_directional_world)

 ## Usage

 ```` javascript
 var entity = new xeogl.Entity({

    lights: new xeogl.Lights({
        lights: [
            new xeogl.DirLight({

                // Note that this is the direction the light is shining,
                // not the direction to the light source

                dir:         [1, 1, 1],
                color:       [0.5, 0.7, 0.5],
                intensity:   1.0,
                space:      "view"  // Other option is "world", for World-space
            })
        ]
    }),

    material: new xeogl.PhongMaterial({
        ambient:    [0.3, 0.3, 0.3],
        diffuse:    [0.7, 0.7, 0.7],
        specular:   [1. 1, 1],
        shininess:  30
    }),

    geometry: new xeogl.BoxGeometry()
});
 ````

 @class DirLight
 @module xeogl
 @submodule lighting
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this DirLight within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted
 @param [cfg] {*} The DirLight configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this DirLight.
 @param [cfg.dir=[1.0, 1.0, 1.0]] {Float32Array} A unit vector indicating the direction that the light is shining,
 given in either World or View space, depending on the value of the **space** parameter.
 @param [cfg.color=[0.7, 0.7, 0.8 ]] {Float32Array} The color of this DirLight.
 @param [cfg.intensity=1.0 ] {Number} The intensity of this DirLight.
 @param [cfg.space="view"] {String} The coordinate system the DirLight is defined in - "view" or "space".

 @extends Component
 */
(function () {

    "use strict";

    xeogl.DirLight = xeogl.Component.extend({

        type: "xeogl.DirLight",

        _init: function (cfg) {

            this._state = {
                type: "dir",
                dir: xeogl.math.vec3([1.0, 1.0, 1.0]),
                color: xeogl.math.vec3([0.7, 0.7, 0.8]),
                intensity: 1.0,
                space: "view"
            };

            this.dir = cfg.dir;
            this.color = cfg.color;
            this.intensity = cfg.intensity;
            this.space = cfg.space;
        },

        _props: {

            /**
             The direction in which the light is shining.

             Fires a {{#crossLink "DirLight/dir:event"}}{{/crossLink}} event on change.

             @property dir
             @default [1.0, 1.0, 1.0]
             @type Float32Array
             */
            dir: {

                set: function (value) {

                    this._state.dir.set(value || [1.0, 1.0, 1.0]);

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this DirLight's  {{#crossLink "DirLight/dir:property"}}{{/crossLink}} property changes.
                     * @event dir
                     * @param value The property's new value
                     */
                    this.fire("dir", this._state.dir);
                },

                get: function () {
                    return this._state.dir;
                }
            },

            /**
             The color of this DirLight.

             Fires a {{#crossLink "DirLight/color:event"}}{{/crossLink}} event on change.

             @property color
             @default [0.7, 0.7, 0.8]
             @type Float32Array
             */
            color: {

                set: function (value) {

                    this._state.color.set(value || [0.7, 0.7, 0.8]);

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this DirLight's  {{#crossLink "DirLight/color:property"}}{{/crossLink}} property changes.
                     * @event color
                     * @param value The property's new value
                     */
                    this.fire("color", this._state.color);
                },

                get: function () {
                    return this._state.color;
                }
            },

            /**
             The intensity of this DirLight.

             Fires a {{#crossLink "DirLight/intensity:event"}}{{/crossLink}} event on change.

             @property intensity
             @default 1.0
             @type Number
             */
            intensity: {

                set: function (value) {

                    value = value !== undefined ? value : 1.0;

                    this._state.intensity = value;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this DirLight's  {{#crossLink "DirLight/intensity:property"}}{{/crossLink}} property changes.
                     * @event intensity
                     * @param value The property's new value
                     */
                    this.fire("intensity", this._state.intensity);
                },

                get: function () {
                    return this._state.intensity;
                }
            },

            /**
             Specifies which coordinate space this DirLight is in.

             Supported values are:


             * "view" - View space, aligned within the view volume as if fixed to the viewer's head
             * "world" - World space, fixed within the world, moving within the view volume with respect to camera


             Fires a {{#crossLink "DirLight/space:event"}}{{/crossLink}} event on change.

             @property space
             @default "view"
             @type String
             */
            space: {

                set: function (value) {

                    this._state.space = value || "view";

                    this.fire("dirty", true); // Need to rebuild shader

                    /**
                     * Fired whenever this DirLight's {{#crossLink "DirLight/space:property"}}{{/crossLink}} property changes.
                     * @event space
                     * @param value The property's new value
                     */
                    this.fire("space", this._state.space);
                },

                get: function () {
                    return this._state.space;
                }
            }
        },

        _getJSON: function () {
            return {
                type: this._state.type,
                dir: this._state.dir,
                color: this._state.color,
                intensity: this._state.intensity,
                space: this._state.space
            };
        }
    });

})();
;/**
 A **PointLight** defines a positional light source that originates from a single point and spreads outward in all directions, to illuminate attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <a href="../../examples/#lights_point_world"><img src="https://i.giphy.com/3o6ZsZoFGIOJ2nlmN2.gif"></img></a>

 ## Overview

 * PointLights are grouped, along with other light source types, within {{#crossLink "Lights"}}Lights{{/crossLink}} components,
 which are attached to {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * PointLights have a position, but no direction.
 * PointLights may be defined in either **World** or **View** coordinate space. When in World-space, their positions
 are relative to the World coordinate system, and will appear to move as the {{#crossLink "Camera"}}{{/crossLink}} moves.
 When in View-space, their positions are relative to the View coordinate system, and will behave as if fixed to the viewer's
 head as the {{#crossLink "Camera"}}{{/crossLink}} moves.
 * PointLights have {{#crossLink "PointLight/constantAttenuation:property"}}{{/crossLink}}, {{#crossLink "PointLight/linearAttenuation:property"}}{{/crossLink}} and
 {{#crossLink "PointLight/quadraticAttenuation:property"}}{{/crossLink}} factors, which indicate how their intensity attenuates over distance.

 <img src="../../../assets/images/PointLight.png"></img>

 ## Examples

 * [View-space point light](../../examples/#lights_point_view)
 * [World-space point light](../../examples/#lights_point_world)

 ## Usage

 ```` javascript
 var entity = new xeogl.Entity(scene, {

        lights: new xeogl.Lights({
            lights: [
                new xeogl.PointLight({
                    pos: [0, 100, 100],
                    color: [0.5, 0.7, 0.5],
                    intensity: 1
                    constantAttenuation: 0,
                    linearAttenuation: 0,
                    quadraticAttenuation: 0,
                    space: "view"
                })
            ]
        }),
 ,
        material: new xeogl.PhongMaterial({
            diffuse: [0.5, 0.5, 0.0]
        }),

        geometry: new xeogl.BoxGeometry()
  });
 ````

 @class PointLight
 @module xeogl
 @submodule lighting
 @constructor
 @extends Component
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this PointLight within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted
 @param [cfg] {*} The PointLight configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this PointLight.
 @param [cfg.pos=[ 1.0, 1.0, 1.0 ]] {Float32Array} Position, in either World or View space, depending on the value of the **space** parameter.
 @param [cfg.color=[0.7, 0.7, 0.8 ]] {Float32Array} Color of this PointLight.
 @param [cfg.intensity=1.0] {Number} Intensity of this PointLight.
 @param [cfg.constantAttenuation=0] {Number} Constant attenuation factor.
 @param [cfg.linearAttenuation=0] {Number} Linear attenuation factor.
 @param [cfg.quadraticAttenuation=0] {Number} Quadratic attenuation factor.
 @param [cfg.space="view"] {String} The coordinate system this PointLight is defined in - "view" or "world".
 */
(function () {

    "use strict";

    xeogl.PointLight = xeogl.Component.extend({

        type: "xeogl.PointLight",

        _init: function (cfg) {

            this._state = {
                type: "point",
                pos: xeogl.math.vec3([1.0, 1.0, 1.0]),
                color: xeogl.math.vec3([0.7, 0.7, 0.8]),
                intensity: 1.0,

                // Packaging constant, linear and quadratic attenuation terms
                // into an array for easy insertion into shaders as a vec3
                attenuation: [0.0, 0.0, 0.0],
                space: "view"
            };

            this.pos = cfg.pos;
            this.color = cfg.color;
            this.intensity = cfg.intensity;
            this.constantAttenuation = cfg.constantAttenuation;
            this.linearAttenuation = cfg.linearAttenuation;
            this.quadraticAttenuation = cfg.quadraticAttenuation;
            this.space = cfg.space;
        },

        _props: {

            /**
             The position of this PointLight.

             This will be either World- or View-space, depending on the value of {{#crossLink "PointLight/space:property"}}{{/crossLink}}.

             Fires a {{#crossLink "PointLight/pos:event"}}{{/crossLink}} event on change.

             @property pos
             @default [1.0, 1.0, 1.0]
             @type Array(Number)
             */
            pos: {

                set: function (value) {

                    this._state.pos.set(value || [1.0, 1.0, 1.0]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PointLight's  {{#crossLink "PointLight/pos:property"}}{{/crossLink}} property changes.
                     @event pos
                     @param value The property's new value
                     */
                    this.fire("pos", this._state.pos);
                },

                get: function () {
                    return this._state.pos;
                }
            },

            /**
             The color of this PointLight.

             Fires a {{#crossLink "PointLight/color:event"}}{{/crossLink}} event on change.

             @property color
             @default [0.7, 0.7, 0.8]
             @type Float32Array
             */
            color: {

                set: function (value) {

                    this._state.color.set(value || [0.7, 0.7, 0.8]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PointLight's  {{#crossLink "PointLight/color:property"}}{{/crossLink}} property changes.
                     @event color
                     @param value The property's new value
                     */
                    this.fire("color", this._state.color);
                },

                get: function () {
                    return this._state.color;
                }
            },

            /**
             The intensity of this PointLight.

             Fires a {{#crossLink "PointLight/intensity:event"}}{{/crossLink}} event on change.

             @property intensity
             @default 1.0
             @type Number
             */
            intensity: {

                set: function (value) {

                    value = value !== undefined ? value : 1.0;

                    this._state.intensity = value;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this PointLight's  {{#crossLink "PointLight/intensity:property"}}{{/crossLink}} property changes.
                     * @event intensity
                     * @param value The property's new value
                     */
                    this.fire("intensity", this._state.intensity);
                },

                get: function () {
                    return this._state.intensity;
                }
            },

            /**
             The constant attenuation factor for this PointLight.

             Fires a {{#crossLink "PointLight/constantAttenuation:event"}}{{/crossLink}} event on change.

             @property constantAttenuation
             @default 0
             @type Number
             */
            constantAttenuation: {

                set: function (value) {

                    this._state.attenuation[0] = value || 0.0;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PointLight's {{#crossLink "PointLight/constantAttenuation:property"}}{{/crossLink}} property changes.

                     @event constantAttenuation
                     @param value The property's new value
                     */
                    this.fire("constantAttenuation", this._state.attenuation[0]);
                },

                get: function () {
                    return this._state.attenuation[0];
                }
            },

            /**
             The linear attenuation factor for this PointLight.

             Fires a {{#crossLink "PointLight/linearAttenuation:event"}}{{/crossLink}} event on change.

             @property linearAttenuation
             @default 0
             @type Number
             */
            linearAttenuation: {

                set: function (value) {

                    this._state.attenuation[1] = value || 0.0;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PointLight's  {{#crossLink "PointLight/linearAttenuation:property"}}{{/crossLink}} property changes.

                     @event linearAttenuation
                     @param value The property's new value
                     */
                    this.fire("linearAttenuation", this._state.attenuation[1]);
                },

                get: function () {
                    return this._state.attenuation[1];
                }
            },

            /**
             The quadratic attenuation factor for this Pointlight.

             Fires a {{#crossLink "PointLight/quadraticAttenuation:event"}}{{/crossLink}} event on change.

             @property quadraticAttenuation
             @default 0
             @type Number
             */
            quadraticAttenuation: {

                set: function (value) {

                    this._state.attenuation[2] = value || 0.0;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PointLight's {{#crossLink "PointLight/quadraticAttenuation:property"}}{{/crossLink}} property changes.

                     @event quadraticAttenuation
                     @param value The property's new value
                     */
                    this.fire("quadraticAttenuation", this._state.attenuation[2]);
                },

                get: function () {
                    return this._state.attenuation[2];
                }
            },

            /**
             Indicates which coordinate space this PointLight is in.

             Supported values are:


             * "view" - View space, aligned within the view volume as if fixed to the viewer's head
             * "world" - World space, fixed within the world, moving within the view volume with respect to camera


             Fires a {{#crossLink "PointLight/space:event"}}{{/crossLink}} event on change.

             @property space
             @default "view"
             @type String
             */
            space: {

                set: function (value) {

                    this._state.space = value || "view";

                    this.fire("dirty", true); // Need to rebuild shader

                    /**
                     Fired whenever this Pointlight's  {{#crossLink "PointLight/space:property"}}{{/crossLink}} property changes.

                     @event space
                     @param value The property's new value
                     */
                    this.fire("space", this._state.space);
                },

                get: function () {
                    return this._state.space;
                }
            }
        },

        _getJSON: function () {
            return {
                type: this._state.type,
                pos: this._state.pos,
                color: this._state.color,
                intensity: this._state.intensity,
                constantAttenuation: this._state.attenuation[0],
                linearAttenuation: this._state.attenuation[1],
                quadraticAttenuation: this._state.attenuation[2],
                space: this._state.space
            };
        }
    });

})();
;/**
 * Models are units of xeogl content.
 *
 * @module xeogl
 * @submodule models
 */;(function () {

    "use strict";

    /**
     A **Model** is a unit of content within a xeogl {{#crossLink "Scene"}}{{/crossLink}}.

     ## Overview

     * A Model is a container of {{#crossLink "Component"}}Components{{/crossLink}}.
     * Can be transformed within World-space by attaching it to a {{#crossLink "Transform"}}{{/crossLink}}.
     * Provides its World-space boundary as a {{#crossLink "Boundary3D"}}{{/crossLink}}.
     * Subclassed by {{#crossLink "GLTFModel"}}{{/crossLink}}, which loads glTF files.
     * Subclassed by {{#crossLink "BuildableModel"}}{{/crossLink}}, which provides a fluent API for building itself.

     <img src="../../../assets/images/Model.png"></img>

     @class Model
     @module xeogl
     @submodule models
     @constructor
     @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this ModelModel in the default
     {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
     @param [cfg] {*} Configs
     @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
     generated automatically when omitted.
     @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this ModelModel.
     @param [cfg.transform] {Number|String|Transform} A Local-to-World-space (modelling) {{#crossLink "Transform"}}{{/crossLink}} to attach to this Model.
     Must be within the same {{#crossLink "Scene"}}{{/crossLink}} as this Model. Internally, the given
     {{#crossLink "Transform"}}{{/crossLink}} will be inserted above each top-most {{#crossLink "Transform"}}Transform{{/crossLink}}
     that the Model attaches to its {{#crossLink "Entity"}}Entities{{/crossLink}}.
     @extends Component
     */
    xeogl.Model = xeogl.Component.extend({

        /**
         JavaScript class name for this Component.

         @property type
         @type String
         @final
         */
        type: "xeogl.Model",

        _init: function (cfg) {

            /**
             * The {{#crossLink "Components"}}{{/crossLink}} within this Model, mapped to their IDs.
             *
             * Fires an {{#crossLink "Model/updated:event"}}{{/crossLink}} event on change.
             *
             * @property components
             * @type {{String:Component}}
             */
            this.components = {};

            /**
             * The number of {{#crossLink "Components"}}{{/crossLink}} within this Model.
             *
             * @property numComponents
             * @type Number
             */
            this.numComponents = 0;

            /**
             * A map of maps; for each {{#crossLink "Component"}}{{/crossLink}} type in this Model,
             * a map to IDs to {{#crossLink "Component"}}{{/crossLink}} instances, eg.
             *
             * ````
             * "xeogl.Geometry": {
             *   "alpha": <xeogl.Geometry>,
             *   "beta": <xeogl.Geometry>
             * },
             * "xeogl.Rotate": {
             *   "charlie": <xeogl.Rotate>,
             *   "delta": <xeogl.Rotate>,
             *   "echo": <xeogl.Rotate>,
             * },
             * //...
             * ````
             *
             * @property types
             * @type {String:{String:xeogl.Component}}
             */
            this.types = {};

            // Subscriptions to "destroyed" events from components
            this._onDestroyed = {};

            // Subscriptions to "updated" events from components' worldBoundaries
            this._onWorldBoundaryUpdated = {};

            this._aabbDirty = true;

            // Dummy transform to make it easy to graft user-supplied transforms above added entities
            this._dummyRootTransform = this.create({
                type: "xeogl.Transform",
                meta: "dummy"
            });

            this.transform = cfg.transform;

            if (cfg.components) {
                this.add(cfg.components);
            }
        },

        /**
         * Adds one or more {{#crossLink "Component"}}Components{{/crossLink}} to this Model.
         *
         * The {{#crossLink "Component"}}Component(s){{/crossLink}} may be specified by instance, ID or type.
         *
         * See class comment for usage examples.
         *
         * The {{#crossLink "Component"}}Components{{/crossLink}} must be in the same {{#crossLink "Scene"}}{{/crossLink}} as this Model.
         *
         * Fires an {{#crossLink "Model/added:event"}}{{/crossLink}} event.
         *
         * @method add
         * @param {Array of Component} components Array of {{#crossLink "Component"}}Components{{/crossLink}} instances.
         */
        add: function (components) {

            components = xeogl._isArray(components) ? components : [components];

            for (var i = 0, len = components.length; i < len; i++) {
                this._add(components[i]);
            }
        },

        _add: function (c) {

            var componentId;
            var component;
            var type;
            var types;

            if (xeogl._isNumeric(c) || xeogl._isString(c)) {

                if (this.scene.types[c]) {

                    // Component type

                    type = c;

                    types = this.scene.types[type];

                    if (!types) {
                        this.warn("Component type not found: '" + type + "'");
                        return;
                    }

                    for (componentId in types) {
                        if (types.hasOwnProperty(componentId)) {
                            this._add(types[componentId]);
                        }
                    }

                    return;

                } else {

                    // Component ID

                    component = this.scene.components[c];

                    if (!component) {
                        this.warn("Component not found: " + xeogl._inQuotes(c));
                        return;
                    }
                }

            } else if (xeogl._isObject(c)) {

                // Component config given

                var type = c.type || "xeogl.Component";

                if (!xeogl._isComponentType(type)) {
                    this.error("Not a xeogl component type: " + type);
                    return;
                }

                component = new window[type](this.scene, c);

            } else if (c.type) {

                // Component instance

                component = c;

            } else {

                return;
            }

            if (component.scene !== this.scene) {

                // Component in wrong Scene

                this.warn("Attempted to add component from different xeogl.Scene: " + xeogl._inQuotes(component.id));
                return;
            }

            // Add component to this map

            if (this.components[component.id]) {

                // Component already in this Model
                return;
            }

            this.components[component.id] = component;

            // Register component for its type

            types = this.types[component.type];

            if (!types) {
                types = this.types[component.type] = {};
            }

            types[component.id] = component;

            this.numComponents++;

            // Remove component when it's destroyed

            var self = this;

            this._onDestroyed[component.id] = component.on("destroyed", function () {
                self._remove(component);
            });

            if (component.isType("xeogl.Entity")) {

                // Insert the dummy transform above
                // each entity we just loaded

                var rootTransform = component.transform;

                if (!rootTransform) {

                    component.transform = self._dummyRootTransform;

                } else {

                    while (rootTransform.parent) {

                        if (rootTransform.id === self._dummyRootTransform.id) {

                            // Since transform hierarchies may contain
                            // transforms that share the same parents, there is potential to find
                            // our dummy root transform while walking up an entity's transform
                            // path, when that path is joins a path that belongs to an Entity that
                            // we processed earlier

                            return;
                        }

                        rootTransform = rootTransform.parent;
                    }

                    if (rootTransform.id !== self._dummyRootTransform.id) {
                        rootTransform.parent = self._dummyRootTransform;
                    }
                }
            }

            if (component.worldBoundary) {
                this._onWorldBoundaryUpdated[c.id] = component.worldBoundary.on("updated", this._updated, this);
                if (!this._aabbDirty) {
                    this._setAABBDirty();
                }
            }

            /**
             * Fired whenever an individual {{#crossLink "Component"}}{{/crossLink}} is added to this {{#crossLink "Model"}}{{/crossLink}}.
             * @event added
             * @param value {Component} The {{#crossLink "Component"}}{{/crossLink}} that was added.
             */
            this.fire("added", component);

            if (!this._dirty) {
                this._scheduleUpdate();
            }
        },

        _scheduleUpdate: function () {
            if (!this._dirty) {
                this._dirty = true;
                xeogl.scheduleTask(this._notifyUpdated, this);
            }
        },

        _notifyUpdated: function () {

            /* Fired on the next {{#crossLink "Scene/tick.animate:event"}}{{/crossLink}} whenever
             * {{#crossLink "Component"}}Components{{/crossLink}} were added or removed since the
             * last {{#crossLink "Scene/tick.animate:event"}}{{/crossLink}} event, to provide a batched change event
             * for subscribers who don't want to react to every individual addition or removal on this Model.
             *
             * @event updated
             */
            this.fire("updated");
            this._dirty = false;
        },

        /**
         * Destroys all {{#crossLink "Component"}}Components{{/crossLink}} in this Model.
         *
         * @method destroyAll
         */
        destroyAll: function () {

            this.iterate(function (component) {
                component.destroy();
            });
        },

        /**
         * Removes all {{#crossLink "Component"}}Components{{/crossLink}} from this Model.
         *
         * @method removeAll
         */
        removeAll: function () {

            // this.iterate(function (component) {
            //     component.destroy();
            // });
        },

        _remove: function (component) {

            var componentId = component.id;

            if (component.scene !== this.scene) {
                this.warn("Attempted to remove component that's not in same xeogl.Scene: '" + componentId + "'");
                return;
            }

            delete this.components[componentId];

            // Unsubscribe from component destruction

            component.off(this._onDestroyed[componentId]);
            delete this._onDestroyed[componentId];

            // Unregister component for its type

            var types = this.types[component.type];

            if (types) {
                delete types[component.id];
            }

            this.numComponents--;

            //

            if (component.worldBoundary) {
                component.worldBoundary.off(this._onWorldBoundaryUpdated[component.id]);
                delete this._onWorldBoundaryUpdated[component.id];
            }

            if (!this._aabbDirty) {
                this._setAABBDirty();
            }


            /**
             * Fired whenever an individual {{#crossLink "Component"}}{{/crossLink}} is removed from this {{#crossLink "Model"}}{{/crossLink}}.
             * @event removed
             * @param value {Component} The {{#crossLink "Component"}}{{/crossLink}} that was removed.
             */
            this.fire("removed", component);

            if (!this._dirty) {
                this._scheduleUpdate();
            }
        },

        /**
         * Iterates with a callback over the {{#crossLink "Component"}}Components{{/crossLink}} in this Model.
         *
         * @method iterate
         * @param {Function} callback Callback called for each {{#crossLink "Component"}}{{/crossLink}}.
         * @param {Object} [scope=this] Optional scope for the callback, defaults to this Model.
         */
        iterate: function (callback, scope) {
            scope = scope || this;
            var components = this.components;
            for (var componentId in components) {
                if (components.hasOwnProperty(componentId)) {
                    callback.call(scope, components[componentId]);
                }
            }
        },

        _props: {

            /**
             * The Local-to-World-space (modelling) {{#crossLink "Transform"}}{{/crossLink}} attached to this Model.
             *
             * Must be within the same {{#crossLink "Scene"}}{{/crossLink}} as this Model.
             *
             * Internally, the given {{#crossLink "Transform"}}{{/crossLink}} will be inserted above each top-most
             * {{#crossLink "Transform"}}Transform{{/crossLink}} that the Model attaches to
             * its {{#crossLink "Entity"}}Entities{{/crossLink}}.
             *
             * Fires an {{#crossLink "Model/transform:event"}}{{/crossLink}} event on change.
             *
             * @property transform
             * @type Transform
             */
            transform: {

                set: function (value) {

                    /**
                     * Fired whenever this Model's {{#crossLink "Model/transform:property"}}{{/crossLink}} property changes.
                     *
                     * @event transform
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "transform",
                        type: "xeogl.Transform",
                        component: value,
                        sceneDefault: false,
                        onAttached: {
                            callback: this._transformUpdated,
                            scope: this
                        }
                    });
                },

                get: function () {
                    return this._attached.transform;
                }
            },

            /**
             * World-space 3D boundary enclosing all the components in this Model.
             *
             * If you call {{#crossLink "Component/destroy:method"}}{{/crossLink}} on this boundary, then
             * this property will be assigned to a fresh {{#crossLink "Boundary3D"}}{{/crossLink}} instance next
             * time you reference it.
             *
             * @property worldBoundary
             * @type Boundary3D
             * @final
             */
            worldBoundary: {

                get: function () {

                    if (!this._worldBoundary) {

                        var self = this;

                        this._worldBoundary = this.create({

                            type: "xeogl.Boundary3D",

                            getDirty: function () {
                                if (self._aabbDirty) {
                                    self._buildAABB();
                                    self._aabbDirty = false;
                                    return true;
                                }
                                return false;
                            },

                            getAABB: function () {
                                return self._aabb;
                            }
                        });

                        this._worldBoundary.on("destroyed",
                            function () {
                                self._worldBoundary = null;
                            });
                    }

                    return this._worldBoundary;
                }
            }
        },

        _transformUpdated: function (transform) {
            this._dummyRootTransform.parent = transform;
        },

        _updated: function () {
            if (!this._aabbDirty) {
                this._setAABBDirty();
            }
        },

        _setAABBDirty: function () {
            this._aabbDirty = true;
            if (this._worldBoundary) {
                this._worldBoundary.fire("updated", true);
            }
        },

        _buildAABB: function () {

            if (!this._aabb) {
                this._aabb = xeogl.math.AABB3();
            }

            var xmin = 100000;
            var ymin = 100000;
            var zmin = 100000;
            var xmax = -100000;
            var ymax = -100000;
            var zmax = -100000;

            var component;
            var worldBoundary;
            var aabb;

            var components = this.components;

            for (var componentId in components) {
                if (components.hasOwnProperty(componentId)) {

                    component = components[componentId];

                    worldBoundary = component.worldBoundary;

                    if (worldBoundary) {

                        aabb = worldBoundary.aabb;

                        if (aabb[0] < xmin) {
                            xmin = aabb[0];
                        }

                        if (aabb[1] < ymin) {
                            ymin = aabb[1];
                        }

                        if (aabb[2] < zmin) {
                            zmin = aabb[2];
                        }

                        if (aabb[3] > xmax) {
                            xmax = aabb[3];
                        }

                        if (aabb[4] > ymax) {
                            ymax = aabb[4];
                        }

                        if (aabb[5] > zmax) {
                            zmax = aabb[5];
                        }
                    }
                }
            }

            this._aabb[0] = xmin;
            this._aabb[1] = ymin;
            this._aabb[2] = zmin;
            this._aabb[3] = xmax;
            this._aabb[4] = ymax;
            this._aabb[5] = zmax;
        },

        _destroy: function () {
            this.removeAll();
        }
    });

})();;// Copyright (c) 2013 Fabrice Robinet
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/*
 The Abstract Loader has two modes:
 #1: [static] load all the JSON at once [as of now]
 #2: [stream] stream and parse JSON progressively [not yet supported]

 Whatever is the mechanism used to parse the JSON (#1 or #2),
 The loader starts by resolving the paths to binaries and referenced json files (by replace the value of the path property with an absolute path if it was relative).

 In case #1: it is guaranteed to call the concrete loader implementation methods in a order that solves the dependencies between the entries.
 only the nodes requires an extra pass to set up the hirerarchy.
 In case #2: the concrete implementation will have to solve the dependencies. no order is guaranteed.

 When case #1 is used the followed dependency order is:

 scenes -> nodes -> meshes -> materials -> techniques -> shaders
 -> buffers
 -> cameras
 -> lights

 The readers starts with the leafs, i.e:
 shaders, techniques, materials, meshes, buffers, cameras, lights, nodes, scenes

 For each called handle method called the client should return true if the next handle can be call right after returning,
 or false if a callback on client side will notify the loader that the next handle method can be called.

 */

(function () {

    "use strict";

    var categoriesDepsOrder = [
        "extensions",
        "buffers",
        "bufferViews",
        "images",
        "videos",
        "samplers",
        "textures",
        "shaders",
        "programs",
        "techniques",
        "materials",
        "accessors",
        "meshes",
        "cameras",
        "lights",
        "skins",
        "nodes",
        "scenes",
        "animations"
    ];

    xeogl.glTFParser = Object.create(Object.prototype, {

        _rootDescription: {value: null, writable: true},

        rootDescription: {
            set: function (value) {
                this._rootDescription = value;
            },
            get: function () {
                return this._rootDescription;
            }
        },

        baseURL: {value: null, writable: true},

        //detect absolute path following the same protocol than window.location
        _isAbsolutePath: {
            value: function (path) {
                var isAbsolutePathRegExp = new RegExp("^" + window.location.protocol, "i");

                return path.match(isAbsolutePathRegExp) ? true : false;
            }
        },

        resolvePathIfNeeded: {
            value: function (path) {
                if (this._isAbsolutePath(path)) {
                    return path;
                }

                var isDataUriRegex = /^data:/;
                if (isDataUriRegex.test(path)) {
                    return path;
                }

                return this.baseURL + path;
            }
        },

        _resolvePathsForCategories: {
            value: function (categories) {
                categories.forEach(function (category) {
                    var descriptions = this.json[category];
                    if (descriptions) {
                        var descriptionKeys = Object.keys(descriptions);
                        descriptionKeys.forEach(function (descriptionKey) {
                            var description = descriptions[descriptionKey];
                            description.uri = this.resolvePathIfNeeded(description.uri);
                        }, this);
                    }
                }, this);
            }
        },

        _json: {
            value: null,
            writable: true
        },

        json: {
            enumerable: true,
            get: function () {
                return this._json;
            },
            set: function (value) {
                if (this._json !== value) {
                    this._json = value;
                    this._resolvePathsForCategories(["buffers", "shaders", "images", "videos"]);
                }
            }
        },

        _path: {
            value: null,
            writable: true
        },

        getEntryDescription: {
            value: function (entryID, entryType) {
                var entries = null;

                var category = entryType;
                entries = this.rootDescription[category];
                if (!entries) {
                    console.log("ERROR:CANNOT find expected category named:" + category);
                    return null;
                }

                return entries ? entries[entryID] : null;
            }
        },

        _stepToNextCategory: {
            value: function () {
                this._state.categoryIndex = this.getNextCategoryIndex(this._state.categoryIndex + 1);
                if (this._state.categoryIndex !== -1) {
                    this._state.categoryState.index = 0;
                    return true;
                }

                return false;
            }
        },

        _stepToNextDescription: {
            enumerable: false,
            value: function () {
                var categoryState = this._state.categoryState;
                var keys = categoryState.keys;
                if (!keys) {
                    console.log("INCONSISTENCY ERROR");
                    return false;
                }

                categoryState.index++;
                categoryState.keys = null;
                if (categoryState.index >= keys.length) {
                    return this._stepToNextCategory();
                }
                return false;
            }
        },

        hasCategory: {
            value: function (category) {
                return this.rootDescription[category] ? true : false;
            }
        },

        _handleState: {
            value: function () {

                var methodForType = {
                    "buffers": this.handleBuffer,
                    "bufferViews": this.handleBufferView,
                    "shaders": this.handleShader,
                    "programs": this.handleProgram,
                    "techniques": this.handleTechnique,
                    "materials": this.handleMaterial,
                    "meshes": this.handleMesh,
                    "cameras": this.handleCamera,
                    "lights": this.handleLight,
                    "nodes": this.handleNode,
                    "scenes": this.handleScene,
                    "images": this.handleImage,
                    "animations": this.handleAnimation,
                    "accessors": this.handleAccessor,
                    "skins": this.handleSkin,
                    "samplers": this.handleSampler,
                    "textures": this.handleTexture,
                    "videos": this.handleVideo,
                    "extensions": this.handleExtension
                };

                var success = true;
                while (this._state.categoryIndex !== -1) {
                    var category = categoriesDepsOrder[this._state.categoryIndex];
                    var categoryState = this._state.categoryState;
                    var keys = categoryState.keys;
                    if (!keys) {
                        categoryState.keys = keys = Object.keys(this.rootDescription[category]);
                        if (keys) {
                            if (keys.length === 0) {
                                this._stepToNextDescription();
                                continue;
                            }
                        }
                    }

                    var type = category;
                    var entryID = keys[categoryState.index];
                    var description = this.getEntryDescription(entryID, type);
                    if (!description) {
                        if (this.handleError) {
                            this.handleError("INCONSISTENCY ERROR: no description found for entry " + entryID);
                            success = false;
                            break;
                        }
                    } else {

                        if (methodForType[type]) {
                            if (methodForType[type].call(this, entryID, description, this._state.userInfo) === false) {
                                success = false;
                                break;
                            }
                        }

                        this._stepToNextDescription();
                    }
                }

                if (this.handleLoadCompleted) {
                    this.handleLoadCompleted(success);
                }

            }
        },

        _loadJSONIfNeeded: {
            enumerable: true,
            value: function (callback) {
                var self = this;
                //FIXME: handle error
                if (!this._json) {
                    var jsonPath = this._path;
                    var i = jsonPath.lastIndexOf("/");
                    this.baseURL = (i !== 0) ? jsonPath.substring(0, i + 1) : '';
                    var jsonfile = new XMLHttpRequest();
                    jsonfile.open("GET", jsonPath, true);
                    jsonfile.onreadystatechange = function () {
                        if (jsonfile.readyState === 4) {
                            if (jsonfile.status === 200) {
                                self.json = JSON.parse(jsonfile.responseText);
                                if (callback) {
                                    callback(self.json);
                                }
                            }
                        }
                    };
                    jsonfile.send(null);
                } else {
                    if (callback) {
                        callback(this.json);
                    }
                }
            }
        },

        /* load JSON and assign it as description to the reader */
        _buildLoader: {
            value: function (callback) {
                var self = this;

                function JSONReady(json) {
                    self.rootDescription = json;
                    if (callback) {
                        callback(this);
                    }
                }

                this._loadJSONIfNeeded(JSONReady);
            }
        },

        _state: {value: null, writable: true},

        _getEntryType: {
            value: function (entryID) {
                var rootKeys = categoriesDepsOrder;
                for (var i = 0; i < rootKeys.length; i++) {
                    var rootValues = this.rootDescription[rootKeys[i]];
                    if (rootValues) {
                        return rootKeys[i];
                    }
                }
                return null;
            }
        },

        getNextCategoryIndex: {
            value: function (currentIndex) {
                for (var i = currentIndex; i < categoriesDepsOrder.length; i++) {
                    if (this.hasCategory(categoriesDepsOrder[i])) {
                        return i;
                    }
                }

                return -1;
            }
        },

        load: {
            enumerable: true,
            value: function (userInfo, options) {
                var self = this;
                this._buildLoader(function loaderReady(reader) {
                    var startCategory = self.getNextCategoryIndex.call(self, 0);
                    if (startCategory !== -1) {
                        self._state = {
                            "userInfo": userInfo,
                            "options": options,
                            "categoryIndex": startCategory,
                            "categoryState": {"index": "0"}
                        };
                        self._handleState();
                    }
                });
            }
        },

        initWithPath: {
            value: function (idPrefix, path) {
                this._idPrefix = idPrefix;
                this._path = path;
                this._json = null;
                return this;
            }
        },

        //this is meant to be global and common for all instances
        _knownURLs: {writable: true, value: {}},

        //to be invoked by subclass, so that ids can be ensured to not overlap
        loaderContext: {
            value: function () {
                if (typeof this._knownURLs[this._path] === "undefined") {
                    this._knownURLs[this._path] = Object.keys(this._knownURLs).length;
                }
                return "__" + this._knownURLs[this._path];
            }
        },

        initWithJSON: {
            value: function (json, baseURL) {
                this.json = json;
                this.baseURL = baseURL;
                if (!baseURL) {
                    console.log("WARNING: no base URL passed to Reader:initWithJSON");
                }
                return this;
            }
        }
    });
})();
;/**
 * Private xeogl glTF loading utilities.
 *
 * Adapted from the THREE loader by Tony Parisi (https://www.tonyparisi.com)
 * https://github.com/KhronosGroup/glTF/blob/master/loaders/threejs/glTFLoaderUtils.js
 */
xeogl.GLTFLoaderUtils = Object.create(Object, {

    // errors

    // misc constants
    ARRAY_BUFFER: {value: "ArrayBuffer"},

    _streams: {value: {}, writable: true},

    _streamsStatus: {value: {}, writable: true},

    _resources: {value: {}, writable: true},

    _resourcesStatus: {value: {}, writable: true},

    // initialization
    init: {
        value: function () {
            this._streams = {};
            this._streamsStatus = {};
            this._resources = {};
            this._resourcesStatus = {};
        }
    },

    //manage entries
    _containsResource: {
        enumerable: false,
        value: function (resourceID) {
            return this._resources[resourceID] ? true : false;
        }
    },

    _storeResource: {
        enumerable: false,
        value: function (resourceID, resource) {
            if (!resourceID) {
                console.log("ERROR: entry does not contain id, cannot store");
                return;
            }

            if (this._containsResource[resourceID]) {
                console.log("WARNING: resource:" + resourceID + " is already stored, overriding");
            }

            this._resources[resourceID] = resource;
        }
    },

    _getResource: {
        enumerable: false,
        value: function (resourceID) {
            return this._resources[resourceID];
        }
    },

    _loadStream: {
        value: function (path, type, delegate) {


            var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;

            function decodeDataUriText(isBase64, data) {
                var result = decodeURIComponent(data);
                if (isBase64) {
                    return atob(result);
                }
                return result;
            }

            function decodeDataUriArrayBuffer(isBase64, data) {
                var byteString = decodeDataUriText(isBase64, data);
                var buffer = new ArrayBuffer(byteString.length);
                var view = new Uint8Array(buffer);
                for (var i = 0; i < byteString.length; i++) {
                    view[i] = byteString.charCodeAt(i);
                }
                return buffer;
            }

            function decodeDataUri(dataUriRegexResult, responseType) {
                responseType = typeof responseType !== 'undefined' ? responseType : '';
                var mimeType = dataUriRegexResult[1];
                var isBase64 = !!dataUriRegexResult[2];
                var data = dataUriRegexResult[3];

                switch (responseType) {
                    case '':
                    case 'text':
                        return decodeDataUriText(isBase64, data);
                    case 'ArrayBuffer':
                        return decodeDataUriArrayBuffer(isBase64, data);
                    case 'blob':
                        var buffer = decodeDataUriArrayBuffer(isBase64, data);
                        return new Blob([buffer], {
                            type: mimeType
                        });
                    case 'document':
                        var parser = new DOMParser();
                        return parser.parseFromString(decodeDataUriText(isBase64, data), mimeType);
                    case 'json':
                        return JSON.parse(decodeDataUriText(isBase64, data));
                    default:
                        throw 'Unhandled responseType: ' + responseType;
                }
            }

            var dataUriRegexResult = dataUriRegex.exec(path);
            if (dataUriRegexResult !== null) {
                delegate.streamAvailable(path, decodeDataUri(dataUriRegexResult, type));
                return;
            }

            if (!type) {
                delegate.handleError(xeogl.GLTFLoaderUtils.INVALID_TYPE, null);
                return;
            }

            if (!path) {
                delegate.handleError(xeogl.GLTFLoaderUtils.INVALID_PATH);
                return;
            }

            var xhr = new XMLHttpRequest();
            xhr.open('GET', path, true);
            xhr.responseType = (type === this.ARRAY_BUFFER) ? "arraybuffer" : "text";

            //if this is not specified, 1 "big blob" scenes fails to load.
            xhr.setRequestHeader("If-Modified-Since", "Sat, 01 Jan 1970 00:00:00 GMT");
            xhr.onload = function () {
                if ((xhr.status === 200) || (xhr.status === 206)) {
                    delegate.streamAvailable(path, xhr.response);

                } else {
                    delegate.handleError(xeogl.GLTFLoaderUtils.XMLHTTPREQUEST_STATUS_ERROR, this.status);
                }
            };
            xhr.send(null);
        }
    },

    send: {value: 0, writable: true},
    requested: {value: 0, writable: true},

    _handleRequest: {
        value: function (request) {
            var resourceStatus = this._resourcesStatus[request.id];
            if (resourceStatus) {
                this._resourcesStatus[request.id]++;
            }
            else {
                this._resourcesStatus[request.id] = 1;
            }

            var streamStatus = this._streamsStatus[request.uri];
            if (streamStatus && streamStatus.status === "loading") {
                streamStatus.requests.push(request);
                return;
            }

            this._streamsStatus[request.uri] = {status: "loading", requests: [request]};

            var self = this;
            var processResourceDelegate = {};

            processResourceDelegate.streamAvailable = function (path, res_) {
                var streamStatus = self._streamsStatus[path];
                var requests = streamStatus.requests;
                requests.forEach(function (req_) {
                    var subArray = res_.slice(req_.range[0], req_.range[1]);
                    var convertedResource = req_.delegate.convert(subArray, req_.ctx);
                    self._storeResource(req_.id, convertedResource);
                    req_.delegate.resourceAvailable(convertedResource, req_.ctx);
                    --self._resourcesStatus[req_.id];

                }, this);

                delete self._streamsStatus[path];

            };

            processResourceDelegate.handleError = function (errorCode, info) {
                request.delegate.handleError(errorCode, info);
            };

            this._loadStream(request.uri, request.type, processResourceDelegate);
        }
    },

    _elementSizeForGLType: {
        value: function (componentType, type) {

            var nElements = 0;
            switch (type) {
                case "SCALAR" :
                    nElements = 1;
                    break;
                case "VEC2" :
                    nElements = 2;
                    break;
                case "VEC3" :
                    nElements = 3;
                    break;
                case "VEC4" :
                    nElements = 4;
                    break;
                case "MAT2" :
                    nElements = 4;
                    break;
                case "MAT3" :
                    nElements = 9;
                    break;
                case "MAT4" :
                    nElements = 16;
                    break;
                default :
                    debugger;
                    break;
            }

            switch (componentType) {
                case WebGLRenderingContext.FLOAT :
                    return Float32Array.BYTES_PER_ELEMENT * nElements;
                case WebGLRenderingContext.UNSIGNED_BYTE :
                    return Uint8Array.BYTES_PER_ELEMENT * nElements;
                case WebGLRenderingContext.UNSIGNED_SHORT :
                    return Uint16Array.BYTES_PER_ELEMENT * nElements;
                default :
                    debugger;
                    return null;
            }
        }
    },

    _handleWrappedBufferViewResourceLoading: {
        value: function (wrappedBufferView, delegate, ctx) {
            var bufferView = wrappedBufferView.bufferView;
            var buffer = bufferView.buffer;
            var byteOffset = wrappedBufferView.byteOffset + bufferView.description.byteOffset;
            var range = [byteOffset, (this._elementSizeForGLType(wrappedBufferView.componentType, wrappedBufferView.type) * wrappedBufferView.count) + byteOffset];

            this._handleRequest({
                "id": wrappedBufferView.id,
                "range": range,
                "type": buffer.description.type,
                "uri": buffer.description.uri,
                "delegate": delegate,
                "ctx": ctx
            }, null);
        }
    },

    getBuffer: {

        value: function (wrappedBufferView, delegate, ctx) {

            var savedBuffer = this._getResource(wrappedBufferView.id);
            if (savedBuffer) {
                return savedBuffer;
            } else {
                this._handleWrappedBufferViewResourceLoading(wrappedBufferView, delegate, ctx);
            }

            return null;
        }
    },

    getFile: {

        value: function (request, delegate, ctx) {

            request.delegate = delegate;
            request.ctx = ctx;

            this._handleRequest({
                "id": request.id,
                "uri": request.uri,
                "range": [0],
                "type": "text",
                "delegate": delegate,
                "ctx": ctx
            }, null);

            return null;
        }
    },
});
;/**
 * Private xeogl glTF loader core.
 *
 * Adapted from the THREE loader by Tony Parisi (https://www.tonyparisi.com)
 * https://github.com/KhronosGroup/glTF/blob/master/loaders/threejs/glTFLoaderUtils.js
 */
(function () {

    "use strict";

    function log(type, entryId, description) {
        console.log(type + ": " + entryId + ": " + JSON.stringify(description, null, 4));
    }

    // Resource management

    var ResourceEntry = function (entryID, object, description) {
        this.entryID = entryID;
        this.object = object;
        this.description = description;
    };

    var Resources = function () {
        this._entries = {};
    };

    Resources.prototype.setEntry = function (entryID, object, description) {
        if (!entryID) {
            console.error("No EntryID provided, cannot store", description);
            return;
        }

        if (this._entries[entryID]) {
            console.warn("entry[" + entryID + "] is being overwritten");
        }

        this._entries[entryID] = new ResourceEntry(entryID, object, description);
    };

    Resources.prototype.getEntry = function (entryID) {
        return this._entries[entryID];
    };

    Resources.prototype.clearEntries = function () {
        this._entries = {};
    };

    // Delegate for processing index buffers
    var IndicesDelegate = function () {
    };

    IndicesDelegate.prototype.handleError = function (errorCode, info) {
        // FIXME: report error
        console.log("ERROR(IndicesDelegate):" + errorCode + ":" + info);
    };

    IndicesDelegate.prototype.convert = function (resource, ctx) {
        return new Uint16Array(resource, 0, ctx.indices.count);
    };

    IndicesDelegate.prototype.resourceAvailable = function (glResource, ctx) {
        var geometry = ctx.geometry;
        geometry.indices = glResource;
        //geometry.checkFinished();
        return true;
    };

    function componentsPerElementForGLType(type) {

        var nElements = 0;

        switch (type) {
            case "SCALAR" :
                nElements = 1;
                break;
            case "VEC2" :
                nElements = 2;
                break;
            case "VEC3" :
                nElements = 3;
                break;
            case "VEC4" :
                nElements = 4;
                break;
            case "MAT2" :
                nElements = 4;
                break;
            case "MAT3" :
                nElements = 9;
                break;
            case "MAT4" :
                nElements = 16;
                break;
            default :
                debugger;
                break;
        }

        return nElements;
    }

    var indicesDelegate = new IndicesDelegate();

    var IndicesContext = function (indices, geometry) {
        this.indices = indices;
        this.geometry = geometry;
    };

    // Delegate for processing vertex attribute buffers
    var VertexAttributeDelegate = function () {
    };

    VertexAttributeDelegate.prototype.handleError = function (errorCode, info) {
        // FIXME: report error
        console.log("ERROR(VertexAttributeDelegate):" + errorCode + ":" + info);
    };

    VertexAttributeDelegate.prototype.convert = function (resource, ctx) {
        return resource;
    };

    VertexAttributeDelegate.prototype.resourceAvailable = function (glResource, ctx) {

        var geometry = ctx.geometry;
        var attribute = ctx.attribute;
        var semantic = ctx.semantic;

        //FIXME: Float32 is assumed here, but should be checked.

        if (semantic === "POSITION") {
            geometry.positions = new Float32Array(glResource, 0, attribute.count * componentsPerElementForGLType(attribute.type));

        } else if (semantic === "NORMAL") {
            geometry.normals = new Float32Array(glResource, 0, attribute.count * componentsPerElementForGLType(attribute.type));

        } else if ((semantic === "TEXCOORD_0") || (semantic === "TEXCOORD" )) {
            geometry.uv = new Float32Array(glResource, 0, attribute.count * componentsPerElementForGLType(attribute.type));
        }

        geometry.loadedAttributes++;

        //geometry.checkFinished();

        return true;
    };

    var vertexAttributeDelegate = new VertexAttributeDelegate();

    var VertexAttributeContext = function (attribute, semantic, geometry) {
        this.attribute = attribute;
        this.semantic = semantic;
        this.geometry = geometry;
    };


    xeogl.GLTFLoader = Object.create(xeogl.glTFParser, {

        setModel: {
            value: function (model) {
                this.model = model;
            }
        },

        load: {
            enumerable: true,
            value: function (userInfo, options, ok) {

                if (!this.model) {
                    throw "model not set";
                }

                this.resources = new Resources();

                xeogl.glTFParser.handleLoadCompleted = ok;
                xeogl.glTFParser.load.call(this, userInfo, options);
            }
        },

        _makeID: {
            value: function (entryID) {
                // https://github.com/KhronosGroup/glTF/blob/master/specification/README.md#ids-and-names
                return this._idPrefix + "#" + entryID;
            }
        },

        handleBuffer: {
            value: function (entryID, description, userInfo) {
                this.resources.setEntry(entryID, null, description);
                description.type = "ArrayBuffer";
                return true;
            }
        },

        handleBufferView: {
            value: function (entryID, description, userInfo) {
                this.resources.setEntry(entryID, null, description);

                var buffer = this.resources.getEntry(description.buffer);
                description.type = "ArrayBufferView";

                var bufferViewEntry = this.resources.getEntry(entryID);
                bufferViewEntry.buffer = buffer;
                return true;
            }
        },

        handleAccessor: {
            value: function (entryID, description, userInfo) {
                this.resources.setEntry(entryID, description, description);
                return true;
            }
        },

        handleTexture: {
            value: function (entryID, description, userInfo) {

                if (!description.source) {
                    return;
                }

                var image = this._json.images[description.source];

                var texture = new xeogl.Texture(this.model.scene, {
                    id: this._makeID(entryID),
                    src: image.uri,
                    flipY: true
                });

                this.model.add(texture);

                this.resources.setEntry(entryID, texture, description);

                return true;
            }
        },

        handleMaterial: {
            value: function (entryID, description, userInfo) {

                //   log("material", entryID, description);

                var values = description.values || {};

                var diffuseVal = values.diffuse;
                var specularVal = values.specular;
                var shininessVal = values.shininess;
                var emissiveVal = values.emission;
                var transparencyVal = values.transparency;

                var cfg = {
                    id: this._makeID(entryID),
                    meta: {
                        userInfo: userInfo
                    },
                    shininess: shininessVal,
                    opacity: transparencyVal,
                    transparent: transparencyVal < 1.
                };

                var entry;

                if (diffuseVal) {
                    if (xeogl._isString(diffuseVal)) {
                        entry = this.resources.getEntry(diffuseVal);
                        if (entry) {
                            cfg.diffuseMap = entry.object;
                        }
                    } else {
                        cfg.diffuse = diffuseVal.slice(0, 3);
                    }
                }

                if (specularVal) {
                    if (xeogl._isString(specularVal)) {
                        entry = this.resources.getEntry(specularVal);
                        if (entry) {
                            cfg.specularMap = entry.object;
                        }
                    } else {
                        cfg.specular = specularVal.slice(0, 3);
                    }
                }

                if (emissiveVal) {
                    if (xeogl._isString(emissiveVal)) {
                        entry = this.resources.getEntry(emissiveVal);
                        if (entry) {
                            cfg.emissiveMap = entry.object;
                        }
                    } else {
                        cfg.emissive = emissiveVal.slice(0, 3);
                    }
                }

                var material = new xeogl.PhongMaterial(this.model.scene, cfg);

                this.model.add(material);

                this.resources.setEntry(entryID, material, description);

                return true;
            }
        },

        handleLight: {
            value: function (entryID, description, userInfo) {
                log("light", entryID, description);
                return true;
            }
        },

        handleMesh: {
            value: function (entryID, description, userInfo) {

                var mesh = [];

                this.resources.setEntry(entryID, mesh, description);

                var primitivesDescription = description.primitives;

                if (!primitivesDescription) {
                    //FIXME: not implemented in delegate
                    log("MISSING_PRIMITIVES for mesh:" + entryID);
                    return false;
                }

                for (var i = 0; i < primitivesDescription.length; i++) {
                    var primitiveDescription = primitivesDescription[i];

                    if (primitiveDescription.mode === WebGLRenderingContext.TRIANGLES) {

                        var geometry = new xeogl.Geometry(this.model.scene, {
                            id: this._makeID(entryID)
                        });

                        this.model.add(geometry);

                        var materialEntry = this.resources.getEntry(primitiveDescription.material);
                        var material = materialEntry.object;

                        mesh.push({
                            geometry: geometry,
                            material: material
                        });

                        var allAttributes = Object.keys(primitiveDescription.attributes);

                        // count them first, async issues otherwise
                        geometry.totalAttributes += allAttributes.length;

                        var indices = this.resources.getEntry(primitiveDescription.indices);
                        var bufferEntry = this.resources.getEntry(indices.description.bufferView);
                        var indicesObject = {
                            bufferView: bufferEntry,
                            byteOffset: indices.description.byteOffset,
                            count: indices.description.count,
                            id: indices.entryID,
                            componentType: indices.description.componentType,
                            type: indices.description.type
                        };

                        var indicesContext = new IndicesContext(indicesObject, geometry);
                        var alreadyProcessedIndices = xeogl.GLTFLoaderUtils.getBuffer(indicesObject, indicesDelegate, indicesContext);

                        // Load Vertex Attributes
                        allAttributes.forEach(function (semantic) {

                            var attribute;
                            var attributeID = primitiveDescription.attributes[semantic];
                            var attributeEntry = this.resources.getEntry(attributeID);
                            var bufferEntry;

                            if (!attributeEntry) {

                                //let's just use an anonymous object for the attribute
                                attribute = description.attributes[attributeID];
                                attribute.id = attributeID;
                                this.resources.setEntry(attributeID, attribute, attribute);

                                bufferEntry = this.resources.getEntry(attribute.bufferView);
                                attributeEntry = this.resources.getEntry(attributeID);

                            } else {
                                attribute = attributeEntry.object;
                                attribute.id = attributeID;
                                bufferEntry = this.resources.getEntry(attribute.bufferView);
                            }

                            var attributeObject = {
                                bufferView: bufferEntry,
                                byteOffset: attribute.byteOffset,
                                byteStride: attribute.byteStride,
                                count: attribute.count,
                                max: attribute.max,
                                min: attribute.min,
                                componentType: attribute.componentType,
                                type: attribute.type,
                                id: attributeID
                            };

                            var attribContext = new VertexAttributeContext(attributeObject, semantic, geometry);

                            var alreadyProcessedAttribute = xeogl.GLTFLoaderUtils.getBuffer(attributeObject, vertexAttributeDelegate, attribContext);

                            /*if(alreadyProcessedAttribute) {
                             vertexAttributeDelegate.resourceAvailable(alreadyProcessedAttribute, attribContext);
                             }*/

                        }, this);
                    }
                }

                return true;
            }
        },

        handleCamera: {
            value: function (entryID, description, userInfo) {
                //log("camera", entryID, description);
                return true;
            }
        },

        handleScene: {
            value: function (entryID, description, userInfo) {

                var nodes = description.nodes;

                if (nodes) {

                    var node;
                    var transform;

                    for (var nodeId in nodes) {
                        if (nodes.hasOwnProperty(nodeId)) {

                            node = nodes [nodeId];
                            transform = null;

                            this._parseNode(node, transform);
                        }
                    }
                }
            }
        },

        _parseNode: {
            value: function (nodeId, transform) {

                var node = this._json.nodes[nodeId];

                if (!node) {
                    return;
                }

                var model = this.model;
                var scene = model.scene;

                if (node.matrix) {
                    var matrix = node.matrix;
                    transform = new xeogl.Transform(scene, {
                        id: this._makeID(nodeId + ".transform"),
                        matrix: matrix,
                        parent: transform
                    });
                    model.add(transform);
                }

                if (node.translation) {
                    var translation = node.translation;
                    transform = new xeogl.Translate(scene, {
                        id: this._makeID(nodeId + ".translation"),
                        xyz: [translation[0], translation[1], translation[2]],
                        parent: transform
                    });
                    model.add(transform);
                }

                if (node.rotation) {
                    var rotation = node.rotation;
                    transform = new xeogl.Rotate(scene, {
                        id: this._makeID(nodeId + ".rotation"),
                        xyz: [rotation[0], rotation[1], rotation[2]],
                        angle: rotation[3],
                        parent: transform
                    });
                    model.add(transform);
                }

                if (node.scale) {
                    var scale = node.scale;
                    transform = new xeogl.Scale(scene, {
                        id: this._makeID(nodeId + ".scale"),
                        xyz: [scale[0], scale[1], scale[2]],
                        parent: transform
                    });
                    model.add(transform);
                }

                if (node.meshes) {

                    // One xeogl.Visibility per mesh group

                    var visibility = new xeogl.Visibility(scene, {
                        id: this._makeID(nodeId + ".visibility")
                    });

                    model.add(visibility);

                    // One xeogl.Cull per mesh group

                    var cull = new xeogl.Cull(scene, {
                        id: this._makeID(nodeId + ".cull")
                    });

                    model.add(cull);

                    // One xeogl.Modes per mesh group

                    var modes = new xeogl.Modes(scene, {
                        id: this._makeID(nodeId + ".modes")
                    });

                    model.add(cull);

                    // One xeogl.Entity per mesh, each sharing the same
                    // xeogl.Visibility, xeogl.Cull and xeogl.Nodes

                    var meshes = node.meshes;
                    var imeshes;
                    var lenMeshes = meshes.length;
                    var mesh;
                    var i;
                    var len;
                    var material;
                    var geometry;
                    var entityId;
                    var j;
                    var entities = scene.types["xeogl.Entity"];
                    var entity;

                    for (imeshes = 0; imeshes < lenMeshes; imeshes++) {

                        mesh = this.resources.getEntry(meshes[imeshes]);

                        if (!mesh) {
                            continue;
                        }

                        mesh = mesh.object;

                        for (i = 0, len = mesh.length; i < len; i++) {

                            material = mesh[i].material;
                            geometry = mesh[i].geometry;

                            entityId = this._makeID(nodeId + ".entity." + i);

                            //// Fake ID when clashing with existing entity ID
                            //for  (j = 0; entities[entityId]; j++) {
                            //    entityId = this._makeID(nodeId + ".entity." + i + "." + j);
                            //}

                            entity = new xeogl.Entity(scene, {
                                id: entityId,
                                meta: {
                                    name: node.name
                                },
                                material: material,
                                geometry: geometry,
                                transform: transform,
                                visibility: visibility,
                                cull: cull,
                                modes: modes,

                                // Indicates that this Entity is freshly loaded -  increments the xeogl.Spinner#processes
                                // count on the Scene Canvas, which will decrement again as soon as Entity is compiled
                                // into the render graph, causing the Spinner to show until this Entity is visible
                                loading: true
                            });

                            model.add(entity);
                        }
                    }
                }

                if (node.children) {

                    var children = node.children;
                    var childNode;

                    for (i = 0, len = children.length; i < len; i++) {
                        childNode = children[i];
                        this._parseNode(childNode, transform);
                    }
                }

                return true;
            }
        }
    });

})();;(function () {

    "use strict";

    /**
     A **GLTFModel** is a {{#crossLink "Model"}}{{/crossLink}} that loads itself from a <a href="https://github.com/KhronosGroup/glTF" target = "_other">glTF</a> file.

     <a href="../../examples/#models_GLTFModel_gearbox"><img src="../../../assets/images/gltf/glTF_gearbox_squashed.png"></img></a>

     ## Overview

     * A GLTFModel is a container of {{#crossLink "Component"}}Components{{/crossLink}} that loads itself from glTF.
     * It begins loading as soon as you set its {{#crossLink "GLTFModel/src:property"}}{{/crossLink}}
     property to the location of a valid glTF file.
     * You can set {{#crossLink "GLTFModel/src:property"}}{{/crossLink}} to a new file path at any time, which causes
     the GLTFModel to clear itself and load components from the new file.
     * Can be transformed within World-space by attached it to a {{#crossLink "Transform"}}{{/crossLink}}.
     * Provides its World-space boundary as a {{#crossLink "Boundary3D"}}{{/crossLink}}.

     <img src="../../../assets/images/GLTFModel.png"></img>

     ## Tutorials

     * [Importing glTF](https://github.com/xeolabs/xeogl/wiki/Models-glTF)

     ## Examples

     * [Gearbox](../../examples/#models_GLTFModel_gearbox)
     * [Buggy](../../examples/#models_GLTFModel_buggy)
     * [Reciprocating Saw](../../examples/#models_GLTFModel_ReciprocatingSaw)
     * [Textured Duck](../../examples/#models_GLTFModel_duck)
     * [GLTFModel with entity explorer UI](../../examples/#demos_ui_explorer)
     * [Fly camera to GLTFModel entities](../../examples/#boundaries_flyToBoundary)
     * [Ensuring individual materials on GLTFModel entities](../../examples/#models__uniqueMaterials)
     * [Baking transform hierarchies](../../examples/#models_bakeTransforms)
     * [Attaching transforms to GLTFModel, via constructor](../../examples/#models_configureTransform)
     * [Attaching transforms to GLTFModel, via property](../../examples/#models_attachTransform)

     @class GLTFModel
     @module xeogl
     @submodule models
     @constructor
     @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this GLTFModel in the default
     {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
     @param [cfg] {*} Configs
     @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}},
     generated automatically when omitted.
     @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this GLTFModel.
     @param [cfg.src] {String} Path to a glTF file. You can set this to a new file path at any time, which will cause the
     GLTFModel to load components from the new file (after first destroying any components loaded from a previous file path).
     @param [cfg.transform] {Number|String|Transform} A Local-to-World-space (modelling) {{#crossLink "Transform"}}{{/crossLink}} to attach to this GLTFModel.
     Must be within the same {{#crossLink "Scene"}}{{/crossLink}} as this GLTFModel. Internally, the given
     {{#crossLink "Transform"}}{{/crossLink}} will be inserted above each top-most {{#crossLink "Transform"}}Transform{{/crossLink}}
     that the GLTFModel attaches to its {{#crossLink "Entity"}}Entities{{/crossLink}}.
     @extends Model
     */
    xeogl.GLTFModel = xeogl.Model.extend({

        type: "xeogl.GLTFModel",

        _init: function (cfg) {

            this._super(cfg);

            this._src = null;

            if (!cfg.src) {
                this.error("Config missing: 'src'");
                return;
            }

            if (!xeogl._isString(cfg.src)) {
                this.error("Value for config 'src' should be a string");
                return;
            }

            this.src = cfg.src;
        },

        _props: {

            /**
             Path to a glTF file.

             You can set this to a new file path at any time, which will cause the GLTFModel to load components from
             the new file (after first destroying any components loaded from a previous file path).

             Fires a {{#crossLink "GLTFModel/src:event"}}{{/crossLink}} event on change.

             @property src
             @type String
             */
            src: {

                set: function (value) {

                    if (!value) {
                        return;
                    }

                    if (!xeogl._isString(value)) {
                        this.error("Value for 'src' should be a string");
                        return;
                    }

                    if (value === this._src) { // Already loaded this GLTFModel

                        /**
                         Fired whenever this GLTFModel has finished loading components from the glTF file
                         specified by {{#crossLink "GLTFModel/src:property"}}{{/crossLink}}.
                         @event loaded
                         */
                        this.fire("loaded");

                        return;
                    }

                    this.destroyAll();

                    this._src = value;

                    var glTFLoader = xeogl.GLTFLoader;

                    glTFLoader.setModel(this);
                    glTFLoader.initWithPath(this.id, this._src);

                    var self = this;
                    var userInfo = null;
                    var options = null;

                    // Increment processes represented by loading spinner
                    // Spinner appears as soon as count is non-zero

                    var spinner = self.scene.canvas.spinner;
                    spinner.processes++;

                    glTFLoader.load(userInfo, options, function () {

                        // Decrement processes represented by loading spinner
                        // Spinner disappears if the count is now zero
                        spinner.processes--;

                        /**
                         Fired whenever this GLTFModel has finished loading components from the glTF file
                         specified by {{#crossLink "GLTFModel/src:property"}}{{/crossLink}}.
                         @event loaded
                         */
                        self.fire("loaded");
                    });

                    /**
                     Fired whenever this GLTFModel's {{#crossLink "GLTFModel/src:property"}}{{/crossLink}} property changes.
                     @event src
                     @param value The property's new value
                     */
                    this.fire("src", this._src);
                },

                get: function () {
                    return this._src;
                }
            }
        },

        _getJSON: function () {

            var json =  {};

            if (this.src) {
                json.src = this._src;
            }

            return json;
        },

        _destroy: function () {
            this.destroyAll();
        }
    });

})();;/**
 * Components to define the surface appearance of Entities.
 *
 * @module xeogl
 * @submodule materials
 */;/**
 A **Material** defines the surface appearance of attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 Material is the base class for:

 * {{#crossLink "PhongMaterial"}}{{/crossLink}} - Blinn-Phong shading material.
 * (more Material subtypes coming)

 @class Material
 @module xeogl
 @submodule materials
 @constructor
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Material = xeogl.Component.extend({

        type: "xeogl.Material",

        _init: function () {

        }
    });

})();
;/**

 A **PhongMaterial** is a {{#crossLink "Material"}}{{/crossLink}} that defines the surface appearance of
 attached {{#crossLink "Entity"}}Entities{{/crossLink}} using
 the <a href="https://en.wikipedia.org/wiki/Phong_reflection_model">Phong</a> lighting model.

 ## Overview

 * PhongMaterial properties, along with {{#crossLink "PhongMaterial/emissive:property"}}{{/crossLink}},
 {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} and {{#crossLink "PhongMaterial/reflectivity:property"}}{{/crossLink}},
 specify attributes that are to be **applied uniformly** across the surface of attached {{#crossLink "Geometry"}}Geometries{{/crossLink}}.
 * Most of those attributes can be textured, **effectively replacing the values set for those properties**, by
 assigning {{#crossLink "Texture"}}Textures{{/crossLink}} to the PhongMaterial's
 {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}}, {{#crossLink "PhongMaterial/specularMap:property"}}{{/crossLink}},
 {{#crossLink "PhongMaterial/emissiveMap:property"}}{{/crossLink}}, {{#crossLink "PhongMaterial/opacityMap:property"}}{{/crossLink}}
 and  {{#crossLink "PhongMaterial/reflectivityMap:property"}}{{/crossLink}} properties.
 * For example, the value of {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}} will be ignored if your
 PhongMaterial also has a {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}} set to a {{#crossLink "Texture"}}Texture{{/crossLink}}.
 The {{#crossLink "Texture"}}Texture's{{/crossLink}} pixel colors directly provide the diffuse color of each fragment across the
 {{#crossLink "Geometry"}}{{/crossLink}} surface, ie. they are not multiplied by
 the {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}} for each pixel, as is done in many shading systems.
 * When the {{#crossLink "Entity"}}{{/crossLink}}'s {{#crossLink "Geometry"}}{{/crossLink}} has a
 {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} set to "lines" or "points" then only the {{#crossLink "PhongMaterial"}}{{/crossLink}}'s
 {{#crossLink "PhongMaterial/emissive:property"}}{{/crossLink}}, {{#crossLink "PhongMaterial/emissiveMap:property"}}{{/crossLink}},
 {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} and {{#crossLink "PhongMaterial/opacityMap:property"}}{{/crossLink}}
 will actually be applied, since those primitive types cannot be shaded.

 <img src="../../../assets/images/PhongMaterial.png"></img>

 ## Usage

 In this example we have an Entity with

 * a {{#crossLink "Lights"}}{{/crossLink}} containing an {{#crossLink "AmbientLight"}}{{/crossLink}} and a {{#crossLink "DirLight"}}{{/crossLink}},
 * a {{#crossLink "PhongMaterial"}}{{/crossLink}} which applies a {{#crossLink "Texture"}}{{/crossLink}} as a diffuse map and a specular {{#crossLink "Fresnel"}}{{/crossLink}}, and
 * a {{#crossLink "TorusGeometry"}}{{/crossLink}}.

 Note that xeogl will ignore the PhongMaterial's {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}}
 property, since we assigned the {{#crossLink "Texture"}}{{/crossLink}} to the PhongMaterial's
 {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}} property. The {{#crossLink "Texture"}}Texture's{{/crossLink}} pixel
 colors directly provide the diffuse color of each fragment across the {{#crossLink "Geometry"}}{{/crossLink}} surface.

 ```` javascript
 var entity = new xeogl.Entity({

    lights: new xeogl.Lights({
        lights: [
            new xeogl.AmbientLight({
                color: [0.7, 0.7, 0.7]
            }),
            new xeogl.DirLight({
                dir: [-1, -1, -1],
                color: [0.5, 0.7, 0.5],
                intensity: [1.0, 1.0, 1.0],
                space: "view"
            })
        ]
    }),

    material: new xeogl.PhongMaterial({
        ambient: [0.3, 0.3, 0.3],
        diffuse: [0.5, 0.5, 0.0],   // Ignored, since we have assigned a Texture to diffuseMap, below
        diffuseMap: new xeogl.Texture({
            src: "diffuseMap.jpg"
        }),
        specular: [1, 1, 1],
        specularFresnel: new xeogl.Fresnel({
            leftColor: [1.0, 1.0, 1.0],
            rightColor: [0.0, 0.0, 0.0],
            power: 4
        }),
        shininess: 80, // Default
        opacity: 1.0 // Default
    }),

    geometry: new xeogl.TorusGeometry()
});
 ````

 @class PhongMaterial
 @module xeogl
 @submodule materials
 @constructor
 @extends Material
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this PhongMaterial within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted
 @param [cfg] {*} The PhongMaterial configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta=null] {String:Object} Metadata to attach to this PhongMaterial.
 @param [cfg.ambient=[0.7, 0.7, 0.8 ]] {Array of Number} PhongMaterial ambient color.
 @param [cfg.diffuse=[ 1.0, 1.0, 1.0 ]] {Array of Number} PhongMaterial diffuse color.
 @param [cfg.specular=[ 1.0, 1.0, 1.0 ]] {Array of Number} PhongMaterial specular color.
 @param [cfg.emissive=[ 0.0, 0.0, 0.0 ]] {Array of Number} PhongMaterial emissive color.
 @param [cfg.opacity=1] {Number} Scalar in range 0-1 that controls opacity, where 0 is completely transparent and 1 is completely opaque.
 Only applies while {{#crossLink "Modes"}}Modes{{/crossLink}} {{#crossLink "Modes/transparent:property"}}transparent{{/crossLink}} equals ````true````.
 @param [cfg.shininess=80] {Number} Scalar in range 0-128 that determines the size and sharpness of specular highlights.
 @param [cfg.reflectivity=1] {Number} Scalar in range 0-1 that controls how much {{#crossLink "CubeMap"}}CubeMap{{/crossLink}} is reflected.
 @param [cfg.lineWidth=1] {Number} Scalar that controls the width of lines for {{#crossLink "Geometry"}}{{/crossLink}} with {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} set to "lines".
 @param [cfg.pointSize=1] {Number} Scalar that controls the size of points for {{#crossLink "Geometry"}}{{/crossLink}} with {{#crossLink "Geometry/primitive:property"}}{{/crossLink}} set to "points".
 @param [cfg.diffuseMap=null] {Texture} A diffuse map {{#crossLink "Texture"}}Texture{{/crossLink}}, which will override the effect of the diffuse property. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this PhongMaterial.
 @param [cfg.specularMap=null] {Texture} A specular map {{#crossLink "Texture"}}Texture{{/crossLink}}, which will override the effect of the specular property. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this PhongMaterial.
 @param [cfg.emissiveMap=null] {Texture} An emissive map {{#crossLink "Texture"}}Texture{{/crossLink}}, which will override the effect of the emissive property. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this PhongMaterial.
 @param [cfg.normalMap=null] {Texture} A normal map {{#crossLink "Texture"}}Texture{{/crossLink}}. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this PhongMaterial.
 @param [cfg.opacityMap=null] {Texture} An opacity map {{#crossLink "Texture"}}Texture{{/crossLink}}, which will override the effect of the opacity property. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this PhongMaterial.
 @param [cfg.reflectivityMap=null] {Texture} A reflectivity control map {{#crossLink "Texture"}}Texture{{/crossLink}}, which will override the effect of the reflectivity property. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this PhongMaterial.
 @param [cfg.diffuseFresnel=null] {Fresnel} A diffuse {{#crossLink "Fresnel"}}Fresnel{{/crossLink}}.
 @param [cfg.specularFresnel=null] {Fresnel} A specular {{#crossLink "Fresnel"}}Fresnel{{/crossLink}}.
 @param [cfg.emissiveFresnel=null] {Fresnel} An emissive {{#crossLink "Fresnel"}}Fresnel{{/crossLink}}.
 @param [cfg.opacityFresnel=null] {Fresnel} An opacity {{#crossLink "Fresnel"}}Fresnel{{/crossLink}}.
 @param [cfg.reflectivityFresnel=null] {Fresnel} A reflectivity {{#crossLink "Fresnel"}}Fresnel{{/crossLink}}.
 */
(function () {

    "use strict";

    xeogl.PhongMaterial = xeogl.Material.extend({

        type: "xeogl.PhongMaterial",

        _init: function (cfg) {

            this._state = new xeogl.renderer.PhongMaterial({

                type: "phongMaterial",

                ambient: xeogl.math.vec3([1.0, 1.0, 1.0]),
                diffuse: xeogl.math.vec3([1.0, 1.0, 1.0]),
                specular: xeogl.math.vec3([1.0, 1.0, 1.0]),
                emissive: xeogl.math.vec3([0.0, 0.0, 0.0]),

                opacity: 1.0,
                shininess: 30.0,
                reflectivity: 1.0,

                lineWidth: 1.0,
                pointSize: 1.0,

                ambientMap: null,
                normalMap: null,
                diffuseMap: null,
                specularMap: null,
                emissiveMap: null,
                opacityMap: null,
                reflectivityMap: null,

                diffuseFresnel: null,
                specularFresnel: null,
                emissiveFresnel: null,
                opacityFresnel: null,
                reflectivityFresnel: null,

                hash: null
            });

            this._hashDirty = true;

            this.on("dirty", function () {

                // This PhongMaterial is flagged dirty when a
                // child component fires "dirty", which always
                // means that a shader recompile will be needed.

                this._hashDirty = true;
            }, this);

            this.ambient = cfg.ambient;
            this.diffuse = cfg.diffuse;
            this.specular = cfg.specular;
            this.emissive = cfg.emissive;

            this.opacity = cfg.opacity;
            this.shininess = cfg.shininess;
            this.reflectivity = cfg.reflectivity;

            this.lineWidth = cfg.lineWidth;
            this.pointSize = cfg.pointSize;

            this.ambientMap = cfg.ambientMap;
            this.diffuseMap = cfg.diffuseMap;
            this.specularMap = cfg.specularMap;
            this.emissiveMap = cfg.emissiveMap;
            this.opacityMap = cfg.opacityMap;
            this.reflectivityMap = cfg.reflectivityMap;
            this.normalMap = cfg.normalMap;

            this.diffuseFresnel = cfg.diffuseFresnel;
            this.specularFresnel = cfg.specularFresnel;
            this.emissiveFresnel = cfg.emissiveFresnel;
            this.opacityFresnel = cfg.opacityFresnel;
            this.reflectivityFresnel = cfg.reflectivityFresnel;
        },

        _props: {

            /**
             The PhongMaterial's ambient color.

             Fires a {{#crossLink "PhongMaterial/ambient:event"}}{{/crossLink}} event on change.

             @property ambient
             @default [1.0, 1.0, 1.0]
             @type Float32Array
             */
            ambient: {

                set: function (value) {

                    this._state.ambient.set(value || [1.0, 1.0, 1.0]);

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/ambient:property"}}{{/crossLink}} property changes.
                     *
                     * @event ambient
                     * @param value {Float32Array} The property's new value
                     */
                    this.fire("ambient", this._state.ambient);
                },

                get: function () {
                    return this._state.ambient;
                }
            },

            /**
             The PhongMaterial's diffuse color.

             This property may be overridden by {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}}.

             Fires a {{#crossLink "PhongMaterial/diffuse:event"}}{{/crossLink}} event on change.

             @property diffuse
             @default [1.0, 1.0, 1.0]
             @type Float32Array
             */
            diffuse: {

                set: function (value) {

                    this._state.diffuse.set(value || [1.0, 1.0, 1.0]);

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}} property changes.
                     *
                     * @event diffuse
                     * @param value {Float32Array} The property's new value
                     */
                    this.fire("diffuse", this._state.diffuse);
                },

                get: function () {
                    return this._state.diffuse;
                }
            },

            /**
             The material's specular color.

             This property may be overridden by {{#crossLink "PhongMaterial/specularMap:property"}}{{/crossLink}}.

             Fires a {{#crossLink "PhongMaterial/specular:event"}}{{/crossLink}} event on change.

             @property specular
             @default [1.0, 1.0, 1.0]
             @type Float32Array
             */
            specular: {

                set: function (value) {

                    this._state.specular.set(value || [1.0, 1.0, 1.0]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/specular:property"}}{{/crossLink}} property changes.

                     @event specular
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("specular", this._state.specular);
                },

                get: function () {
                    return this._state.specular;
                }
            },

            /**
             The PhongMaterial's emissive color.

             This property may be overridden by {{#crossLink "PhongMaterial/emissiveMap:property"}}{{/crossLink}}.

             Fires a {{#crossLink "PhongMaterial/emissive:event"}}{{/crossLink}} event on change.

             @property emissive
             @default [0.0, 0.0, 0.0]
             @type Float32Array
             */
            emissive: {

                set: function (value) {

                    this._state.emissive.set(value || [0.0, 0.0, 0.0]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/emissive:property"}}{{/crossLink}} property changes.

                     @event emissive
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("emissive", this._state.emissive);
                },

                get: function () {
                    return this._state.emissive;
                }
            },

            /**
             Factor in the range [0..1] indicating how transparent the PhongMaterial is.

             A value of 0.0 indicates fully transparent, 1.0 is fully opaque.

             Attached {{#crossLink "Entity"}}Entities{{/crossLink}} will appear transparent only if they are also attached
             to {{#crossLink "Modes"}}Modes{{/crossLink}} that have {{#crossLink "Modes/transparent:property"}}transparent{{/crossLink}}
             set to **true**.

             This property may be overridden by {{#crossLink "PhongMaterial/opacityMap:property"}}{{/crossLink}}.

             Fires an {{#crossLink "PhongMaterial/opacity:event"}}{{/crossLink}} event on change.

             @property opacity
             @default 1.0
             @type Number
             */
            opacity: {

                set: function (value) {

                    value = (value !== undefined && value !== null) ? value : 1.0;

                    if (this._state.opacity === value) {
                        return;
                    }

                    this._state.opacity = value;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} property changes.
                     *
                     * @event opacity
                     * @param value {Number} The property's new value
                     */
                    this.fire("opacity", this._state.opacity);
                },

                get: function () {
                    return this._state.opacity;
                }
            },

            /**
             A factor in range [0..128] that determines the size and sharpness of the specular highlights create by this PhongMaterial.

             Larger values produce smaller, sharper highlights. A value of 0.0 gives very large highlights that are almost never
             desirable. Try values close to 10 for a larger, fuzzier highlight and values of 100 or more for a small, sharp
             highlight.

             Fires a {{#crossLink "PhongMaterial/shininess:event"}}{{/crossLink}} event on change.

             @property shininess
             @default 80.0
             @type Number
             */
            shininess: {

                set: function (value) {

                    this._state.shininess = value !== undefined ? value : 80;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/shininess:property"}}{{/crossLink}} property changes.

                     @event shininess
                     @param value Number The property's new value
                     */
                    this.fire("shininess", this._state.shininess);
                },

                get: function () {
                    return this._state.shininess;
                }
            },

            /**
             The PhongMaterial's line width.

             Fires a {{#crossLink "PhongMaterial/lineWidth:event"}}{{/crossLink}} event on change.

             @property lineWidth
             @default 1.0
             @type Number
             */
            lineWidth: {

                set: function (value) {

                    this._state.lineWidth = value || 1.0;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/lineWidth:property"}}{{/crossLink}} property changes.
                     *
                     * @event lineWidth
                     * @param value {Array(Number)} The property's new value
                     */
                    this.fire("lineWidth", this._state.lineWidth);
                },

                get: function () {
                    return this._state.lineWidth;
                }
            },

            /**
             The PhongMaterial's point size.

             Fires a {{#crossLink "PhongMaterial/pointSize:event"}}{{/crossLink}} event on change.

             @property pointSize
             @default 1.0
             @type Number
             */
            pointSize: {

                set: function (value) {

                    this._state.pointSize = value || 1.0;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/pointSize:property"}}{{/crossLink}} property changes.
                     *
                     * @event pointSize
                     * @param value {Array(Number)} The property's new value
                     */
                    this.fire("pointSize", this._state.pointSize);
                },

                get: function () {
                    return this._state.pointSize;
                }
            },

            /**
             Scalar in range 0-1 that controls how much {{#crossLink "CubeMap"}}CubeMap{{/crossLink}} is reflected by this PhongMaterial.

             The surface will be non-reflective when this is 0, and completely mirror-like when it is 1.0.

             This property may be overridden by {{#crossLink "PhongMaterial/reflectivityMap:property"}}{{/crossLink}}.

             Fires a {{#crossLink "PhongMaterial/reflectivity:event"}}{{/crossLink}} event on change.

             @property reflectivity
             @default 1.0
             @type Number
             */
            reflectivity: {

                set: function (value) {

                    this._state.reflectivity = value !== undefined ? value : 1.0;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/reflectivity:property"}}{{/crossLink}} property changes.

                     @event reflectivity
                     @param value Number The property's new value
                     */
                    this.fire("reflectivity", this._state.reflectivity);
                },

                get: function () {
                    return this._state.reflectivity;
                }
            },

            /**
             A normal {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/normalMap:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/normalMap:event"}}{{/crossLink}} event on change.

             @property normalMap
             @default null
             @type {Texture}
             */
            normalMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/normalMap:property"}}{{/crossLink}} property changes.

                     @event normalMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "normalMap", texture);
                },

                get: function () {
                    return this._attached.normalMap;
                }
            },

            /**
             An ambient {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/ambientMap:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/ambientMap:event"}}{{/crossLink}} event on change.

             @property ambientMap
             @default null
             @type {Texture}
             */
            ambientMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/ambientMap:property"}}{{/crossLink}} property changes.

                     @event ambientMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "ambientMap", texture);
                },

                get: function () {
                    return this._attached.ambientMap;
                }
            },

            /**
             A diffuse {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/diffuseMap:event"}}{{/crossLink}} event on change.

             @property diffuseMap
             @default null
             @type {Texture}
             */
            diffuseMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}} property changes.

                     @event diffuseMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "diffuseMap", texture);
                },

                get: function () {
                    return this._attached.diffuseMap;
                }
            },

            /**
             A specular {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/specular:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/specularMap:event"}}{{/crossLink}} event on change.

             @property specularMap
             @default null
             @type {Texture}
             */
            specularMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/specularMap:property"}}{{/crossLink}} property changes.

                     @event specularMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "specularMap", texture);
                },

                get: function () {
                    return this._attached.specularMap;
                }
            },

            /**
             An emissive {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/emissive:property"}}{{/crossLink}} when not null or undefined.

             Fires an {{#crossLink "PhongMaterial/emissiveMap:event"}}{{/crossLink}} event on change.

             @property emissiveMap
             @default null
             @type {Texture}
             */
            emissiveMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/emissiveMap:property"}}{{/crossLink}} property changes.

                     @event emissiveMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "emissiveMap", texture);
                },

                get: function () {
                    return this._attached.emissiveMap;
                }
            },

            /**
             An opacity {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} when not null or undefined.

             Fires an {{#crossLink "PhongMaterial/opacityMap:event"}}{{/crossLink}} event on change.

             @property opacityMap
             @default null
             @type {Texture}
             */
            opacityMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/opacityMap:property"}}{{/crossLink}} property changes.

                     @event opacityMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "opacityMap", texture);
                },

                get: function () {
                    return this._attached.opacityMap;
                }
            },

            /**
             A reflectivity {{#crossLink "Texture"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/reflectivity:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/reflectivityMap:event"}}{{/crossLink}} event on change.

             @property reflectivityMap
             @default null
             @type {Texture}
             */
            reflectivityMap: {

                set: function (texture) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/reflectivityMap:property"}}{{/crossLink}} property changes.

                     @event reflectivityMap
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Texture", "reflectivityMap", texture);
                },

                get: function () {
                    return this._attached.reflectivityMap;
                }
            },

            /**
             A reflection {{#crossLink "CubeMap"}}{{/crossLink}} attached to this PhongMaterial.

             Fires a {{#crossLink "PhongMaterial/reflection:event"}}{{/crossLink}} event on change.

             @property reflection
             @default null
             @type {Reflect}
             */
            reflection: {

                set: function (cubeMap) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/reflectivityMap:property"}}{{/crossLink}} property changes.

                     @event reflection
                     @param value {Reflect} The property's new value
                     */
                    this._attachComponent("xeogl.Reflect", "reflection", cubeMap);
                },

                get: function () {
                    return this._attached.reflection;
                }
            },

            /**
             A diffuse {{#crossLink "Fresnel"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/diffuseFresnel:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/diffuseFresnel:event"}}{{/crossLink}} event on change.

             @property diffuseFresnel
             @default null
             @type {Fresnel}
             */
            diffuseFresnel: {

                set: function (fresnel) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}} property changes.

                     @event diffuseFresnel
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Fresnel", "diffuseFresnel", fresnel);
                },

                get: function () {
                    return this._attached.diffuseFresnel;
                }
            },

            /**
             A specular {{#crossLink "Fresnel"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/specular:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/specularFresnel:event"}}{{/crossLink}} event on change.

             @property specularFresnel
             @default null
             @type {Fresnel}
             */
            specularFresnel: {

                set: function (fresnel) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/specularFresnel:property"}}{{/crossLink}} property changes.

                     @event specularFresnel
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Fresnel", "specularFresnel", fresnel);
                },

                get: function () {
                    return this._attached.specularFresnel;
                }
            },

            /**
             An emissive {{#crossLink "Fresnel"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/emissive:property"}}{{/crossLink}} when not null or undefined.

             Fires an {{#crossLink "PhongMaterial/emissiveFresnel:event"}}{{/crossLink}} event on change.

             @property emissiveFresnel
             @default null
             @type {Fresnel}
             */
            emissiveFresnel: {

                set: function (fresnel) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/emissiveFresnel:property"}}{{/crossLink}} property changes.

                     @event emissiveFresnel
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Fresnel", "emissiveFresnel", fresnel);
                },

                get: function () {
                    return this._attached.emissiveFresnel;
                }
            },

            /**
             An opacity {{#crossLink "Fresnel"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} when not null or undefined.

             Fires an {{#crossLink "PhongMaterial/opacityFresnel:event"}}{{/crossLink}} event on change.

             @property opacityFresnel
             @default null
             @type {Fresnel}
             */
            opacityFresnel: {

                set: function (fresnel) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/opacityFresnel:property"}}{{/crossLink}} property changes.

                     @event opacityFresnel
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Fresnel", "opacityFresnel", fresnel);
                },

                get: function () {
                    return this._attached.opacityFresnel;
                }
            },

            /**
             A reflectivity {{#crossLink "Fresnel"}}{{/crossLink}} attached to this PhongMaterial.

             This property overrides {{#crossLink "PhongMaterial/reflectivity:property"}}{{/crossLink}} when not null or undefined.

             Fires a {{#crossLink "PhongMaterial/reflectivityFresnel:event"}}{{/crossLink}} event on change.

             @property reflectivityFresnel
             @default null
             @type {Fresnel}
             */
            reflectivityFresnel: {

                set: function (fresnel) {

                    /**
                     Fired whenever this PhongMaterial's {{#crossLink "PhongMaterial/reflectivityFresnel:property"}}{{/crossLink}} property changes.

                     @event reflectivityFresnel
                     @param value Number The property's new value
                     */
                    this._attachComponent("xeogl.Fresnel", "reflectivityFresnel", fresnel);
                },

                get: function () {
                    return this._attached.reflectivityFresnel;
                }
            }
        },

        _attachComponent: function (expectedType, name, component) {
            component = this._attach({
                name: name,
                type: expectedType,
                component: component,
                sceneDefault: false,
                on: {
                    destroyed: {
                        callback: function () {
                            this._state[name] = null;
                            this._hashDirty = true;
                        },
                        scope: this
                    }
                }
            });
            this._state[name] = component ? component._state : null; // FIXME: Accessing _state breaks encapsulation
            this._hashDirty = true;
        },

        _compile: function () {

            if (this._hashDirty) {
                this._makeHash();
                this._hashDirty = false;
            }

            this._renderer.material = this._state;
        },

        _makeHash: function () {

            var state = this._state;

            var hash = ["/p"]; // 'P' for Phong

            if (state.normalMap) {
                hash.push("/b");
                if (state.normalMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.ambientMap) {
                hash.push("/a");
                if (state.ambientMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.diffuseMap) {
                hash.push("/d");
                if (state.diffuseMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.specularMap) {
                hash.push("/s");
                if (state.specularMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.emissiveMap) {
                hash.push("/e");
                if (state.emissiveMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.opacityMap) {
                hash.push("/o");
                if (state.opacityMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.reflectivityMap) {
                hash.push("/r");
                if (state.reflectivityMap.matrix) {
                    hash.push("/mat");
                }
            }

            if (state.diffuseFresnel) {
                hash.push("/df");
            }

            if (state.specularFresnel) {
                hash.push("/sf");
            }

            if (state.emissiveFresnel) {
                hash.push("/ef");
            }

            if (state.opacityFresnel) {
                hash.push("/of");
            }

            if (state.reflectivityFresnel) {
                hash.push("/rf");
            }

            hash.push(";");

            state.hash = hash.join("");
        },

        _getJSON: function () {

            var json = {

                // Colors

                ambient: this._state.ambient,
                diffuse: this._state.diffuse,
                specular: this._state.specular,
                emissive: this._state.emissive
            };

            if (this._state.opacity !== 1.0) {
                json.opacity = this._state.opacity;
            }

            if (this._state.shininess !== 80.0) {
                json.shininess = this._state.shininess;
            }

            if (this._state.reflectivity !== 1.0) {
                json.reflectivity = this._state.reflectivity;
            }


            // Lines and points

            if (this._state.lineWidth !== 1.0) {
                json.lineWidth = this._state.lineWidth;
            }

            if (this._state.pointSize !== 1.0) {
                json.pointSize = this._state.pointSize;
            }

            // Textures

            var components = this._attached;

            if (components.normalMap) {
                json.normalMap = components.normalMap.id;
            }

            if (components.ambientMap) {
                json.ambientMap = components.ambientMap.id;
            }

            if (components.diffuseMap) {
                json.diffuseMap = components.diffuseMap.id;
            }

            if (components.specularMap) {
                json.specularMap = components.specularMap.id;
            }

            if (components.emissiveMap) {
                json.emissiveMap = components.emissiveMap.id;
            }

            if (components.opacityMap) {
                json.opacityMap = components.opacityMap.id;
            }

            if (components.reflectivityMap) {
                json.reflectivityMap = components.reflectivityMap.id;
            }

            if (components.diffuseFresnel) {
                json.diffuseFresnel = components.diffuseFresnel.id;
            }

            if (components.specularFresnel) {
                json.specularFresnel = components.specularFresnel.id;
            }

            if (components.emissiveFresnel) {
                json.emissiveFresnel = components.emissiveFresnel.id;
            }

            if (components.opacityFresnel) {
                json.opacityFresnel = components.opacityFresnel.id;
            }

            if (components.reflectivityFresnel) {
                json.reflectivityFresnel = components.reflectivityFresnel.id;
            }

            return json;
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **Texture** specifies a texture map.

 <a href="../../examples/#materials_texture_diffuse"><img src="../../assets/images/screenshots/TorusGeometry.png"></img></a>

 ## Overview

 * Textures are grouped within {{#crossLink "PhongMaterial"}}PhongMaterials{{/crossLink}}s, which are attached to
 {{#crossLink "Entity"}}Entities{{/crossLink}}.
 To create a Texture from an image file, set the Texture's {{#crossLink "Texture/src:property"}}{{/crossLink}}
 property to the image file path.
 To create a Texture from an HTMLImageElement, set the Texture's {{#crossLink "Texture/image:property"}}{{/crossLink}}
 property to the HTMLImageElement.
 To render color images of {{#crossLink "Entity"}}Entities{{/crossLink}} to a Texture, set the Texture's {{#crossLink "Texture/target:property"}}{{/crossLink}}
 property to a {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} that is attached to those {{#crossLink "Entity"}}Entities{{/crossLink}}.
 Similarly, to render depth images of {{#crossLink "Entity"}}Entities{{/crossLink}} to a Texture, set the Texture's {{#crossLink "Texture/target:property"}}{{/crossLink}}
 property to a {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} that is attached to those {{#crossLink "Entity"}}Entities{{/crossLink}}.
 For special effects, we often use rendered Textures in combination with {{#crossLink "Shader"}}Shaders{{/crossLink}} and {{#crossLink "Stage"}}Stages{{/crossLink}}.

 <img src="../../../assets/images/Texture.png"></img>

 ## Examples

 * [Diffuse Texture](../../examples/#materials_texture_diffuse)
 * [Specular Texture](../../examples/#materials_texture_specular)
 * [Opacity Texture](../../examples/#materials_texture_opacity)
 * [Emissive Texture](../../examples/#materials_texture_emissive)
 * [Normal map](../../examples/#materials_texture_normalMap)
 * [Diffuse Video Texture](../../examples/#materials_texture_video)
 * [Texture Animation](../../examples/#materials_texture_animation)

 ## Usage

 In this example we have an Entity with

 * a {{#crossLink "Lights"}}{{/crossLink}} containing an {{#crossLink "AmbientLight"}}{{/crossLink}} and a {{#crossLink "DirLight"}}{{/crossLink}},
 * a {{#crossLink "PhongMaterial"}}{{/crossLink}} which applies diffuse and specular {{#crossLink "Texture"}}Textures{{/crossLink}}, and
 * a {{#crossLink "TorusGeometry"}}{{/crossLink}}.

 Note that xeogl will ignore the {{#crossLink "PhongMaterial"}}PhongMaterial's{{/crossLink}} {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}}
 and {{#crossLink "PhongMaterial/specular:property"}}{{/crossLink}} properties, since we assigned {{#crossLink "Texture"}}Textures{{/crossLink}} to the {{#crossLink "PhongMaterial"}}PhongMaterial's{{/crossLink}} {{#crossLink "PhongMaterial/diffuseMap:property"}}{{/crossLink}} and
 {{#crossLink "PhongMaterial/specularMap:property"}}{{/crossLink}} properties. The {{#crossLink "Texture"}}Textures'{{/crossLink}} pixel
 colors directly provide the diffuse and specular components for each fragment across the {{#crossLink "Geometry"}}{{/crossLink}} surface.

 ```` javascript
 var entity = new xeogl.Entity({

    lights: new xeogl.Lights({
        lights: [
            new xeogl.AmbientLight({
                color: [0.7, 0.7, 0.7]
            }),
            new xeogl.DirLight({
                dir: [-1, -1, -1],
                color: [0.5, 0.7, 0.5],
                intensity: [1.0, 1.0, 1.0],
                space: "view"
            })
        ]
    }),

    material: new xeogl.PhongMaterial({
        ambient: [0.3, 0.3, 0.3],
        diffuse: [0.5, 0.5, 0.0],   // Ignored, since we have assigned a Texture to diffuseMap, below
        specular: [1.0, 1.0, 1.0],   // Ignored, since we have assigned a Texture to specularMap, below
        diffuseMap: new xeogl.Texture({
            src: "diffuseMap.jpg"
        }),
        specularMap: new xeogl.Fresnel({
            src: "diffuseMap.jpg"
        }),
        shininess: 80, // Default
        opacity: 1.0 // Default
    }),

    geometry: new xeogl.TorusGeometry()
});
 ````

 @class Texture
 @module xeogl
 @submodule materials
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Texture in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID for this Texture, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Texture.
 @param [cfg.src=null] {String} Path to image file to load into this Texture. See the {{#crossLink "Texture/src:property"}}{{/crossLink}} property for more info.
 @param [cfg.image=null] {HTMLImageElement} HTML Image object to load into this Texture. See the {{#crossLink "Texture/image:property"}}{{/crossLink}} property for more info.
 @param [cfg.target=null] {String | xeogl.ColorTarget | xeogl.DepthTarget} Instance or ID of a {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} or
 {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} to source this Texture from. See the {{#crossLink "Texture/target:property"}}{{/crossLink}} property for more info.
 @param [cfg.minFilter="linearMipmapLinear"] {String} How the texture is sampled when a texel covers less than one pixel. See the {{#crossLink "Texture/minFilter:property"}}{{/crossLink}} property for more info.
 @param [cfg.magFilter="linear"] {String} How the texture is sampled when a texel covers more than one pixel. See the {{#crossLink "Texture/magFilter:property"}}{{/crossLink}} property for more info.
 @param [cfg.wrapS="repeat"] {String} Wrap parameter for texture coordinate *S*. See the {{#crossLink "Texture/wrapS:property"}}{{/crossLink}} property for more info.
 @param [cfg.wrapT="repeat"] {String} Wrap parameter for texture coordinate *S*. See the {{#crossLink "Texture/wrapT:property"}}{{/crossLink}} property for more info.
 @param [cfg.flipY=false] {Boolean} Flips this Texture's source data along its vertical axis when true.
 @param [cfg.translate=[0,0]] {Array of Number} 2D translation vector that will be added to texture's *S* and *T* coordinates.
 @param [cfg.scale=[1,1]] {Array of Number} 2D scaling vector that will be applied to texture's *S* and *T* coordinates.
 @param [cfg.rotate=0] {Number} Rotation, in degrees, that will be applied to texture's *S* and *T* coordinates.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Texture = xeogl.Component.extend({

        type: "xeogl.Texture",

        _init: function (cfg) {

            // Rendering state

            this._state = new xeogl.renderer.Texture({

                texture: null,  // xeogl.renderer.webgl.Texture2D
                matrix: null,   // Float32Array

                // Texture properties

                minFilter: null,
                magFilter: null,
                wrapS: null,
                wrapT: null,
                flipY: null,

                pageTableTexture: null
            });

            // Data source

            this._src = null;   // URL string
            this._image = null; // HTMLImageElement
            this._target = null;// xeogl.RenderTarget

            this._pageTable = null; // Float32Array

            // Transformation

            this._translate = xeogl.math.vec2([0, 0]);
            this._scale = xeogl.math.vec2([1, 1]);
            this._rotate = xeogl.math.vec2([0, 0]);

            // Dirty flags, processed in _buildTexture()

            this._matrixDirty = false;
            this._srcDirty = false;
            this._imageDirty = false;
            this._targetDirty = false;
            this._propsDirty = false;

            // Handle WebGL context restore

            this._webglContextRestored = this.scene.canvas.on("webglContextRestored", this._webglContextRestored, this);

            // Transform

            this.translate = cfg.translate;
            this.scale = cfg.scale;
            this.rotate = cfg.rotate;

            // Properties

            this.minFilter = cfg.minFilter;
            this.magFilter = cfg.magFilter;
            this.wrapS = cfg.wrapS;
            this.wrapT = cfg.wrapT;
            this.flipY = cfg.flipY;

            // Data source

            if (cfg.src) {
                this.src = cfg.src; // Image file

            } else if (cfg.image) {
                this.image = cfg.image; // Image object

            } else if (cfg.target) {
                this.target = cfg.target; // Render target
            }

            xeogl.stats.memory.textures++;
        },

        _webglContextRestored: function () {

            this._state.texture = null;

            this._matrixDirty = true;
            this._propsDirty = true;

            if (this._image) {
                this._imageDirty = true;

            } else if (this._src) {
                this._srcDirty = true;

            } else if (this._target) {
                this._targetDirty = true;
            }

            this._scheduleUpdate();
        },

        _update: function () {

            var gl = this.scene.canvas.gl;

            var state = this._state;

            if (this._srcDirty) {

                if (this._src) {

                    this._loadSrc(this._src);

                    this._srcDirty = false;

                    // _imageDirty is set when the image has loaded

                    return;
                }
            }

            if (this._imageDirty) {

                if (this._image) {

                    if (this._onTargetActive) {
                        this._target.off(this._onTargetActive);
                        this._onTargetActive = null;
                    }

                    if (state.texture && state.texture.renderBuffer) {

                        // Detach from "virtual texture" provided by render target
                        state.texture = null;
                    }

                    if (!state.texture) {
                        state.texture = new xeogl.renderer.webgl.Texture2D(gl);
                    }

                    state.texture.setImage(this._image, state);

                    this._imageDirty = false;
                    this._propsDirty = true; // May now need to regenerate mipmaps etc
                }
            }

            if (this._targetDirty) {

                if (state.texture && !state.texture.renderBuffer) {
                    state.texture.destroy();
                    state.texture = null;
                }

                if (this._onTargetActive) {
                    this._target.off(this._onTargetActive);
                    this._onTargetActive = null;
                }

                if (this._target) {
                    this._onTargetActive = this._target.on("active",  // Called immediately when first bound
                        function (active) {
                            state.texture = active ? this._state.renderBuf.getTexture() : null;
                        });
                }

                this._targetDirty = false;
                this._propsDirty = true;
            }

            if (this._matrixDirty) {

                var matrix;

                var t;

                if (this._translate[0] !== 0 || this._translate[2] !== 0) {
                    matrix = xeogl.math.translationMat4v([this._translate[0], this._translate[1], 0]);
                }

                if (this._scale[0] !== 1 || this._scale[1] !== 1) {
                    t = xeogl.math.scalingMat4v([this._scale[0], this._scale[1], 1]);
                    matrix = matrix ? xeogl.math.mulMat4(matrix, t) : t;
                }

                if (this._rotate !== 0) {
                    t = xeogl.math.rotationMat4v(this._rotate * 0.0174532925, [0, 0, 1]);
                    matrix = matrix ? xeogl.math.mulMat4(matrix, t) : t;
                }

                var oldMatrix = state.matrix;

                state.matrix = matrix;

                this._matrixDirty = false;

                if (!!matrix !== !!oldMatrix) {

                    // Matrix has been lazy-created, now need
                    // to recompile xeogl shaders to use the matrix

                    this.fire("dirty");
                }
            }

            if (this._propsDirty) {

                if (state.texture && state.texture.setProps) {

                    // TODO: Ability to set props on texture from _target's RenderBuffer?

                    state.texture.setProps(state);
                }

                this._propsDirty = false;
            }

            if (this._pageTableDirty) {

                if (this._image) {

                    if (this._onTargetActive) {
                        this._target.off(this._onTargetActive);
                        this._onTargetActive = null;
                    }

                    if (state.texture && state.texture.renderBuffer) {

                        // Detach from "virtual texture" provided by render target
                        state.texture = null;
                    }

                    if (!state.texture) {
                        state.texture = new xeogl.renderer.webgl.Texture2D(gl);
                    }

                    state.texture.setImage(this._image, state);

                    this._imageDirty = false;
                    this._propsDirty = true; // May now need to regenerate mipmaps etc
                }
            }

            this._renderer.imageDirty = true;
        },


        _loadSrc: function (src) {

            var self = this;

            var image = new Image();

            var spinner = this.scene.canvas.spinner;
            var spinnerTextures = spinner.textures;

            image.onload = function () {

                if (self._src === src) {

                    // Ensure data source was not changed while we were loading

                    // Keep self._src because that's where we loaded the image
                    // from, and we may need to save that in JSON later

                    self._image = xeogl.renderer.webgl.ensureImageSizePowerOfTwo(image);

                    self._imageDirty = true;
                    self._srcDirty = false;
                    self._targetDirty = false;

                    if (spinnerTextures) {
                        spinner.processes--;
                    }

                    self._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/image:property"}}{{/crossLink}} property changes.
                     * @event image
                     * @param value {HTML Image} The property's new value
                     */
                    self.fire("image", self._image);

                    /**
                     * Fired whenever this Texture has loaded the
                     * image file that its {{#crossLink "Texture/src:property"}}{{/crossLink}} property currently points to.
                     * @event loaded
                     * @param value {HTML Image} The value of the {{#crossLink "Texture/src:property"}}{{/crossLink}} property
                     */
                    self.fire("loaded", self._src);
                }

//                task.setCompleted();
            };

            image.onerror = function () {
                //              task.setFailed();
                if (spinnerTextures) {
                    spinner.processes--;
                }
            };

            if (src.indexOf("data") === 0) {

                // Image data
                image.src = src;

            } else {

                // Image file
                image.crossOrigin = "Anonymous";
                image.src = src;

                if (spinnerTextures) {
                    spinner.processes++;
                }
            }
        },

        _props: {

            /**
             * Indicates an HTML DOM Image object to source this Texture from.
             *
             * Alternatively, you could indicate the source via either of properties
             * {{#crossLink "Texture/src:property"}}{{/crossLink}} or {{#crossLink "Texture/target:property"}}{{/crossLink}}.
             *
             * Fires an {{#crossLink "Texture/image:event"}}{{/crossLink}} event on change.
             *
             * Sets the {{#crossLink "Texture/src:property"}}{{/crossLink}} and
             * {{#crossLink "Texture/target:property"}}{{/crossLink}} properties to null.
             *
             * @property image
             * @default null
             * @type {HTMLImageElement}
             */
            image: {

                set: function (value) {

                    this._image = xeogl.renderer.webgl.ensureImageSizePowerOfTwo(value);
                    this._src = null;

                    this._imageDirty = true;
                    this._srcDirty = false;
                    this._targetDirty = false;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/image:property"}}{{/crossLink}} property changes.
                     * @event image
                     * @param value {HTML Image} The property's new value
                     */
                    this.fire("image", this._image);
                },

                get: function () {
                    return this._state.image;
                }
            },

            /**
             * Indicates a path to an image file to source this Texture from.
             *
             * Alternatively, you could indicate the source via either of properties
             * {{#crossLink "Texture/image:property"}}{{/crossLink}} or {{#crossLink "Texture/target:property"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "Texture/src:event"}}{{/crossLink}} event on change.
             *
             * Sets the {{#crossLink "Texture/image:property"}}{{/crossLink}} and
             * {{#crossLink "Texture/target:property"}}{{/crossLink}} properties to null.
             *
             * @property src
             * @default null
             * @type String
             */
            src: {

                set: function (value) {

                    this._image = null;
                    this._src = value;

                    this._imageDirty = false;
                    this._srcDirty = true;
                    this._targetDirty = false;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's {{#crossLink "Texture/src:property"}}{{/crossLink}} property changes.
                     * @event src
                     * @param value The property's new value
                     * @type String
                     */
                    this.fire("src", this._src);
                },

                get: function () {
                    return this._src;
                }
            },

            /**
             * Instance or ID of a {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} or
             * {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} to source this Texture from.
             *
             * Alternatively, you could indicate the source via either of properties
             * {{#crossLink "Texture/src:property"}}{{/crossLink}} or {{#crossLink "Texture/image:property"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "Texture/target:event"}}{{/crossLink}} event on change.
             *
             * Sets the {{#crossLink "Texture/src:property"}}{{/crossLink}} and
             * {{#crossLink "Texture/image:property"}}{{/crossLink}} properties to null.
             *
             * @property target
             * @default null
             * @type String | xeogl.ColorTarget | xeogl.DepthTarget
             */
            target: {

                set: function (value) {

                    this._image = null;
                    this._src = null;

                    this._target = this._attach({
                        name: "renderBuf",
                        type: null,
                        component: value,
                        sceneDefault: true,
                        on: {
                            active: {
                                callback: this._onTargetActive,
                                scope: this
                            }
                        }
                    });

                    this._imageDirty = false;
                    this._srcDirty = false;
                    this._targetDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's   {{#crossLink "Texture/target:property"}}{{/crossLink}} property changes.
                     * @event target
                     * @param value The property's new value
                     * @type String | xeogl.ColorTarget | xeogl.DepthTarget
                     */
                    this.fire("target", this._target);
                },

                get: function () {
                    return this._attached.target;
                }
            },

            /**
             * Page table for sparse virtual texturing.
             *
             * Fires an {{#crossLink "Texture/pageTable:event"}}{{/crossLink}} event on change.
             *
             * @property pageTable
             * @default null
             * @type {Float32Array}
             */
            pageTable: {

                set: function (value) {

                    this._pageTable = value;

                    this._imageDirty = true;

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/pageTable:property"}}{{/crossLink}} property changes.
                     * @event pageTable
                     * @param value {Float32Array} The property's new value
                     */
                    this.fire("pageTable", this._pageTable);
                },

                get: function () {
                    return this._state._pageTable;
                }
            },

            /**
             * 2D translation vector that will be added to this Texture's *S* and *T* coordinates.
             *
             * Fires a {{#crossLink "Texture/translate:event"}}{{/crossLink}} event on change.
             *
             * @property translate
             * @default [0, 0]
             * @type Array(Number)
             */
            translate: {

                set: function (value) {

                    this._translate.set(value || [0, 0]);
                    this._matrixDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's   {{#crossLink "Texture/translate:property"}}{{/crossLink}} property changes.
                     * @event translate
                     * @param value {Array(Number)} The property's new value
                     */
                    this.fire("translate", this._translate);
                },

                get: function () {
                    return this._translate;
                }
            },

            /**
             * 2D scaling vector that will be applied to this Texture's *S* and *T* coordinates.
             *
             * Fires a {{#crossLink "Texture/scale:event"}}{{/crossLink}} event on change.
             *
             * @property scale
             * @default [1, 1]
             * @type Array(Number)
             */
            scale: {

                set: function (value) {

                    this._scale.set(value || [1, 1]);
                    this._matrixDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's   {{#crossLink "Texture/scale:property"}}{{/crossLink}} property changes.
                     * @event scale
                     * @param value {Array(Number)} The property's new value
                     */
                    this.fire("scale", this._scale);
                },

                get: function () {
                    return this._scale;
                }
            },

            /**
             * Rotation, in degrees, that will be applied to this Texture's *S* and *T* coordinates.
             *
             * Fires a {{#crossLink "Texture/rotate:event"}}{{/crossLink}} event on change.
             *
             * @property rotate
             * @default 0
             * @type Number
             */
            rotate: {

                set: function (value) {

                    value = value || 0;

                    if (this._rotate === value) {
                        return;
                    }

                    this._rotate = value;
                    this._matrixDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/rotate:property"}}{{/crossLink}} property changes.
                     * @event rotate
                     * @param value {Number} The property's new value
                     */
                    this.fire("rotate", this._rotate);
                },

                get: function () {
                    return this._rotate;
                }
            },

            /**
             * How this Texture is sampled when a texel covers less than one pixel.
             *
             * Options are:
             *
             *
             *     * **"nearest"** - Uses the value of the texture element that is nearest
             *     (in Manhattan distance) to the center of the pixel being textured.
             *
             *     * **"linear"** - Uses the weighted average of the four texture elements that are
             *     closest to the center of the pixel being textured.
             *
             *     * **"nearestMipmapNearest"** - Chooses the mipmap that most closely matches the
             *     size of the pixel being textured and uses the "nearest" criterion (the texture
             *     element nearest to the center of the pixel) to produce a texture value.
             *
             *     * **"linearMipmapNearest"** - Chooses the mipmap that most closely matches the size of
             *     the pixel being textured and uses the "linear" criterion (a weighted average of the
             *     four texture elements that are closest to the center of the pixel) to produce a
             *     texture value.
             *
             *     * **"nearestMipmapLinear"** - Chooses the two mipmaps that most closely
             *     match the size of the pixel being textured and uses the "nearest" criterion
             *     (the texture element nearest to the center of the pixel) to produce a texture
             *     value from each mipmap. The final texture value is a weighted average of those two
             *     values.
             *
             *     * **"linearMipmapLinear"** - **(default)** - Chooses the two mipmaps that most closely match the size
             *     of the pixel being textured and uses the "linear" criterion (a weighted average
             *     of the four texture elements that are closest to the center of the pixel) to
             *     produce a texture value from each mipmap. The final texture value is a weighted
             *     average of those two values.
             *
             *
             * Fires a {{#crossLink "Texture/minFilter:event"}}{{/crossLink}} event on change.
             *
             * @property minFilter
             * @default "linearMipmapLinear"
             * @type String
             */
            minFilter: {

                set: function (value) {

                    value = value || "linearMipmapLinear";

                    if (value !== "linear" &&
                        value !== "linearMipmapNearest" &&
                        value !== "linearMipmapLinear" &&
                        value !== "nearestMipmapLinear" &&
                        value !== "linearMipmapLinear") {

                        this.error("Unsupported value for 'minFilter': '" + value +
                            "' - supported values are 'linear', 'linearMipmapNearest', 'nearestMipmapLinear' " +
                            "and 'linearMipmapLinear'. Defaulting to 'linearMipmapLinear'.");

                        value = "linearMipmapLinear";
                    }

                    this._state.minFilter = value;
                    this._propsDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/minFilter:property"}}{{/crossLink}} property changes.
                     * @event minFilter
                     * @param value {String} The property's new value
                     */
                    this.fire("minFilter", this._state.minFilter);
                },

                get: function () {
                    return this._state.minFilter;
                }
            },

            /**
             * How this Texture is sampled when a texel covers more than one pixel.
             *
             * Options are:
             *
             *
             *     * **"nearest"** - Uses the value of the texture element that is nearest
             *     (in Manhattan distance) to the center of the pixel being textured.
             *     * **"linear"** - **(default)** - Uses the weighted average of the four texture elements that are
             *     closest to the center of the pixel being textured.
             *
             *
             * Fires a {{#crossLink "Texture/magFilter:event"}}{{/crossLink}} event on change.
             *
             * @property magFilter
             * @default "linear"
             * @type String
             */
            magFilter: {

                set: function (value) {

                    value = value || "linear";

                    if (value !== "linear" && value !== "nearest") {

                        this.error("Unsupported value for 'magFilter': '" + value +
                            "' - supported values are 'linear' and 'nearest'. Defaulting to 'linear'.");

                        value = "linear";
                    }

                    this._state.magFilter = value;
                    this._propsDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/magFilter:property"}}{{/crossLink}} property changes.
                     * @event magFilter
                     * @param value {String} The property's new value
                     */
                    this.fire("magFilter", this._state.magFilter);
                },

                get: function () {
                    return this._state.magFilter;
                }
            },

            /**
             * Wrap parameter for this Texture's *S* coordinate.
             *
             * Options are:
             *
             *
             *     * **"clampToEdge"** -  causes *S* coordinates to be clamped to the size of the texture.
             *     * **"mirroredRepeat"** - causes the *S* coordinate to be set to the fractional part of the texture coordinate
             *     if the integer part of *S* is even; if the integer part of *S* is odd, then the *S* texture coordinate is
             *     set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *S*.
             *     * **"repeat"** - **(default)** - causes the integer part of the *S* coordinate to be ignored; xeogl uses only the
             *     fractional part, thereby creating a repeating pattern.
             *
             *
             * Fires a {{#crossLink "Texture/wrapS:event"}}{{/crossLink}} event on change.
             *
             * @property wrapS
             * @default "repeat"
             * @type String
             */
            wrapS: {

                set: function (value) {

                    value = value || "repeat";

                    if (value !== "clampToEdge" && value !== "mirroredRepeat" && value !== "repeat") {

                        this.error("Unsupported value for 'wrapS': '" + value +
                            "' - supported values are 'clampToEdge', 'mirroredRepeat' and 'repeat'. Defaulting to 'repeat'.");

                        value = "repeat";
                    }

                    this._state.wrapS = value;
                    this._propsDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/wrapS:property"}}{{/crossLink}} property changes.
                     * @event wrapS
                     * @param value {String} The property's new value
                     */
                    this.fire("wrapS", this._state.wrapS);
                },

                get: function () {
                    return this._state.wrapS;
                }
            },

            /**
             * Wrap parameter for this Texture's *T* coordinate.
             *
             * Options are:
             *
             *
             *     * **"clampToEdge"** -  Causes *T* coordinates to be clamped to the size of the texture.
             *     * **"mirroredRepeat"** - Causes the *T* coordinate to be set to the fractional part of the texture coordinate
             *     if the integer part of *T* is even; if the integer part of *T* is odd, then the *T* texture coordinate is
             *     set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *T*.
             *     * **"repeat"** - **(default)** - Causes the integer part of the *T* coordinate to be ignored; xeogl uses only the
             *     fractional part, thereby creating a repeating pattern.
             *
             *
             * Fires a {{#crossLink "Texture/wrapT:event"}}{{/crossLink}} event on change.
             *
             * @property wrapT
             * @default "repeat"
             * @type String
             */
            wrapT: {

                set: function (value) {

                    value = value || "repeat";

                    if (value !== "clampToEdge" && value !== "mirroredRepeat" && value !== "repeat") {

                        this.error("Unsupported value for 'wrapT': '" + value +
                            "' - supported values are 'clampToEdge', 'mirroredRepeat' and 'repeat'. Defaulting to 'repeat'.");

                        value = "repeat";
                    }

                    this._state.wrapT = value;
                    this._propsDirty = true;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/wrapT:property"}}{{/crossLink}} property changes.
                     * @event wrapT
                     * @param value {String} The property's new value
                     */
                    this.fire("wrapT", this._state.wrapT);
                },

                get: function () {
                    return this._state.wrapT;
                }
            },

            /**
             * Flips this Texture's source data along its vertical axis when true.
             *
             * Fires a {{#crossLink "Texture/flipY:event"}}{{/crossLink}} event on change.
             *
             * @property flipY
             * @default false
             * @type Boolean
             */
            flipY: {

                set: function (value) {

                    value = !!value;

                    if (this._state.flipY === value) {
                        return;
                    }

                    this._state.flipY = value;
                    this._imageDirty = true; // flipY is used when loading image data, not when post-applying props

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Texture's  {{#crossLink "Texture/flipY:property"}}{{/crossLink}} property changes.
                     * @event flipY
                     * @param value {String} The property's new value
                     */
                    this.fire("flipY", this._state.flipY);
                },

                get: function () {
                    return this._state.flipY;
                }
            }
        },

        _getJSON: function () {

            var json = {};

            if (this._translate && (this._translate[0] !== 0 || this._translate[1] !== 0)) {
                json.translate = this._translate;
            }

            if (this._scale && (this._scale[0] !== 1 || this._scale[1] !== 1)) {
                json.scale = this._scale;
            }

            if (this._rotate !== 0) {
                json.rotate = this._rotate;
            }

            if (this._state.minFilter !== "linearMipmapLinear") {
                json.minFilter = this._state.minFilter;
            }

            if (this._state.magFilter !== "linear") {
                json.magFilter = this._state.magFilter;
            }

            if (this._state.wrapS !== "repeat") {
                json.wrapS = this._state.wrapS;
            }

            if (this._state.wrapT !== "repeat") {
                json.wrapT = this._state.wrapT;
            }

            if (this._state.flipY !== false) {
                json.flipY = this._state.flipY;
            }

            if (this._src) {
                json.src = this._src;

            } else if (this._target) {
                json.target = this._target.id;

            } else if (this._image) {
                // TODO: Image data
                // json.src = image.src;
            }

            if (false && this._state.pageTable !== false) {
                json.pageTable = this._state.pageTable;
            }

            return json;
        },

        _destroy: function () {

            this.scene.canvas.off(this._webglContextRestored);

            if (this._state.texture) {
                this._state.texture.destroy();
            }

            xeogl.stats.memory.textures--;
        }
    });

})();
;/**
 A **Fresnel** specifies a Fresnel effect for attached {{#crossLink "PhongMaterial"}}PhongMaterials{{/crossLink}}.

 <a href="../../examples/#materials_fresnel_specular"><img src="../../assets/images/screenshots/diffuseFresnel.png"></img></a>

 ## Overview

 * Fresnels are grouped within {{#crossLink "PhongMaterial"}}{{/crossLink}}s, which are attached to
 {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Examples

 * [Diffuse Fresnel](../../examples/#materials_fresnel_diffuse)
 * [Specular Fresnel](../../examples/#materials_fresnel_specular)
 * [Opacity Fresnel](../../examples/#materials_fresnel_opacity)
 * [Emissive Fresnel](../../examples/#materials_fresnel_emissive)

 <img src="../../../assets/images/Fresnel.png"></img>

 ## Usage

 ````javascript
 var entity = new xeogl.Entity({

     material: new xeogl.PhongMaterial({
         ambient: [0.3, 0.3, 0.3],
         shininess: 30,

         diffuseFresnel: new xeogl.Fresnel({
             edgeColor: [1.0, 1.0, 1.0],
             centerColor: [0.0, 0.0, 0.0],
             power: 4,
             bias: 0.6
         }),

         specularFresnel: new xeogl.Fresnel({
             edgeColor: [1.0, 1.0, 1.0],
             centerColor: [0.0, 0.0, 0.0],
             power: 4,
             bias: 0.2
         })
     }),

     new xeogl.TorusGeometry()
 });
 ````

 @class Fresnel
 @module xeogl
 @submodule materials
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Geometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Fresnel.
 @param [cfg.edgeColor=[ 0.0, 0.0, 0.0 ]] {Array of Number} Color used on edges.
 @param [cfg.centerColor=[ 1.0, 1.0, 1.0 ]] {Array of Number} Color used on center.
 @param [cfg.edgeBias=0] {Number} Bias at the edge.
 @param [cfg.centerBias=1] {Number} Bias at the center.
 @param [cfg.power=0] {Number} The power.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Fresnel = xeogl.Component.extend({

        type: "xeogl.Fresnel",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Fresnel({
                edgeColor: xeogl.math.vec3([0, 0, 0]),
                centerColor: xeogl.math.vec3([1, 1, 1]),
                edgeBias: 0,
                centerBias: 1,
                power: 1
            });

            this.edgeColor = cfg.edgeColor;
            this.centerColor = cfg.centerColor;
            this.edgeBias = cfg.edgeBias;
            this.centerBias = cfg.centerBias;
            this.power = cfg.power;
        },

        _props: {

            /**
             This Fresnel's edge color.

             Fires an {{#crossLink "Fresnel/edgeColor:event"}}{{/crossLink}} event on change.

             @property edgeColor
             @default [0.0, 0.0, 0.0]
             @type Float32Array
             */
            edgeColor: {

                set: function (value) {

                    this._state.edgeColor.set(value || [0.0, 0.0, 0.0]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Fresnel's {{#crossLink "Fresnel/edgeColor:property"}}{{/crossLink}} property changes.

                     @event edgeColor
                     @param value The property's new value
                     */
                    this.fire("edgeColor", this._state.edgeColor);
                },

                get: function () {
                    return this._state.edgeColor;
                }
            },

            /**
             This Fresnel's center color.

             Fires an {{#crossLink "Fresnel/centerColor:event"}}{{/crossLink}} event on change.

             @property centerColor
             @default [1.0, 1.0, 1.0]
             @type Float32Array
             */
            centerColor: {

                set: function (value) {

                    this._state.centerColor.set(value || [1.0, 1.0, 1.0]);

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Fresnel's {{#crossLink "Fresnel/centerColor:property"}}{{/crossLink}} property changes.

                     @event centerColor
                     @param value The property's new value
                     */
                    this.fire("centerColor", this._state.centerColor);
                },

                get: function () {
                    return this._state.centerColor;
                }
            },

            /**
             * Indicates this Fresnel's edge bias.
             *
             * Fires a {{#crossLink "Fresnel/edgeBias:event"}}{{/crossLink}} event on change.
             *
             * @property edgeBias
             * @default 0
             * @type Number
             */
            edgeBias: {

                set: function (value) {

                    this._state.edgeBias = value || 0;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this Fresnel's {{#crossLink "Fresnel/edgeBias:property"}}{{/crossLink}} property changes.
                     *
                     * @event edgeBias
                     * @param value The property's new value
                     */
                    this.fire("edgeBias", this._state.edgeBias);
                },

                get: function () {
                    return this._state.edgeBias;
                }
            },

            /**
             * Indicates this Fresnel's center bias.
             *
             * Fires a {{#crossLink "Fresnel/centerBias:event"}}{{/crossLink}} event on change.
             *
             * @property centerBias
             * @default 1
             * @type Number
             */
            centerBias: {

                set: function (value) {

                    this._state.centerBias = (value !== undefined && value !== null) ? value : 1;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this Fresnel's {{#crossLink "Fresnel/centerBias:property"}}{{/crossLink}} property changes.
                     *
                     * @event centerBias
                     * @param value The property's new value
                     */
                    this.fire("centerBias", this._state.centerBias);
                },

                get: function () {
                    return this._state.centerBias;
                }
            },

            /**
             * Indicates this Fresnel's power.
             *
             * Fires a {{#crossLink "Fresnel/power:event"}}{{/crossLink}} event on change.
             *
             * @property power
             * @default 1
             * @type Number
             */
            power: {

                set: function (value) {

                    this._state.power = (value !== undefined && value !== null) ? value : 1;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this Fresnel's {{#crossLink "Fresnel/power:property"}}{{/crossLink}} property changes.
                     *
                     * @event power
                     * @param value The property's new value
                     */
                    this.fire("power", this._state.power);
                },

                get: function () {
                    return this._state.power;
                }
            }
        },

        _getJSON: function () {
            return {
                edgeColor: this._state.edgeColor,
                centerColor: this._state.centerColor,
                edgeBias: this._state.edgeBias,
                centerBias: this._state.centerBias,
                power: this._state.power
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **Reflect** specifies a reflect map.

 ## Overview

 * Reflects are grouped within {{#crossLink "Material"}}Material{{/crossLink}}s, which are attached to
 {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * To create a Reflect from an image file, set the Reflect's {{#crossLink "Reflect/src:property"}}{{/crossLink}}
 property to the image file path.
 * To create a Reflect from an HTML DOM Image object, set the Reflect's {{#crossLink "Reflect/image:property"}}{{/crossLink}}
 property to the entity.
 * To render color images of {{#crossLink "Entity"}}Entities{{/crossLink}} to a Reflect, set the Reflect's {{#crossLink "Reflect/target:property"}}{{/crossLink}}
 property to a {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} that is attached to those {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * Similarly, to render depth images of {{#crossLink "Entity"}}Entities{{/crossLink}} to a Reflect, set the Reflect's {{#crossLink "Reflect/target:property"}}{{/crossLink}}
 property to a {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} that is attached to those {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * For special effects, we often use rendered Reflects in combination with {{#crossLink "Shader"}}Shaders{{/crossLink}} and {{#crossLink "Stage"}}Stages{{/crossLink}}.

 <img src="../../../assets/images/Reflect.png"></img>

 ## Usage

 The example below has:

 * three Reflects,
 * a {{#crossLink "PhongMaterial"}}{{/crossLink}} which applies the {{#crossLink "Reflect"}}{{/crossLink}}s as diffuse, normal and specular maps,
 * a {{#crossLink "Lights"}}{{/crossLink}} containing an {{#crossLink "AmbientLight"}}{{/crossLink}} and a {{#crossLink "PointLight"}}{{/crossLink}},
 * a {{#crossLink "Geometry"}}{{/crossLink}} that has the default box shape, and
 * an {{#crossLink "Entity"}}{{/crossLink}} attached to all of the above.


 ```` javascript
 var scene = new xeogl.Scene();

 var reflect1 = new xeogl.Reflect(scene, {
    src: "diffuseMap.jpg"
 });

 var reflect2 = new xeogl.Reflect(scene, {
    src: "normalMap.jpg"
 });

 var reflect3 = new xeogl.Reflect(scene, {
    src: "specularMap.jpg"
 });

 var material = new xeogl.PhongMaterial(scene, {
    ambient: [0.3, 0.3, 0.3],
    shininess: 30,
    diffuseMap: reflect1,
    normalMap: reflect2,
    specularMap: reflect3
 });

 var light1 = new xeogl.PointLight(scene, {
    pos: [0, 100, 100],
    color: [0.5, 0.7, 0.5]
 });

 var light2 = new xeogl.AmbientLight(scene, {
    color: [0.5, 0.7, 0.5]
 });

 var lights = new xeogl.Lights(scene, {
    lights: [
        light1,
        light2
    ]
 });

 // Geometry without parameters will default to a 2x2x2 box.
 var geometry = new xeogl.Geometry(scene);

 var entity = new xeogl.Entity(scene, {
    lights: lights,
    material: material,
    geometry: geometry
 });
 ````

 @module xeogl
 @submodule materials
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Reflect in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID for this Reflect, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Reflect.
 @param [cfg.src=null] {String} Path to image file to load into this Reflect. See the {{#crossLink "Reflect/src:property"}}{{/crossLink}} property for more info.
 @param [cfg.image=null] {HTMLImageElement} HTML Image object to load into this Reflect. See the {{#crossLink "Reflect/image:property"}}{{/crossLink}} property for more info.
 @param [cfg.target=null] {String | xeogl.ColorTarget | xeogl.DepthTarget} Instance or ID of a {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} or
 {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} to source this Reflect from. See the {{#crossLink "Reflect/target:property"}}{{/crossLink}} property for more info.
 @param [cfg.minFilter="linearMipmapLinear"] {String} How the reflect is sampled when a texel covers less than one pixel. See the {{#crossLink "Reflect/minFilter:property"}}{{/crossLink}} property for more info.
 @param [cfg.magFilter="linear"] {String} How the reflect is sampled when a texel covers more than one pixel. See the {{#crossLink "Reflect/magFilter:property"}}{{/crossLink}} property for more info.
 @param [cfg.wrapS="repeat"] {String} Wrap parameter for reflect coordinate *S*. See the {{#crossLink "Reflect/wrapS:property"}}{{/crossLink}} property for more info.
 @param [cfg.wrapT="repeat"] {String} Wrap parameter for reflect coordinate *S*. See the {{#crossLink "Reflect/wrapT:property"}}{{/crossLink}} property for more info.
 @param [cfg.translate=[0,0]] {Array of Number} 2D translation vector that will be added to reflect's *S* and *T* coordinates.
 @param [cfg.scale=[1,1]] {Array of Number} 2D scaling vector that will be applied to reflect's *S* and *T* coordinates.
 @param [cfg.rotate=0] {Number} Rotation, in degrees, that will be applied to reflect's *S* and *T* coordinates.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Reflect = xeogl.Component.extend({

        type: "xeogl.Reflect",

        _init: function (cfg) {

            // Rendering state

            this._state = new xeogl.renderer.Reflect({
                texture: null
            });

            this._src = [];
            this._images = []; // HTMLImageElement

            // Dirty flags, processed in _buildReflect()

            this._srcDirty = false;
            this._imageDirty = false;

            // Handle WebGL context restore

            this._webglContextRestored = this.scene.canvas.on("webglContextRestored", this._webglContextRestored, this);

            this.src = cfg.src;

            xeogl.stats.memory.textures++;
        },

        _webglContextRestored: function () {

            this._state.reflect = null;

            if (this._images) {
                this._imageDirty = true;

            } else if (this._src) {
                this._srcDirty = true;

            }

            this._scheduleUpdate();
        },

        _update: function () {

         //   var gl = this.scene.canvas.gl;

            var state = this._state;

            if (this._srcDirty) {

                if (this._src) {

                    this._loadSrc(this._src);

                    this._srcDirty = false;

                    // _imageDirty is set when the imagea have loaded

                    return;
                }
            }

            if (this._imageDirty) {

                if (this._images) {

                    state.reflect.setImage(this._image);

                    this._imageDirty = false;
                    this._propsDirty = true; // May now need to regenerate mipmaps etc
                }
            }

            this._renderer.imageDirty = true;
        },


        _loadSrc: function (src) {

            var self = this;

            var image = new Image();

            image.onload = function () {

                if (self._src === src) {

                    // Ensure data source was not changed while we were loading

                    // Keep self._src because that's where we loaded the image
                    // from, and we may need to save that in JSON later

                    self._image = xeogl.renderer.webgl.ensureImageSizePowerOfTwo(image);

                    self._imageDirty = true;
                    self._srcDirty = false;
                    self._targetDirty = false;

                    self._scheduleUpdate();

                    /**
                     * Fired whenever this Reflect's  {{#crossLink "Reflect/image:property"}}{{/crossLink}} property changes.
                     * @event image
                     * @param value {HTML Image} The property's new value
                     */
                    self.fire("image", self._image);

                    /**
                     * Fired whenever this Reflect has loaded the
                     * image file that its {{#crossLink "Reflect/src:property"}}{{/crossLink}} property currently points to.
                     * @event loaded
                     * @param value {HTML Image} The value of the {{#crossLink "Reflect/src:property"}}{{/crossLink}} property
                     */
                    self.fire("loaded", self._src);
                }

//                task.setCompleted();
            };

            image.onerror = function () {
                //              task.setFailed();
            };

            if (src.indexOf("data") === 0) {

                // Image data
                image.src = src;

            } else {

                // Image file
                image.crossOrigin = "Anonymous";
                image.src = src;
            }
        },

        _props: {

            /**
             * Indicates a path to an image file to source this Reflect from.
             *
             * Alternatively, you could indicate the source via either of properties
             * {{#crossLink "Reflect/image:property"}}{{/crossLink}} or {{#crossLink "Reflect/target:property"}}{{/crossLink}}.
             *
             * Fires a {{#crossLink "Reflect/src:event"}}{{/crossLink}} event on change.
             *
             * Sets the {{#crossLink "Reflect/image:property"}}{{/crossLink}} and
             * {{#crossLink "Reflect/target:property"}}{{/crossLink}} properties to null.
             *
             * @property src
             * @default null
             * @type String
             */
            src: {

                set: function (value) {

                    this._image = null;
                    this._src = value;

                    this._imageDirty = false;
                    this._srcDirty = true;
                    this._targetDirty = false;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Reflect's {{#crossLink "Reflect/src:property"}}{{/crossLink}} property changes.
                     * @event src
                     * @param value The property's new value
                     * @type String
                     */
                    this.fire("src", this._src);
                },

                get: function () {
                    return this._src;
                }
            }
        },

        _getJSON: function () {
            return {
                src: this._src.slice(0)
            };
        },

        _destroy: function () {

            this.scene.canvas.off(this._webglContextRestored);

            if (this._state.texture) {
                this._state.texture.destroy();
            }

            xeogl.stats.memory.textures--;
        }
    });

})();
;/**
 * Entities.
 *
 * @module xeogl
 * @submodule entities
 */;/**
 An **Entity** is an object within a xeogl {{#crossLink "Scene"}}Scene{{/crossLink}}.

 ## Overview

 See the {{#crossLink "Scene"}}Scene{{/crossLink}} class documentation for more information on Entities.

 <img src="../../../assets/images/Entity.png"></img>

 ## Examples

 * [Minimal Entity example](../../examples/#entities_minimal)

 ## Boundaries

 #### Local-space

 A Entity provides its Local-space boundary as a {{#crossLink "Boundary3D"}}{{/crossLink}} that encloses
 the {{#crossLink "Geometry"}}{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}}.

 ```` javascript
 var scene = new xeogl.Scene();

 var geometry = new xeogl.Geometry(myScene, {
      //...
 });

 var entity = new xeogl.Entity(myScene, {
       geometry: myGeometry,
       transform: translate
 });

 // Get the Local-space Boundary3D
 var localBoundary = entity.localBoundary;

 // Get Local-space entity-aligned bounding box (OBB),
 // which is an array of eight vertices that describes
 // the box that is aligned with the Entity's Geometry
 var obb = localBoundary.obb;

 // Get the Local-space axis-aligned bounding box (ABB),
 // which contains the extents of the boundary on each axis
 var aabb = localBoundary.aabb;

 // get the Local-space center of the Entity:
 var center = localBoundary.center;
 ````

 #### World-space

 A Entity provides its World-space boundary as a {{#crossLink "Boundary3D"}}{{/crossLink}} that encloses
 the {{#crossLink "Geometry"}}{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}} after
 transformation by the Entity's {{#crossLink "Entity/transform:property"}}Modelling transform{{/crossLink}}.

 ```` javascript
 var scene = new xeogl.Scene();

 var geometry = new xeogl.Geometry(myScene, {
      //...
 });

 var translate = new xeogl.Translate(scene, {
    xyz: [-5, 0, 0] // Translate along -X axis
 });

 var entity = new xeogl.Entity(myScene, {
       geometry: myGeometry,
       transform: translate
 });

 // Get the World-space Boundary3D
 var worldBoundary = entity.worldBoundary;

 // Get World-space entity-aligned bounding box (OBB),
 // which is an array of eight vertices that describes
 // the box that is aligned with the Entity
 var obb = worldBoundary.obb;

 // Get the World-space axis-aligned bounding box (ABB),
 // which contains the extents of the boundary on each axis
 var aabb = worldBoundary.aabb;

 // get the World-space center of the Entity:
 var center = worldBoundary.center;
 ````

 #### View-space

 A Entity also provides its View-space boundary as a {{#crossLink "Boundary3D"}}{{/crossLink}} that encloses
 the {{#crossLink "Geometry/positions:property"}}Geometry positions{{/crossLink}} after
 their transformation by the {{#crossLink "Camera/view:property"}}View{{/crossLink}} and
 {{#crossLink "Entity/transform:property"}}Modelling{{/crossLink}} transforms.

 ```` javascript
 // Get the View-space Boundary3D
 var viewBoundary = entity.viewBoundary;

 // Get View-space entity-aligned bounding box (OBB),
 // which is an array of eight vertices that describes
 // the box that is aligned with the Entity
 var obb = viewBoundary.obb;

 // Get the View-space axis-aligned bounding box (ABB),
 // which contains the extents of the boundary on each axis
 var aabb = viewBoundary.aabb;

 // get the View-space center of the Entity:
 var center = viewBoundary.center;
 ````

 #### View-space

 A Entity also provides its Canvas-space boundary as a {{#crossLink "Boundary2D"}}{{/crossLink}} that encloses
 the {{#crossLink "Geometry/positions:property"}}Geometry positions{{/crossLink}} after
 their transformation by the {{#crossLink "Entity/transform:property"}}Modelling{{/crossLink}},
 {{#crossLink "Camera/view:property"}}View{{/crossLink}} and {{#crossLink "Camera/project:property"}}Projection{{/crossLink}} transforms.

 ```` javascript
 // Get the Canvas-space Boundary2D
 var canvasBoundary = entity.canvasBoundary;

 // Get the Canvas-space axis-aligned bounding box (ABB),
 // which contains the extents of the boundary on each axis
 var aabb = canvasBoundary.aabb;

 // get the Canvas-space center of the Entity:
 var center = canvasBoundary.center;
 ````

 @class Entity
 @module xeogl
 @submodule entities
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Entity within xeogl's default {{#crossLink "xeogl/scene:property"}}scene{{/crossLink}} by default.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Entity.
 @param [cfg.camera] {String|Camera} ID or instance of a {{#crossLink "Camera"}}Camera{{/crossLink}} to attach to this Entity.  Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/camera:property"}}camera{{/crossLink}}.
 @param [cfg.clips] {String|Clips} ID or instance of a {{#crossLink "Clips"}}Clips{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/clips:property"}}clips{{/crossLink}}.
 @param [cfg.depthBuf] {String|DepthBuf} ID or instance of a {{#crossLink "DepthBuf"}}DepthBuf{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, depth {{#crossLink "Scene/depthBuf:property"}}depthBuf{{/crossLink}}.
 @param [cfg.visibility] {String|Visibility} ID or instance of a {{#crossLink "Visibility"}}Visibility{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/visibility:property"}}visibility{{/crossLink}}.
 @param [cfg.cull] {String|Cull} ID or instance of a {{#crossLink "Cull"}}{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}{{/crossLink}}'s default instance, {{#crossLink "Scene/cull:property"}}cull{{/crossLink}}.
 @param [cfg.modes] {String|Modes} ID or instance of a {{#crossLink "Modes"}}Modes{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/modes:property"}}modes{{/crossLink}}.
 @param [cfg.geometry] {String|Geometry} ID or instance of a {{#crossLink "Geometry"}}Geometry{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/geometry:property"}}geometry{{/crossLink}}, which is a 2x2x2 box.
 @param [cfg.layer] {String|Layer} ID or instance of a {{#crossLink "Layer"}}Layer{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/layer:property"}}layer{{/crossLink}}.
 @param [cfg.lights] {String|Lights} ID or instance of a {{#crossLink "Lights"}}Lights{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/lights:property"}}lights{{/crossLink}}.
 @param [cfg.material] {String|Material} ID or instance of a {{#crossLink "Material"}}Material{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
 parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance, {{#crossLink "Scene/material:property"}}material{{/crossLink}}.
 @param [cfg.morphTargets] {String|MorphTargets} ID or instance of a {{#crossLink "MorphTargets"}}MorphTargets{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s
 default instance, {{#crossLink "Scene/morphTargets:property"}}morphTargets{{/crossLink}}.
 @param [cfg.reflect] {String|Reflect} ID or instance of a {{#crossLink "CubeMap"}}CubeMap{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance,
 {{#crossLink "Scene/reflect:property"}}reflection{{/crossLink}}.
 @param [cfg.stage] {String|Stage} ID or instance of of a {{#crossLink "Stage"}}Stage{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance,
 {{#crossLink "Scene/stage:property"}}stage{{/crossLink}}.
 @param [cfg.transform] {String|Transform} ID or instance of a modelling transform to attach to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance,
 {{#crossLink "Scene/transform:property"}}transform{{/crossLink}} (which is an identity matrix which performs no transformation).
 @param [cfg.viewport] {String|Viewport} ID or instance of a {{#crossLink "Viewport"}}{{/crossLink}} attached to this Entity. Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default instance,
 {{#crossLink "Scene/viewport:property"}}{{/crossLink}}, which is automatically resizes to the canvas.
 @param [cfg.loading] {Boolean} Flag which indicates that this Entity is freshly loaded. This will increment the
 {{#crossLink "Spinner/processes:property"}}Spinner processes{{/crossLink}} count, and then when this Entity is first
 rendered, will decrement the count again.
 @extends Component
 */

/**
 * Fired when this Entity is *picked* via a call to the {{#crossLink "Canvas/pick:method"}}{{/crossLink}} method
 * on the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s {{#crossLink "Canvas"}}Canvas {{/crossLink}}.
 * @event picked
 * @param {String} entityId The ID of this Entity.
 * @param {Number} canvasX The X-axis Canvas coordinate that was picked.
 * @param {Number} canvasY The Y-axis Canvas coordinate that was picked.
 */
(function () {

    "use strict";

    xeogl.Entity = xeogl.Component.extend({

        type: "xeogl.Entity",

        _init: function (cfg) {

            this._loading = cfg.loading;

            if (this._loading === true) {
                this.scene.canvas.spinner.processes++;
            }

            this.camera = cfg.camera;
            this.clips = cfg.clips;
            this.colorTarget = cfg.colorTarget;
            this.colorBuf = cfg.colorBuf;
            this.depthTarget = cfg.depthTarget;
            this.depthBuf = cfg.depthBuf;
            this.visibility = cfg.visibility;
            this.cull = cfg.cull;
            this.modes = cfg.modes;
            this.geometry = cfg.geometry;
            this.layer = cfg.layer;
            this.lights = cfg.lights;
            this.material = cfg.material;
            this.morphTargets = cfg.morphTargets;
            this.reflect = cfg.reflect;
            this.shader = cfg.shader;
            this.shaderParams = cfg.shaderParams;
            this.stage = cfg.stage;
            this.transform = cfg.transform;
            this.billboard = cfg.billboard;
            this.stationary = cfg.stationary;
            this.viewport = cfg.viewport;

            // Cached boundary for each coordinate space
            // The Entity's Geometry component caches the Local-space boundary

            this._worldBoundary = null;
            this._viewBoundary = null;
            this._canvasBoundary = null;

            this._worldBoundaryDirty = true;
            this._viewBoundaryDirty = true;
            this._canvasBoundaryDirty = true;
        },

        _props: {

            /**
             * The {{#crossLink "Camera"}}Camera{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/camera:property"}}camera{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/camera:event"}}{{/crossLink}} event on change.
             *
             * @property camera
             * @type Camera
             */
            camera: {

                set: function (value) {

                    // Invalidate cached World-space bounding boxes

                    this._setViewBoundaryDirty();

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/camera:property"}}{{/crossLink}} property changes.
                     *
                     * @event camera
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "camera",
                        type: "xeogl.Camera",
                        component: value,
                        sceneDefault: true,
                        on: {
                            viewMatrix: {
                                callback: this._setViewBoundaryDirty,
                                scope: this
                            },
                            projMatrix: {
                                callback: this._setCanvasBoundaryDirty,
                                scope: this
                            }
                        }
                    });
                },

                get: function () {
                    return this._attached.camera;
                }
            },

            /**
             * The {{#crossLink "Clips"}}Clips{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/clips:property"}}clips{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/clips:event"}}{{/crossLink}} event on change.
             *
             * @property clips
             * @type Clips
             */
            clips: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/clips:property"}}{{/crossLink}} property changes.
                     * @event clips
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "clips",
                        type: "xeogl.Clips",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.clips;
                }
            },

            /**
             * The {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/colorTarget:property"}}colorTarget{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/colorTarget:event"}}{{/crossLink}} event on change.
             *
             * @property colorTarget
             * @private
             * @type ColorTarget
             */
            colorTarget: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/colorTarget:property"}}{{/crossLink}} property changes.
                     * @event colorTarget
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "colorTarget",
                        type: "xeogl.ColorTarget",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.colorTarget;
                }
            },

            /**
             * The {{#crossLink "ColorBuf"}}ColorBuf{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/colorBuf:property"}}colorBuf{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/colorBuf:event"}}{{/crossLink}} event on change.
             *
             * @property colorBuf
             * @type ColorBuf
             */
            colorBuf: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/colorBuf:property"}}{{/crossLink}} property changes.
                     *
                     * @event colorBuf
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "colorBuf",
                        type: "xeogl.ColorBuf",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.colorBuf;
                }
            },

            /**
             * The {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/depthTarget:property"}}depthTarget{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/depthTarget:event"}}{{/crossLink}} event on change.
             *
             * @property depthTarget
             * @private
             * @type DepthTarget
             */
            depthTarget: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/depthTarget:property"}}{{/crossLink}} property changes.
                     *
                     * @event depthTarget
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "depthTarget",
                        type: "xeogl.DepthTarget",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.depthTarget;
                }
            },

            /**
             * The {{#crossLink "DepthBuf"}}DepthBuf{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the
             * parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/depthBuf:property"}}depthBuf{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/depthBuf:event"}}{{/crossLink}} event on change.
             *
             * @property depthBuf
             * @type DepthBuf
             */
            depthBuf: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/depthBuf:property"}}{{/crossLink}} property changes.
                     *
                     * @event depthBuf
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "depthBuf",
                        type: "xeogl.DepthBuf",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.depthBuf;
                }
            },

            /**
             * The {{#crossLink "Visibility"}}Visibility{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/visibility:property"}}visibility{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/visibility:event"}}{{/crossLink}} event on change.
             *
             * @property visibility
             * @type Visibility
             */
            visibility: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/visibility:property"}}{{/crossLink}} property changes.
                     *
                     * @event visibility
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "visibility",
                        type: "xeogl.Visibility",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.visibility;
                }
            },

            /**
             * The {{#crossLink "Cull"}}{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/cull:property"}}cull{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/cull:event"}}{{/crossLink}} event on change.
             *
             * @property cull
             * @type Cull
             */
            cull: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/cull:property"}}{{/crossLink}} property changes.
                     *
                     * @event cull
                     * @param value The property's new value
                     */

                    this._attach({
                        name: "cull",
                        type: "xeogl.Cull",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.cull;
                }
            },

            /**
             * The {{#crossLink "Modes"}}Modes{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/modes:property"}}modes{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/modes:event"}}{{/crossLink}} event on change.
             *
             * @property modes
             * @type Modes
             */
            modes: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's {{#crossLink "Entity/modes:property"}}{{/crossLink}} property changes.
                     *
                     * @event modes
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "modes",
                        type: "xeogl.Modes",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.modes;
                }
            },

            /**
             * The {{#crossLink "Geometry"}}Geometry{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/geometry:property"}}camera{{/crossLink}}
             * (a simple box) when set to a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/geometry:event"}}{{/crossLink}} event on change.
             *
             * Updates {{#crossLink "Entity/boundary"}}{{/crossLink}},
             * {{#crossLink "Entity/worldObb"}}{{/crossLink}} and
             * {{#crossLink "Entity/center"}}{{/crossLink}}
             *
             * @property geometry
             * @type Geometry
             */
            geometry: {

                set: function (value) {

                    // Invalidate cached World-space bounding boxes

                    this._setWorldBoundaryDirty();

                    /**
                     * Fired whenever this Entity's {{#crossLink "Entity/geometry:property"}}{{/crossLink}} property changes.
                     *
                     * @event modes
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "geometry",
                        type: "xeogl.Geometry",
                        component: value,
                        sceneDefault: true,
                        on: {
                            positions: {
                                callback: this._setWorldBoundaryDirty,
                                scope: this
                            },
                            destroyed: {
                                callback: this._setWorldBoundaryDirty,
                                scope: this
                            }
                        }
                    });
                },

                get: function () {
                    return this._attached.geometry;
                }
            },

            /**
             * The {{#crossLink "Layer"}}Layer{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/layer:property"}}layer{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/layer:event"}}{{/crossLink}} event on change.
             *
             * @property layer
             * @type Layer
             */
            layer: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/layer:property"}}{{/crossLink}} property changes.
                     *
                     * @event layer
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "layer",
                        type: "xeogl.Layer",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.layer;
                }
            },

            /**
             * The {{#crossLink "Lights"}}Lights{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/lights:property"}}lights{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/lights:event"}}{{/crossLink}} event on change.
             *
             * @property lights
             * @type Lights
             */
            lights: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/lights:property"}}{{/crossLink}} property changes.
                     *
                     * @event lights
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "lights",
                        type: "xeogl.Lights",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.lights;
                }
            },

            /**
             * The {{#crossLink "Material"}}Material{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/material:property"}}material{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/material:event"}}{{/crossLink}} event on change.
             *
             * @property material
             * @type Material
             */
            material: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/material:property"}}{{/crossLink}} property changes.
                     *
                     * @event material
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "material",
                        type: "xeogl.Material",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.material;
                }
            },

            /**
             * The {{#crossLink "MorphTargets"}}MorphTargets{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/morphTargets:property"}}morphTargets{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/morphTargets:event"}}{{/crossLink}} event on change.
             *
             * @property morphTargets
             * @private
             * @type MorphTargets
             */
            morphTargets: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/morphTargets:property"}}{{/crossLink}} property changes.
                     * @event morphTargets
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "morphTargets",
                        type: "xeogl.MorphTargets",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.morphTargets;
                }
            },

            /**
             * The {{#crossLink "Reflect"}}Reflect{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/reflect:property"}}reflect{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/reflect:event"}}{{/crossLink}} event on change.
             *
             * @property reflect
             * @type Reflect
             */
            reflect: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/reflect:property"}}{{/crossLink}} property changes.
                     *
                     * @event reflect
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "reflect",
                        type: "xeogl.Reflect",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.reflect;
                }
            },

            /**
             * The {{#crossLink "Shader"}}Shader{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/shader:property"}}shader{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/shader:event"}}{{/crossLink}} event on change.
             *
             * @property shader
             * @private
             * @type Shader
             */
            shader: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/shader:property"}}{{/crossLink}} property changes.
                     * @event shader
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "shader",
                        type: "xeogl.Shader",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.shader;
                }
            },

            /**
             * The {{#crossLink "ShaderParams"}}ShaderParams{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/shaderParams:property"}}shaderParams{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/shaderParams:event"}}{{/crossLink}} event on change.
             *
             * @property shaderParams
             * @private
             * @type ShaderParams
             */
            shaderParams: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/shaderParams:property"}}{{/crossLink}} property changes.
                     *
                     * @event shaderParams
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "shaderParams",
                        type: "xeogl.ShaderParams",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.shaderParams;
                }
            },

            /**
             * The {{#crossLink "Stage"}}Stage{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/stage:property"}}stage{{/crossLink}} when set to
             * a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/stage:event"}}{{/crossLink}} event on change.
             *
             * @property stage
             * @type Stage
             */
            stage: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's  {{#crossLink "Entity/stage:property"}}{{/crossLink}} property changes.
                     *
                     * @event stage
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "stage",
                        type: "xeogl.Stage",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.stage;
                }
            },

            /**
             * The Local-to-World-space (modelling) {{#crossLink "Transform"}}{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/transform:property"}}transform{{/crossLink}}
             * (an identity matrix) when set to a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/transform:event"}}{{/crossLink}} event on change.
             *
             * Updates {{#crossLink "Entity/boundary"}}{{/crossLink}},
             * {{#crossLink "Entity/worldObb"}}{{/crossLink}} and
             * {{#crossLink "Entity/center"}}{{/crossLink}}
             *
             * @property transform
             * @type Transform
             */
            transform: {

                set: function (value) {

                    // Invalidate cached World-space bounding boxes

                    this._setWorldBoundaryDirty();

                    /**
                     * Fired whenever this Entity's {{#crossLink "Entity/transform:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event transform
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "transform",
                        type: "xeogl.Transform",
                        component: value,
                        sceneDefault: true,
                        on: {
                            updated: {

                                callback: function () {

                                    if (this._transformDirty) {
                                        return;
                                    }

                                    this._transformDirty = true;

                                    xeogl.scheduleTask(this._transformUpdated, this);
                                },
                                scope: this
                            },

                            destroyed: {
                                callback: this._setWorldBoundaryDirty,
                                scope: this
                            }
                        }
                    });
                },

                get: function () {
                    return this._attached.transform;
                }
            },

            /**
             * The {{#crossLink "Billboard"}}{{/crossLink}} attached to this Entity.
             *
             * When {{#crossLink "Billboard/property:active"}}{{/crossLink}}, the {{#crossLink "Billboard"}}{{/crossLink}}
             * will keep this Entity oriented towards the viewpoint.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/billboard:property"}}billboard{{/crossLink}}
             * (an identity matrix) when set to a null or undefined value.
             *
             * Fires an {{#crossLink "Entity/billboard:event"}}{{/crossLink}} event on change.
             *
             * @property billboard
             * @type Billboard
             */
            billboard: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's {{#crossLink "Entity/billboard:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event billboard
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "billboard",
                        type: "xeogl.Billboard",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.billboard;
                }
            },

            /**
             * The {{#crossLink "Viewport"}}{{/crossLink}} attached to this Entity.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. When set to a null or undefined value,
             * defaults to the parent {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/viewport:property"}}viewport{{/crossLink}},
             * which automatically resizes to the canvas.
             *
             * Fires an {{#crossLink "Entity/viewport:event"}}{{/crossLink}} event on change.
             *
             * @property viewport
             * @type Viewport
             */
            viewport: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's {{#crossLink "Entity/viewport:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event viewport
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "viewport",
                        type: "xeogl.Viewport",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.viewport;
                }
            },

            /**
             * The {{#crossLink "Stationary"}}{{/crossLink}} attached to this Entity.
             *
             * When {{#crossLink "Stationary/property:active"}}{{/crossLink}}, the {{#crossLink "Stationary"}}{{/crossLink}}
             * will prevent the translation component of the viewing transform from being applied to this Entity, yet
             * still allowing it to rotate.
             *
             * Must be within the same {{#crossLink "Scene"}}Scene{{/crossLink}} as this Entity. Defaults to the parent
             * {{#crossLink "Scene"}}Scene{{/crossLink}}'s default {{#crossLink "Scene/stationary:property"}}stationary{{/crossLink}},
             * which is disabled by default.
             *
             * Fires an {{#crossLink "Entity/stationary:event"}}{{/crossLink}} event on change.
             *
             * @property stationary
             * @type Stationary
             */
            stationary: {

                set: function (value) {

                    /**
                     * Fired whenever this Entity's {{#crossLink "Entity/stationary:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event stationary
                     * @param value The property's new value
                     */
                    this._attach({
                        name: "stationary",
                        type: "xeogl.Stationary",
                        component: value,
                        sceneDefault: true
                    });
                },

                get: function () {
                    return this._attached.stationary;
                }
            },

            /**
             * Local-space 3D boundary of this Entity.
             *
             * This is a {{#crossLink "Boundary3D"}}{{/crossLink}} that encloses
             * the {{#crossLink "Geometry"}}{{/crossLink}} that is attached to this Entity.
             *
             * The {{#crossLink "Boundary3D"}}{{/crossLink}} will fire an {{#crossLink "Boundary3D/updated:event"}}{{/crossLink}}
             * event whenever this Entity's {{#crossLink "Entity/geometry:property"}}{{/crossLink}} is linked to
             * a new {{#crossLink "Geometry"}}{{/crossLink}}, or whenever the {{#crossLink "Geometry"}}{{/crossLink}}'s
             * {{#crossLink "Geometry/positions:property"}}{{/crossLink}} are updated.
             *
             * The a {{#crossLink "Boundary3D"}}{{/crossLink}} is lazy-instantiated the first time that this
             * property is referenced. If {{#crossLink "Component/destroy:method"}}{{/crossLink}} is then called on it,
             * then this property will be assigned to a fresh {{#crossLink "Boundary3D"}}{{/crossLink}} instance next
             * time it's referenced.
             *
             * @property localBoundary
             * @type Boundary3D
             * @final
             */
            localBoundary: {

                get: function () {
                    return this._attached.geometry.localBoundary;
                }
            },

            /**
             * World-space 3D boundary of this Entity.
             *
             * This is a {{#crossLink "Boundary3D"}}{{/crossLink}} that encloses the {{#crossLink "Geometry"}}{{/crossLink}}
             * that is attached to this Entity after transformation by this Entity's modelling
             * {{#crossLink "Entity/transform:property"}}{{/crossLink}}.
             *
             * The {{#crossLink "Boundary3D"}}{{/crossLink}} will fire an {{#crossLink "Boundary3D/updated:event"}}{{/crossLink}}
             * event whenever this Entity's {{#crossLink "Entity/geometry:property"}}{{/crossLink}} is linked to
             * a new {{#crossLink "Geometry"}}{{/crossLink}}, or whenever the {{#crossLink "Geometry"}}{{/crossLink}}'s
             * {{#crossLink "Geometry/positions:property"}}{{/crossLink}} are updated.
             *
             * The a {{#crossLink "Boundary3D"}}{{/crossLink}} is lazy-instantiated the first time that this
             * property is referenced. If {{#crossLink "Component/destroy:method"}}{{/crossLink}} is then called on it,
             * then this property will be assigned to a fresh {{#crossLink "Boundary3D"}}{{/crossLink}} instance next
             * time it's referenced.
             *
             * <h4>Example</h4>
             *
             * [here](https://xeogl.org/examples/#boundaries_Entity_worldBoundary)
             *
             * <h4>Performance</h4>
             *
             * To minimize performance overhead, only reference this property if you need it, and destroy
             * the {{#crossLink "Boundary3D"}}{{/crossLink}} as soon as you don't need it anymore.
             *
             * @property worldBoundary
             * @type Boundary3D
             * @final
             */
            worldBoundary: {

                get: function () {

                    if (!this._worldBoundary) {

                        var self = this;

                        // this._setWorldBoundaryDirty();

                        this._worldBoundary = this.create({

                            type:"xeogl.Boundary3D",

                            getDirty: function () {
                                if (self._worldBoundaryDirty) {
                                    self._worldBoundaryDirty = false;
                                    return true;
                                }
                                return false;
                            },

                            // Faster and less precise than getPositions:
                            getOBB: function () {
                                var geometry = self._attached.geometry;
                                if (geometry) {
                                    var boundary = geometry.localBoundary;
                                    return boundary.obb;
                                }
                            },

                            //getPositions: function () {
                            //    return self._attached.geometry.positions;
                            //},

                            getMatrix: function () {

                                var transform = self._attached.transform;

                                if (self._transformDirty) {
                                    transform._buildLeafMatrix();
                                    self._setWorldBoundaryDirty();
                                    self._transformDirty = false;
                                }

                                return transform.leafMatrix;
                            }
                        });

                        this._worldBoundary.on("destroyed",
                            function () {
                                self._worldBoundary = null;
                            });
                    }

                    return this._worldBoundary;
                }
            },

            /**
             * View-space 3D boundary of this Entity.
             *
             * This is a {{#crossLink "Boundary3D"}}{{/crossLink}} that encloses the {{#crossLink "Geometry"}}{{/crossLink}}
             * that is attached to this Entity after transformation by this Entity's modelling
             * {{#crossLink "Entity/transform:property"}}{{/crossLink}} and {{#crossLink "Camera"}}{{/crossLink}}
             * {{#crossLink "Camera/view:property"}}view transform{{/crossLink}}.
             *
             * The {{#crossLink "Boundary3D"}}{{/crossLink}} will fire an {{#crossLink "Boundary3D/updated:event"}}{{/crossLink}}
             * event whenever there are any changes to the {{#crossLink "Geometry"}}{{/crossLink}},
             * {{#crossLink "Entity/transform:property"}}{{/crossLink}} or {{#crossLink "Camera"}}{{/crossLink}} that
             * would affect its extents.
             *
             * The a {{#crossLink "Boundary3D"}}{{/crossLink}} is lazy-instantiated the first time that this
             * property is referenced. If {{#crossLink "Component/destroy:method"}}{{/crossLink}} is then called on it,
             * then this property will be assigned to a fresh {{#crossLink "Boundary3D"}}{{/crossLink}} instance next
             * time it's referenced.
             *
             * <h4>Performance</h4>
             *
             * To minimize performance overhead, only reference this property if you need it, and destroy
             * the {{#crossLink "Boundary3D"}}{{/crossLink}} as soon as you don't need it anymore.
             *
             * @property viewBoundary
             * @type Boundary3D
             * @final
             */
            viewBoundary: {

                get: function () {

                    if (!this._viewBoundary) {

                        var self = this;

                        //     this._setViewBoundaryDirty();

                        this._viewBoundary = this.create({

                            type:"xeogl.Boundary3D",

                            getDirty: function () {
                                if (self._viewBoundaryDirty) {
                                    self._viewBoundaryDirty = false;
                                    return true;
                                }
                                return false;
                            },

                            getOBB: function () {
                                return self.worldBoundary.obb;
                            },

                            getMatrix: function () {
                                return self._attached.camera.view.matrix;
                            }
                        });

                        this._viewBoundary.on("destroyed",
                            function () {
                                self._viewBoundary = null;
                            });
                    }

                    return this._viewBoundary;
                }
            },

            /**
             * Canvas-space 2D boundary.
             *
             * This is a {{#crossLink "Boundary2D"}}{{/crossLink}} that encloses this Entity's
             * {{#crossLink "Entity/geometry:property"}}{{/crossLink}} after transformation by this Entity's modelling
             * {{#crossLink "Entity/transform:property"}}{{/crossLink}} and {{#crossLink "Camera"}}{{/crossLink}}
             * {{#crossLink "Camera/view:property"}}view{{/crossLink}} and
             * {{#crossLink "Camera/project:property"}}projection{{/crossLink}} transforms.
             *
             * The {{#crossLink "Boundary2D"}}{{/crossLink}} will fire an {{#crossLink "Boundary3D/updated:event"}}{{/crossLink}}
             * event whenever there are any changes to the {{#crossLink "Geometry"}}{{/crossLink}},
             * {{#crossLink "Entity/transform:property"}}{{/crossLink}} or {{#crossLink "Camera"}}{{/crossLink}} that
             * would affect its extents.
             *
             * The a {{#crossLink "Boundary2D"}}{{/crossLink}} is lazy-instantiated the first time that this
             * property is referenced. If {{#crossLink "Component/destroy:method"}}{{/crossLink}} is then called on it,
             * then this property will be assigned to a fresh {{#crossLink "Boundary2D"}}{{/crossLink}} instance next
             * time it's referenced.
             *
             * <h4>Performance</h4>
             *
             * To minimize performance overhead, only reference this property if you need it, and destroy
             * the {{#crossLink "Boundary2D"}}{{/crossLink}} as soon as you don't need it anymore.
             *
             * @property canvasBoundary
             * @type Boundary2D
             * @final
             */
            canvasBoundary: {

                get: function () {

                    if (!this._canvasBoundary) {

                        var self = this;

                        //   this._setCanvasBoundaryDirty();

                        this._canvasBoundary = this.create({

                            type:"xeogl.Boundary2D",

                            getDirty: function () {
                                if (self._canvasBoundaryDirty) {
                                    self._canvasBoundaryDirty = false;
                                    return true;
                                }
                                return false;
                            },

                            getOBB: function () {
                                return self.viewBoundary.obb;
                            },

                            getMatrix: function () {
                                return self._attached.camera.project.matrix;
                            }
                        });

                        this._canvasBoundary.on("destroyed",
                            function () {
                                self._canvasBoundary = null;
                            });
                    }

                    return this._canvasBoundary;
                }
            },

            /**
             * JSON object containing the (GLSL) source code of the shaders for this Entity.
             *
             * This is sometimes useful to have as a reference
             * when constructing your own custom {{#crossLink "Shader"}}{{/crossLink}} components.
             *
             * Will return null if xeogl has not yet rendered this Entity.
             *
             * @property glsl
             * @type JSON
             * @final
             */
            glsl: {

                get: function () {
                    var rendererObject = this._renderer.objects[this.id];
                    if (!rendererObject) {
                        return null;
                    }
                    var source = rendererObject.program.program.source;
                    return {
                        draw: {
                            vertex: source.vertexDraw,
                            fragment: source.fragmentDraw
                        },
                        pickObject: {
                            vertex: source.vertexPickObject,
                            fragment: source.fragmentPickObject
                        },
                        pickPrimitive: {
                            vertex: source.vertexPickPrimitive,
                            fragment: source.fragmentPickPrimitive
                        }
                    };
                }
            },

            /**
             * The (GLSL) source code of the shaders for this Entity, as a string.
             *
             * This is sometimes useful to have as a reference
             * when constructing your own custom {{#crossLink "Shader"}}{{/crossLink}} components.
             *
             * Will return null if xeogl has not yet rendered this Entity.
             *
             * @property glslString
             * @type String
             * @final
             */
            glslString: {

                get: function () {
                    var glsl = this.glsl;
                    if (glsl) {
                        return JSON.stringify(glsl, "\n", 4);
                    }
                }
            }
        },

        // Callbacks as members, to avoid GC churn

        _transformUpdated: function () {
            if (!this._transformDirty) {
                return;
            }
            this._attached.transform._buildLeafMatrix();
            this._setWorldBoundaryDirty();
            this._transformDirty = false;
        },


        _setWorldBoundaryDirty: function () {
            this._worldBoundaryDirty = true;
            if (this._worldBoundary) {
                this._worldBoundary.fire("updated", true);
            }
            this._setViewBoundaryDirty();
        },

        _setViewBoundaryDirty: function () {
            this._viewBoundaryDirty = true;
            if (this._viewBoundary) {
                this._viewBoundary.fire("updated", true);
            }
            this._setCanvasBoundaryDirty();
        },

        _setCanvasBoundaryDirty: function () {
            this._canvasBoundaryDirty = true;
            if (this._canvasBoundary) {
                this._canvasBoundary.fire("updated", true);
            }
        },

        // Returns true if there is enough on this Entity to render something.
        _valid: function () {
            var geometry = this._attached.geometry;
            return !this.destroyed && geometry && geometry.positions && geometry.indices;

        },

        _compile: function () {

            var self = this;

            if (!this._compiling) {

                self._compiling = true;

                var object = this._renderer.objects[this.id];

                if (object) {
                    object.compiled = false;
                }

                var task = function () {

                    if (!self._valid()) {
                        xeogl.scheduleTask(task);
                        return;
                    }

                    self.__compile();

                    self._compiling = false;
                };

                xeogl.scheduleTask(task);
            }
        },

        __compile: function () {

            var attached = this._attached;

            attached.camera._compile();
            attached.clips._compile();
            attached.colorTarget._compile();
            attached.colorBuf._compile();
            attached.depthTarget._compile();
            attached.depthBuf._compile();
            attached.visibility._compile();
            attached.cull._compile();
            attached.modes._compile();
            attached.geometry._compile();
            attached.layer._compile();
            attached.lights._compile();
            attached.material._compile();
            attached.reflect._compile();
            attached.shader._compile();
            attached.shaderParams._compile();
            attached.stage._compile();
            this._renderer.modelTransform = attached.transform._state;
            attached.billboard._compile();
            attached.stationary._compile();
            attached.viewport._compile();

            // (Re)build this Entity in the renderer; for each Entity in teh scene graph,
            // there is an "object" in the renderer, that has the same ID as the entity

            var objectId = this.id;

            var result = this._renderer.buildObject(objectId);

            if (this._loading) {

                // This Entity was flagged as freshly loaded, which incremented the xeogl.Spinner#processes
                // count on the Scene Canvas, causing a spinner to appear. Unflag and decrement the
                // count now that we have compiled it into the render graph. Spinner will disappear
                // when the count has returned to zero.

                this.scene.canvas.spinner.processes--;
                this._loading = false;
            }

            if (result && result.error) {

                // Object has errors, probably due to
                // shader not allocating/compiling/linking.

                this.error(result.errorLog.join("\n"));
            }
        },

        _getJSON: function () {

            var attached = this._attached;

            return {
                camera: attached.camera.id,
                clips: attached.clips.id,
                colorTarget: attached.colorTarget.id,
                colorBuf: attached.colorBuf.id,
                depthTarget: attached.depthTarget.id,
                depthBuf: attached.depthBuf.id,
                visibility: attached.visibility.id,
                cull: attached.cull.id,
                modes: attached.modes.id,
                geometry: attached.geometry.id,
                layer: attached.layer.id,
                lights: attached.lights.id,
                material: attached.material.id,
                reflect: attached.reflect.id,
                shader: attached.shader.id,
                shaderParams: attached.shaderParams.id,
                stage: attached.stage.id,
                transform: attached.transform.id,
                billboard: attached.billboard.id,
                stationary: attached.stationary.id,
                viewport: attached.viewport.id
            };
        },

        _destroy: function () {
            this._renderer.removeObject(this.id);
        }
    });

})();
;/**
 * Components that influence the way entities are rendered with WebGL.
 *
 * @module xeogl
 * @submodule rendering
 */;/**
 A **ColorBuf** configures the WebGL color buffer for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 * A ColorBuf configures the way that pixels are written to the WebGL color buffer.
 * ColorBuf is not to be confused with {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}}, which stores rendered pixel
 colors for consumption by {{#crossLink "Texture"}}Textures{{/crossLink}}, used when performing *render-to-texture*.

 <img src="../../../assets/images/ColorBuf.png"></img>

 ## Usage

 This example creates a {{#crossLink "Entity"}}{{/crossLink}} with a ColorBuf
 that sets the WebGL color mask and enables blending:

 ````javascript
 new xeogl.Entity({
     geometry: new xeogl.BoxGeometry(),
     colorBuf: new xeogl.ColorBuf({
         blendEnabled: true,
         colorMask: [true, true, true, true]
     })
 });
 ````

 @class ColorBuf
 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this ColorBuf within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} ColorBuf configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this ColorBuf.
 @param [cfg.blendEnabled=false] {Boolean} Indicates if blending is enabled.
 @param [cfg.colorMask=[true, true, true, true]] {Array of Boolean} The color mask,
 @extends Component
 */
(function () {

    "use strict";

    xeogl.ColorBuf = xeogl.Component.extend({

        type: "xeogl.ColorBuf",

        _init: function (cfg) {

            this._state = new xeogl.renderer.ColorBuf({
                blendEnabled: false,
                colorMask: [true, true, true, true]
            });

            this.blendEnabled = cfg.blendEnabled;
            this.colorMask = cfg.colorMask;
        },

        _props: {

            /**
             * Indicates if blending is enabled for this ColorBuf.
             *
             * Fires a {{#crossLink "ColorBuf/blendEnabled:event"}}{{/crossLink}} event on change.
             *
             * @property blendEnabled
             * @default false
             * @type Boolean
             */
            blendEnabled: {

                set: function (value) {

                    this._state.blendEnabled = value === true;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this ColorBuf's {{#crossLink "ColorBuf/blendEnabled:property"}}{{/crossLink}} property changes.

                     @event blendEnabled
                     @param value {Boolean} The property's new value
                     */
                    this.fire("blendEnabled", this._state.blendEnabled);
                },

                get: function () {
                    return this._state.blendEnabled;
                }
            },

            /**
             * Specifies whether red, green, blue, and alpha can or cannot be written into the frame buffer.
             *
             * Fires a {{#crossLink "ColorBuf/colorMask:event"}}{{/crossLink}} event on change.
             *
             * @property colorMask
             * @default [true, true, true, true]
             * @type {Four element array of Boolean}
             */
            colorMask: {

                set: function (value) {

                    this._state.colorMask = value || [true, true, true, true];

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this ColorBuf's {{#crossLink "ColorBuf/colorMask:property"}}{{/crossLink}} property changes.

                     @event colorMask
                     @param value {Four element array of Boolean} The property's new value
                     */
                    this.fire("colorMask", this._state.colorMask);
                },

                get: function () {
                    return this._state.colorMask;
                }
            }
        },

        _compile: function () {
            this._renderer.colorBuf = this._state;
        },

        _getJSON: function () {
            return {
                blendEnabled: this._state.blendEnabled,
                colorMask: this._state.colorMask
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **DepthBuf** configures the WebGL depth buffer for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 * A DepthBuf configures the way that pixel depths are written to the WebGL depth buffer
 * DepthBuf is not to be confused with {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}}, which stores rendered pixel
 depths for consumption by {{#crossLink "Texture"}}Textures{{/crossLink}}, used when performing *render-to-texture*.

 <img src="../../../assets/images/DepthBuf.png"></img>

 ## Usage

 The example below creates a {{#crossLink "Entity"}}{{/crossLink}} with a DepthBuf
 that uses the "less" depth comparison function and sets pixels depths to 0.5 whenever it's cleared.

 ````javascript
 new xeogl.Entity({
     geometry: new xeogl.BoxGeometry(),
     depthBuf: new xeogl.ColorBuf({
         clearDepth: 0.5,
         depthFunc: "less"
     })
 });
 ````

 @class DepthBuf
 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this DepthBuf
 within the default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} DepthBuf configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this DepthBuf.
 @param [cfg.clearDepth=1.0] {Number} The clear depth.
 @param [cfg.depthFunc="less"] {String} The depth function.
 @param [cfg.active=true] {Boolean} True when this DepthBuf is active.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.DepthBuf = xeogl.Component.extend({

        type: "xeogl.DepthBuf",

        _init: function (cfg) {

            this._state = new xeogl.renderer.DepthBuf({
                clearDepth: null,
                depthFunc: null,
                active: true
            });

            this.clearDepth = cfg.clearDepth;
            this.depthFunc = cfg.depthFunc;
            this.active = cfg.active;
        },

        _props: {

            /**
             * The clear depth for this DepthBuf.
             *
             * Fires a {{#crossLink "DepthBuf/clearDepth:event"}}{{/crossLink}} event on change.
             *
             * @property clearDepth
             * @default 1.0
             * @type Number
             */
            clearDepth: {

                set: function (value) {

                    this._state.clearDepth = value !== undefined ? value : 1.0;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this DepthBuf's {{#crossLink "DepthBuf/clearDepth:property"}}{{/crossLink}} property changes.

                     @event clearDepth
                     @param value {Number} The property's new value
                     */
                    this.fire("clearDepth",  this._state.clearDepth);
                },

                get: function () {
                    return this._state.clearDepth;
                }
            },

            /**
             * The depth function for this DepthBuf.
             *
             * Accepted values are:
             *
             *
             *     * "less"
             *     * "equal"
             *     * "lequal"
             *     * "greater"
             *     * "notequal"
             *     * "gequal"
             *
             *
             * Fires a {{#crossLink "DepthBuf/depthFunc:event"}}{{/crossLink}} event on change.
             *
             * @property depthFunc
             * @default "less"
             * @type Number
             */
            depthFunc: {

                set: function (value) {

                    value = value || "less";

                    var enumName = this._depthFuncNames[value];

                    if (enumName === undefined) {
                        this.error("Unsupported value for 'clearFunc': '" + value +
                            "' - supported values are 'less', 'equal', 'lequal', 'greater', 'notequal' and 'gequal. " +
                            "Defaulting to 'less'.");

                        enumName = "less";
                    }

                    this._state.depthFunc = this.scene.canvas.gl[enumName];
                    this._state.depthFuncName = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this DepthBuf's {{#crossLink "DepthBuf/depthFunc:property"}}{{/crossLink}} property changes.
                     @event depthFunc
                     @param value {String} The property's new value
                     */
                    this.fire("depthFunc", this._state.depthFuncName);
                },

                get: function () {
                    return this._state.depthFuncName;
                }
            },

            /**
             * Flag which indicates whether this DepthBuf is active or not.
             *
             * Fires an {{#crossLink "DepthBuf/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             * @default true
             */
            active: {

                set: function (value) {

                    value = value !== false;

                    if (this._state.active === value) {
                        return;
                    }
                    
                    this._state.active = value;

                    this._renderer.imageDirty = true;
                    
                    /**
                     * Fired whenever this DepthBuf's {{#crossLink "DepthBuf/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._state.active);
                },

                get: function () {
                    return this._state.active;
                }
            }
        },

        /**
         * Lookup GL depth function enums
         * @private
         */
        _depthFuncNames: {
            less: "LESS",
            equal: "EQUAL",
            lequal: "LEQUAL",
            greater: "GREATER",
            notequal: "NOTEQUAL",
            gequal: "GEQUAL"
        },

        _compile: function () {
            this._renderer.depthBuf = this._state;
        },

        _getJSON: function () {
            return {
                clearDepth: this._state.clearDepth,
                depthFunc: this._state.depthFuncName,
                active: this._state.active
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **Layer** sets the rendering order of {{#crossLink "Entity"}}Entities{{/crossLink}} within their {{#crossLink "Stage"}}Stages{{/crossLink}}.

 ## Overview

 * When xeogl renders a {{#crossLink "Scene"}}Scene{{/crossLink}}, each {{#crossLink "Stage"}}Stage{{/crossLink}} within that will render its bin
 of {{#crossLink "Entity"}}Entities{{/crossLink}} in turn, from the lowest priority {{#crossLink "Stage"}}Stage{{/crossLink}} to the highest.
 * {{#crossLink "Stage"}}Stages{{/crossLink}} are typically used for ordering the render-to-texture steps in posteffects pipelines.
 * You can control the render order of the individual {{#crossLink "Entity"}}Entities{{/crossLink}} ***within*** a {{#crossLink "Stage"}}Stage{{/crossLink}}
 by associating them with {{#crossLink "Layer"}}Layers{{/crossLink}}.
 * {{#crossLink "Layer"}}Layers{{/crossLink}} are typically used to <a href="https://www.opengl.org/wiki/Transparency_Sorting" target="_other">transparency-sort</a> the
 {{#crossLink "Entity"}}Entities{{/crossLink}} within {{#crossLink "Stage"}}Stages{{/crossLink}}.
 * {{#crossLink "Entity"}}Entities{{/crossLink}} not explicitly attached to a Layer are implicitly
 attached to the {{#crossLink "Scene"}}Scene{{/crossLink}}'s default
 {{#crossLink "Scene/layer:property"}}layer{{/crossLink}}. which has
 a {{#crossLink "Layer/priority:property"}}{{/crossLink}} value of zero.
 * You can use Layers without defining any {{#crossLink "Stage"}}Stages{{/crossLink}} if you simply let your
 {{#crossLink "Entity"}}Entities{{/crossLink}} fall back on the {{#crossLink "Scene"}}Scene{{/crossLink}}'s default
 {{#crossLink "Scene/stage:property"}}stage{{/crossLink}}. which has a {{#crossLink "Stage/priority:property"}}{{/crossLink}} value of zero.

 <img src="../../../assets/images/Layer.png"></img>

 ## Examples

 * [Z-sorted transparent entities](../../examples/#materials_techniques_transparencySort)
 * [Clouds as billboarded and z-sorted alpha maps](../../examples/#billboards_spherical_clouds)

 ## Usage

 In this example we'll use Layers to perform <a href="https://www.opengl.org/wiki/Transparency_Sorting" target="_other">transparency sorting</a>,
 which ensures that transparent entities are rendered farthest-to-nearest, so that they alpha-blend correctly with each other.

 We want to render the three nested boxes shown below, in which the innermost box is opaque and blue,
 the box enclosing that is transparent and yellow, and the outermost box is transparent and green. We need the boxes to
 render in order innermost-to-outermost, in order to blend transparencies correctly.

 <img src="../../assets/images/transparencySort.jpg"></img>

 Our scene has one {{#crossLink "Stage"}}{{/crossLink}}, just for completeness. As mentioned earlier, you don't have to
 create this because the {{#crossLink "Scene"}}{{/crossLink}} will provide its default {{#crossLink "Stage"}}{{/crossLink}}.
 Then, within that {{#crossLink "Stage"}}{{/crossLink}}, we create an {{#crossLink "Entity"}}{{/crossLink}} for each box,
 each assigned to a different prioritised {{#crossLink "Layer"}}{{/crossLink}} to ensure that they are rendered in the right order.

 ````javascript
 // A Stage, just for completeness
 // We could instead just implicitly default to the Scene's default Stage
 var stage = new xeogl.Stage({
    priority: 0
 });

 // Geometry we'll share among our Entities
 var geometry = new xeogl.BoxGeometry();

 // Innermost box
 // Blue and opaque, in Layer with render order 0, renders first

 var entity1 = new xeogl.Entity({
    geometry: geometry,
    stage: stage,
    layer: new xeogl.Layer({
        priority: 1
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [0.2, 0.2, 1.0],
        opacity: 1.0
    })
 });

 // Middle box
 // Red and transparent, in Layer with render order 2, renders next

 var entity2 = new xeogl.Entity({
    geometry: geometry,
    stage: stage,
    layer: new xeogl.Layer({
        priority: 2
    }),
    material: new xeogl.Layer({
        priority: 2
    }),
    scale: new xeogl.Scale({
        xyz: [6, 6, 6]
    })
 });

 // Outermost box
 // Green and transparent, in Layer with render order 3, renders last

 var entity3 = new xeogl.Entity({
    geometry: geometry,
    stage: stage,
    layer: new xeogl.Layer({
        priority: 3
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [0.2, 1, 0.2],
        opacity: 0.2
    }),
    scale: new xeogl.Scale({
        xyz: [9, 9, 9]
    })
 });
 ````

 @class Layer
 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Geometry in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Layer.
 @param [cfg.priority=0] {Number} The rendering priority,
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Layer = xeogl.Component.extend({

        type: "xeogl.Layer",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Layer({
                priority: null
            });

            this.priority = cfg.priority;
        },

        _props: {

            /**
             * Indicates this Layer's rendering priority for the attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
             *
             * Each {{#crossLink "Entity"}}{{/crossLink}} is also attached to a {{#crossLink "Stage"}}Stage{{/crossLink}}, which sets a *stage* rendering
             * priority via its {{#crossLink "Stage/priority:property"}}priority{{/crossLink}} property.
             *
             * Fires a {{#crossLink "Layer/priority:event"}}{{/crossLink}} event on change.
             *
             * @property priority
             * @default 0
             * @type Number
             */
            priority: {

                set: function (value) {

                    // TODO: Only accept rendering priority in range [0...MAX_PRIORITY]

                    value = value || 0;

                    value = Math.round(value);


                    if (value === this._state.priority) {
                        return;
                    }

                    this._state.priority = value;

                    this._renderer.stateOrderDirty = true;

                    /**
                     * Fired whenever this Layer's  {{#crossLink "Layer/priority:property"}}{{/crossLink}} property changes.
                     *
                     * @event priority
                     * @param value The property's new value
                     */
                    this.fire("priority", this._state.priority);
                },

                get: function () {
                    return this._state.priority;
                }
            }
        },

        _compile: function () {
            this._renderer.layer = this._state;
        },

        _getJSON: function () {
            return {
                priority: this._state.priority
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **ColorTarget** is a  <a href="https://en.wikipedia.org/wiki/Render_Target" target="other">render target</a>  that
 captures the colors pixels rendered for associated {{#crossLink "Entity"}}Entities{{/crossLink}}.

 * ColorTargets are typically used when *rendering-to-texture*.
 * A ColorTarget provides the pixel colors as a dynamic color image that may be consumed by {{#crossLink "Texture"}}Textures{{/crossLink}}.
 * ColorTarget is not to be confused with {{#crossLink "ColorBuf"}}ColorBuf{{/crossLink}}, which configures ***how*** the pixel colors are written with respect to the WebGL color buffer.
 * Use {{#crossLink "Stage"}}Stages{{/crossLink}} when you need to ensure that a ColorTarget is rendered before
 the {{#crossLink "Texture"}}Textures{{/crossLink}} that consume it.
 * For special effects, we often use ColorTargets and {{#crossLink "Texture"}}Textures{{/crossLink}} in combination
 with {{#crossLink "DepthTarget"}}DepthTargets{{/crossLink}} and {{#crossLink "Shader"}}Shaders{{/crossLink}}.

 <img src="../../../assets/images/ColorTarget.png"></img>

 ## Usage

 This example contains an {{#crossLink "Entity"}}{{/crossLink}} that renders its pixel colors to a ColorTarget, which is then
 piped into a {{#crossLink "Texture"}}{{/crossLink}} that's applied to a second {{#crossLink "Entity"}}{{/crossLink}}.

 ````javascript
 var colorTarget = new xeogl.ColorTarget();

 // First Entity renders to the ColorTarget

 var entity1 = new xeogl.Entity({
    geometry: new xeogl.BoxGeometry(),
    colorTarget: colorTarget
 });


 // Second Entity is textured with the
 // image of the first Entity

 var entity2 = new xeogl.Entity({
     geometry: new xeogl.BoxGeometry()
     material: new xeogl.PhongMaterial({
         diffuseMap: new xeogl.Texture({
            target: colorTarget
         })
     })
});
 ````


 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this ColorTarget within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} ColorTarget configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this ColorTarget.
 @param [cfg.active=true] {Boolean} Indicates if this ColorTarget is active or not.
 @param [cfg.size=null] {Array of Number} Optional fixed size for the ColorTarget's pixel buffer. When this is null, the buffer
 will dynamically resize to the canvas.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.ColorTarget = xeogl.Component.extend({

        type: "xeogl.ColorTarget",

        _init: function (cfg) {

            this._state = new xeogl.renderer.RenderTarget({
                type: xeogl.renderer.RenderTarget.COLOR,
                renderBuf: null
            });

            var canvas = this.scene.canvas;
            var self = this;

            this._webglContextRestored = canvas.on("webglContextRestored",
                function () {
                    if (self._state.renderBuf) {
                        self._state.renderBuf.webglRestored(canvas.gl);
                    }
                });

            this.size = cfg.size;
            this.active = cfg.active;
        },

        _props: {

            /**
             * The resolution of this ColorTarget's pixel buffer.
             *
             * Fires an {{#crossLink "ColorTarget/size:event"}}{{/crossLink}} event on change.
             *
             * @property size
             * @default null
             * @type {Array of Number}
             */
            size: {

                set: function (value) {

                    value = value || null;

                    this._size = value;

                    if (this._active) {
                        this._state.renderBuf.setSize(this._size);
                    }

                    /**
                     Fired whenever this ColorTarget's {{#crossLink "ColorTarget/size:property"}}{{/crossLink}} property changes.
                     @event size
                     @param value {Array of Number} The property's new value
                     */
                    this.fire("size", this._size);
                },

                get: function () {
                    return this._size;
                }
            },

            /**
             * Determines whether this ColorTarget is active or not.
             *
             * When active, the pixel colors of associated {{#crossLink "Entities"}}{{/crossLink}} will be rendered
             * to this ColorTarget. When inactive, the colors will be written to the default WebGL color buffer instead.
             *
             * Fires a {{#crossLink "ColorTarget/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @default true
             * @type Number
             */
            active: {

                set: function (value) {

                    value = value !== false;

                    if (this._active === value) {
                        return;
                    }

                    var state = this._state;
                    this._active = value;

                    if (this._active) {

                        var canvas = this.scene.canvas;

                        state.renderBuf = new xeogl.renderer.webgl.RenderBuffer({
                            canvas: canvas.canvas,
                            gl: canvas.gl,
                            size: this._size
                        });

                        this._renderer.imageDirty = true;

                    } else {

                        if (state.renderBuf) {
                            state.renderBuf.destroy();
                            state.renderBuf = null;
                        }
                    }

                    /**
                     Fired whenever this ColorTarget's {{#crossLink "ColorTarget/active:property"}}{{/crossLink}} property changes.

                     @event active
                     @param value {Boolean} The property's new value
                     */
                    this.fire("active", this._active);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _compile: function () {
            this._renderer.colorTarget = this._state;
        },

        _getJSON: function () {

            var json = {
                active: this._active
            };

            if (this._size) {
                json.size = this._size
            }

            return json;
        },

        _destroy: function () {

            this.scene.canvas.off(this._webglContextRestored);

            if (this._state.renderBuf) {
                this._state.renderBuf.destroy();
            }

            this._state.destroy();
        }
    });

})();
;/**
 A **DepthTarget** is a  <a href="https://en.wikipedia.org/wiki/Render_Target" target="other">render target</a>  that
 captures the depths of the pixels rendered for the attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 * DepthTargets are typically used when *rendering-to-texture*.
 * A DepthTarget provides the pixel depths as a dynamic color-encoded image that may be fed into {{#crossLink "Texture"}}Textures{{/crossLink}}.
 * DepthTarget is not to be confused with {{#crossLink "DepthBuf"}}DepthBuf{{/crossLink}}, which configures ***how*** the pixel depths are written with respect to the WebGL depth buffer.
 * Use {{#crossLink "Stage"}}Stages{{/crossLink}} when you need to ensure that a DepthTarget is rendered before
 the {{#crossLink "Texture"}}Textures{{/crossLink}} that consume it.
 * For special effects, we often use DepthTargets and {{#crossLink "Texture"}}Textures{{/crossLink}} in combination
 with {{#crossLink "DepthTarget"}}DepthTargets{{/crossLink}} and {{#crossLink "Shader"}}Shaders{{/crossLink}}.

 <img src="../../../assets/images/DepthTarget.png"></img>

 ## Usage

 This example contains an {{#crossLink "Entity"}}{{/crossLink}} that renders its (RBGA-encoded) pixel depths to a DepthTarget, which is then
 piped into a {{#crossLink "Texture"}}{{/crossLink}} that's applied to a second {{#crossLink "Entity"}}{{/crossLink}}.

 ````javascript
 var depthTarget = new xeogl.DepthTarget();

 // First Entity renders to the DepthTarget

 var entity1 = new xeogl.Entity({
    geometry: new xeogl.BoxGeometry(),
    depthTarget: depthTarget
 });

 // Second Entity is textured with the image of the first Entity

 var entity2 = new xeogl.Entity({
     geometry: new xeogl.BoxGeometry()
     material: new xeogl.PhongMaterial({
         diffuseMap: new xeogl.Texture({
            target: depthTarget
         })
     })
 });
 ````

 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this DepthTarget within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} DepthTarget configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this DepthTarget.
 @param [cfg.active=true] {Boolean} Indicates if this DepthTarget is active or not.

 @extends Component
 */
(function () {

    "use strict";

    xeogl.DepthTarget = xeogl.Component.extend({

        type: "xeogl.DepthTarget",

        _init: function (cfg) {

            this._state = new xeogl.renderer.RenderTarget({
                type: xeogl.renderer.RenderTarget.DEPTH,
                renderBuf: null
            });

            var canvas = this.scene.canvas;
            var self = this;

            this._webglContextRestored = canvas.on("webglContextRestored",
                function () {
                    if (self._state.renderBuf) {
                        self._state.renderBuf.webglRestored(canvas.gl);
                    }
                });

            this.active = cfg.active;
        },

        _props: {

            /**
             * Indicates whether this DepthTarget is active or not.
             *
             * When active, the pixel depths of associated {{#crossLink "Entities"}}{{/crossLink}} will be rendered
             * to this DepthTarget. When inactive, the colors will be written to the default WebGL depth buffer instead.
             *
             * Fires a {{#crossLink "DepthTarget/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @default true
             * @type Number
             */
            active: {

                set: function (value) {

                    value = value !== false;

                    if (this._active === value) {
                        return;
                    }

                    this._active = value;
                    var state = this._state;

                    if (this._active) {

                        var canvas = this.scene.canvas;

                        state.renderBuf = new xeogl.renderer.webgl.RenderBuffer({
                            canvas: canvas.canvas,
                            gl: canvas.gl
                        });

                        this._renderer.imageDirty = true;


                    } else {
                        if (state.renderBuf) {
                            state.renderBuf.destroy();
                            state.renderBuf = null;
                        }
                    }

                    /**
                     Fired whenever this DepthTarget's {{#crossLink "DepthTarget/active:property"}}{{/crossLink}} property changes.

                     @event active
                     @param value {Boolean} The property's new value
                     */
                    this.fire("active", this._active);
                },

                get: function () {
                    return this._active;
                }
            }
        },

        _compile: function () {
            this._renderer.depthTarget = this._state;
        },

        _getJSON: function () {
            return {
                active: this._active
            };
        },

        _destroy: function () {

            this.scene.canvas.off(this._webglContextRestored);

            if (this._state.renderBuf) {
                this._state.renderBuf.destroy();
            }

            this._state.destroy();
        }
    });

})();
;/**
 A **Modes** toggles various xeogl modes and capabilities for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 ## Overview

 * Though the rendering modes are defined by various different components attached to the {{#crossLink "Entity"}}Entities{{/crossLink}},
 Modes components provide a single point through which you can toggle them on or off.
 * A Modes may be shared among multiple {{#crossLink "Entity"}}Entities{{/crossLink}} to toggle
 rendering modes for them as a group.

 <img src="../../../assets/images/Modes.png"></img>

 ## Usage

 In this example we have a Modes that toggles rendering modes for two {{#crossLink "Entity"}}Entities{{/crossLink}}. The
 properties of the Modes are initialised to their default values.

 ````javascript
 // Create a Modes with default properties
 var modes = new xeogl.Modes(scene, {
    collidable: true,           // Include Entities in boundary calculations
    pickable: true,             // Enable picking
    clippable true,             // Enable effect of xeogl.Clip components
    transparent : false,        // Disable transparency
    backfaces : true,           // Render backfaces
    frontface : "ccw"
 });

 var boxGeometry = new xeogl.BoxGeometry();

 // Create two Entities whose rendering modes will be controlled by our Modes

 var entity1 = new xeogl.Entity({
     geometry: boxGeometry,
     modes: modes,
     translate: new xeogl.Translate({
        xyz: [3, 0, 0]
     })
 });

 var entity2 = new xeogl.Entity(scene, {
     geometry: boxGeometry,
     modes: modes,
     translate: new xeogl.Translate({
        xyz: [3, 0, 0]
     })
 });
 ````

 @class Modes
 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Modes in the default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Modes.
 @param [cfg.pickable=true] {Boolean}  Whether to enable picking.
 @param [cfg.clippable=true] {Boolean} Whether to enable clippable by {{#crossLink "Clips"}}{{/crossLink}}.
 @param [cfg.transparent=false] {Boolean} Whether to enable the transparency effect created by {{#crossLink "Material"}}Material{{/crossLink}}s when they have
 {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} < 1.0. This mode will set attached {{#crossLink "Entity"}}Entities{{/crossLink}} transparent (ie. to be rendered in a
 transparency pass with blending enabled etc), while
 the {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} will indicate the **degree** of their transparency
 (ie. where opacity of 0.0 indicates maximum translucency and opacity of 1.0 indicates minimum translucency).
 @param [cfg.backfaces=false] {Boolean} Whether to render {{#crossLink "Geometry"}}Geometry{{/crossLink}} backfaces.
 @param [cfg.frontface="ccw"] {Boolean} The winding order for {{#crossLink "Geometry"}}Geometry{{/crossLink}} front faces - "cw" for clockwise, or "ccw" for counter-clockwise.
 @param [cfg.collidable=true] {Boolean} Whether attached {{#crossLink "Entity"}}Entities{{/crossLink}} are included in boundary-related calculations. Set this false if the
 {{#crossLink "Entity"}}Entities{{/crossLink}} are things like helpers or indicators that should not be included in boundary calculations.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Modes = xeogl.Component.extend({

        type: "xeogl.Modes",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Modes({
                pickable: null,
                clippable: null,
                transparent: null,
                backfaces: null,
                frontface: null, // Boolean for speed; true == "ccw", false == "cw"
                collidable: null
            });

            this.pickable = cfg.pickable;
            this.clippable = cfg.clippable;
            this.transparent = cfg.transparent;
            this.backfaces = cfg.backfaces;
            this.frontface = cfg.frontface;
            this.collidable = cfg.collidable;
        },

        _props: {

            /**
             Whether this Modes enables picking of attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

             Picking is performed via calls to {{#crossLink "Canvas/pick:method"}}Canvas#pick{{/crossLink}}.

             Fires a {{#crossLink "Modes/pickable:event"}}{{/crossLink}} event on change.

             @property pickable
             @default true
             @type Boolean
             */
            pickable: {

                set: function (value) {

                    value = value !== false;

                    if (this._state.pickable === value) {
                        return;
                    }

                    this._state.pickable = value;

                    // No need to trigger a render;
                    // state is only used when picking

                    /**
                     * Fired whenever this Modes' {{#crossLink "Modes/pickable:property"}}{{/crossLink}} property changes.
                     *
                     * @event pickable
                     * @param value The property's new value
                     */
                    this.fire("pickable", this._state.pickable);
                },

                get: function () {
                    return this._state.pickable;
                }
            },

            /**
             Whether this Modes enables clippable of attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

             clippable is done by {{#crossLink "Clips"}}{{/crossLink}} that are also attached to
             the {{#crossLink "Entity"}}Entities{{/crossLink}}.

             Fires a {{#crossLink "Modes/clippable:event"}}{{/crossLink}} event on change.

             @property clippable
             @default true
             @type Boolean
             */
            clippable: {

                set: function (value) {

                    value = value !== false;

                    if (this._state.clippable === value) {
                        return;
                    }

                    this._state.clippable = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Modes' {{#crossLink "Modes/clippable:property"}}{{/crossLink}} property changes.

                     @event clippable
                     @param value The property's new value
                     */
                    this.fire("clippable", this._state.clippable);
                },

                get: function () {
                    return this._state.clippable;
                }
            },

            /**
             Whether this Modes sets attached {{#crossLink "Entity"}}Entities{{/crossLink}} transparent.

             When true. this property will set attached {{#crossLink "Entity"}}Entities{{/crossLink}} transparent (ie. to be rendered in a
             transparency pass with blending enabled etc), while
             the {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} will be used to indicate the **degree** of their transparency
             (ie. where opacity of 0.0 indicates maximum translucency and opacity of 1.0 indicates minimum translucency).

             Fires a {{#crossLink "Modes/transparent:event"}}{{/crossLink}} event on change.

             @property transparent
             @default false
             @type Boolean
             */
            transparent: {

                set: function (value) {

                    value = !!value;

                    if (this._state.transparent === value) {
                        return;
                    }

                    this._state.transparent = value;

                    this._renderer.stateOrderDirty = true;

                    /**
                     Fired whenever this Modes' {{#crossLink "Modes/transparent:property"}}{{/crossLink}} property changes.

                     @event transparent
                     @param value The property's new value
                     */
                    this.fire("transparent", this._state.transparent);
                },

                get: function () {
                    return this._state.transparent;
                }
            },

            /**
             Whether this Modes enables backfaces to be visible on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

             The backfaces will belong to {{#crossLink "Geometry"}}{{/crossLink}} compoents that are also attached to
             the {{#crossLink "Entity"}}Entities{{/crossLink}}.

             Fires a {{#crossLink "Modes/backfaces:event"}}{{/crossLink}} event on change.

             @property backfaces
             @default false
             @type Boolean
             */
            backfaces: {

                set: function (value) {

                    value = !!value;

                    if (this._state.backfaces === value) {
                        return;
                    }

                    this._state.backfaces = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Modes' {{#crossLink "Modes/backfaces:property"}}{{/crossLink}} property changes.

                     @event backfaces
                     @param value The property's new value
                     */
                    this.fire("backfaces", this._state.backfaces);
                },

                get: function () {
                    return this._state.backfaces;
                }
            },

            /**
             Indicates the winding direction of front faces on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

             The faces will belong to {{#crossLink "Geometry"}}{{/crossLink}} components that are also attached to
             the {{#crossLink "Entity"}}Entities{{/crossLink}}.

             Fires a {{#crossLink "Modes/frontface:event"}}{{/crossLink}} event on change.

             @property frontface
             @default "ccw"
             @type String
             */
            frontface: {

                set: function (value) {

                    value = value !== "cw";

                    if (this._state.frontface === value) {
                        return;
                    }

                    this._state.frontface = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Modes' {{#crossLink "Modes/frontface:property"}}{{/crossLink}} property changes.

                     @event frontface
                     @param value The property's new value
                     */
                    this.fire("frontface", this._state.frontface ? "ccw" : "cw");
                },

                get: function () {
                    return this._state.frontface ? "ccw" : "cw";
                }
            },

            /**
             Whether attached {{#crossLink "Entity"}}Entities{{/crossLink}} are included
             in boundary-related calculations.

             Set this false if the
             {{#crossLink "Entity"}}Entities{{/crossLink}} are things like helpers or indicators that should not be included in boundary calculations.

             For example, when set false, the {{#crossLink "Entity/worldBoundary:property"}}World-space boundary{{/crossLink}} of all attached {{#crossLink "Entity"}}Entities{{/crossLink}} would not be considered when calculating the {{#crossLink "Scene/worldBoundary:property"}}World-space boundary{{/crossLink}} of their
             {{#crossLink "Scene"}}{{/crossLink}}.

             Fires a {{#crossLink "Modes/collidable:event"}}{{/crossLink}} event on change.

             @property collidable
             @default true
             @type Boolean
             */
            collidable: {

                set: function (value) {

                    value = value !== false;

                    if (value === this._state.collidable) {
                        return;
                    }

                    this._state.collidable = value;

                    /**
                     Fired whenever this Modes' {{#crossLink "Modes/collidable:property"}}{{/crossLink}} property changes.

                     @event collidable
                     @param value The property's new value
                     */
                    this.fire("collidable", this._state.collidable);
                },

                get: function () {
                    return this._state.collidable;
                }
            }
        },

        _compile: function () {
            this._renderer.modes = this._state;
        },

        _getJSON: function () {
            return {
                pickable: this._state.pickable,
                clippable: this._state.clippable,
                transparent: this._state.transparent,
                backfaces: this._state.backfaces,
                frontface: this._state.frontface,
                collidable: this._state.collidable
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **Viewport** defines a viewport within the canvas in which attached {{#crossLink "Entity"}}Entities{{/crossLink}} will render.

 ## Overview

 * Make a Viewport automatically size to its {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}{{/crossLink}}
 by setting its {{#crossLink "Viewport/autoBoundary:property"}}{{/crossLink}} property ````true```` (default is ````false````).

 ## Examples

 * [Multiple viewports](../../examples/#canvas_multipleViewports)

 ## Usage

 ````javascript
 new xeogl.Entity({

    geometry: new xeogl.SphereGeometry(),

    material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
        })
    }),

    viewport: new xeogl.Viewport({
        boundary: [0, 0, 500, 400],
        autoBoundary: false // Don't autosize to canvas (default)
    })
 });
 ````

 @class Viewport
 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}{{/crossLink}}, creates this Viewport within the
 default {{#crossLink "Scene"}}{{/crossLink}} when omitted.
 @param [cfg] {*} Viewport configuration
 @param [cfg.id] {String} Optional ID, unique among all components in the parent
 {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Viewport.
 @param [cfg.boundary] {Array of Number} Canvas-space Viewport boundary, given as
 (min, max, width, height). Defaults to the size of the parent
 {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}{{/crossLink}}.
 @param [cfg.autoBoundary=false] {Boolean} Indicates whether this Viewport's {{#crossLink "Viewport/boundary:property"}}{{/crossLink}}
 automatically synchronizes with the size of the parent {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}{{/crossLink}}.

 @extends Component
 */
(function () {

    "use strict";

    xeogl.Viewport = xeogl.Component.extend({

        type: "xeogl.Viewport",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Viewport({
                boundary: [0, 0, 100, 100]
            });

            this.boundary = cfg.boundary;
            this.autoBoundary = cfg.autoBoundary;
        },

        _props: {

            /**
             The canvas-space boundary of this Viewport, indicated as [min, max, width, height].

             Defaults to the size of the parent
             {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}{{/crossLink}}.

             Ignores attempts to set value when {{#crossLink "Viewport/autoBoundary:property"}}{{/crossLink}} is ````true````.

             Fires a {{#crossLink "Viewport/boundary:event"}}{{/crossLink}} event on change.

             @property boundary
             @default [size of Scene Canvas]
             @type {Array of Number}
             */
            boundary: {

                set: function (value) {

                    if (this._autoBoundary) {
                        return;
                    }

                    if (!value) {

                        var canvasBoundary = this.scene.canvas.boundary;

                        var width = canvasBoundary[2];
                        var height = canvasBoundary[3];

                        value = [0, 0, width, height];
                    }

                    this._state.boundary = value;

                    this._renderer.imageDirty = true;

                    /**
                     Fired whenever this Viewport's {{#crossLink "Viewport/boundary:property"}}{{/crossLink}} property changes.

                     @event boundary
                     @param value {Boolean} The property's new value
                     */
                    this.fire("boundary", this._state.boundary);
                },

                get: function () {
                    return this._state.boundary;
                }
            },

            /**
             Indicates whether this Viewport's {{#crossLink "Viewport/boundary:property"}}{{/crossLink}} automatically
             synchronizes with the size of the parent {{#crossLink "Scene"}}Scene's{{/crossLink}} {{#crossLink "Canvas"}}{{/crossLink}}.

             When set true, then this Viewport will fire a {{#crossLink "Viewport/boundary/event"}}{{/crossLink}} whenever
             the {{#crossLink "Canvas"}}{{/crossLink}} resizes. Also fires that event as soon as this ````autoBoundary````
             property is changed.

             Fires a {{#crossLink "Viewport/autoBoundary:event"}}{{/crossLink}} event on change.

             @property autoBoundary
             @default false
             @type Boolean
             */
            autoBoundary: {

                set: function (value) {

                    value = !!value;

                    if (value === this._autoBoundary) {
                        return;
                    }

                    this._autoBoundary = value;

                    if (this._autoBoundary) {
                        this._onCanvasSize = this.scene.canvas.on("boundary",
                            function (boundary) {

                                var width = boundary[2];
                                var height = boundary[3];

                                this._state.boundary = [0, 0, width, height];

                                /**
                                 Fired whenever this Viewport's {{#crossLink "Viewport/boundary:property"}}{{/crossLink}} property changes.

                                 @event boundary
                                 @param value {Boolean} The property's new value
                                 */
                                this.fire("boundary", this._state.boundary);

                            }, this);

                    } else if (this._onCanvasSize) {
                        this.scene.canvas.off(this._onCanvasSize);
                        this._onCanvasSize = null;
                    }

                    /**
                     Fired whenever this Viewport's {{#crossLink "autoBoundary/autoBoundary:property"}}{{/crossLink}} property changes.

                     @event autoBoundary
                     @param value The property's new value
                     */
                    this.fire("autoBoundary", this._autoBoundary);
                },

                get: function () {
                    return this._autoBoundary;
                }
            }
        },

        _compile: function () {
            this._renderer.viewport = this._state;
        },

        _getJSON: function () {
            var json = {};
            if (this._autoBoundary) {
                json.autoBoundary = true;
            } else {
                json.boundary = this._state.boundary.slice();
            }
            return json;
        }
    });

})();
;/**
 A **Stage** is a bin of {{#crossLink "Entity"}}Entities{{/crossLink}} that is rendered in a specified priority with respect to
 other Stages in the same {{#crossLink "Scene"}}{{/crossLink}}.

 ## Overview

 * When the parent {{#crossLink "Scene"}}Scene{{/crossLink}} renders, each Stage renders its bin
 of {{#crossLink "Entity"}}Entities{{/crossLink}} in turn, from the lowest priority Stage to the highest.
 * Stages are typically used for ordering the render-to-texture steps in posteffects pipelines.
 * You can control the render order of the individual {{#crossLink "Entity"}}Entities{{/crossLink}} ***within*** a Stage
 by associating them with {{#crossLink "Layer"}}Layers{{/crossLink}}.
 * {{#crossLink "Layer"}}Layers{{/crossLink}} are typically used to <a href="https://www.opengl.org/wiki/Transparency_Sorting" target="_other">transparency-sort</a> the
 {{#crossLink "Entity"}}Entities{{/crossLink}} within Stages.
 * {{#crossLink "Entity"}}Entities{{/crossLink}} not explicitly attached to a Stage are implicitly
 attached to the {{#crossLink "Scene"}}Scene{{/crossLink}}'s default
 {{#crossLink "Scene/stage:property"}}stage{{/crossLink}}. which has
 a {{#crossLink "Stage/priority:property"}}{{/crossLink}} value of zero.

 <img src="../../../assets/images/Stage.png"></img>

 ## Examples

 * [Procedural texture using RTT](../../examples/#materials_texture_procedural)

 ## Usage

 In this example we're performing render-to-texture using {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}} and
 {{#crossLink "Texture"}}{{/crossLink}} components.

 The first Entity renders its fragment colors to a {{#crossLink "ColorTarget"}}{{/crossLink}}, which is piped into a
 {{#crossLink "Texture"}}{{/crossLink}} that's applied to a second {{#crossLink "Entity"}}{{/crossLink}}. To ensure
 that the {{#crossLink "ColorTarget"}}{{/crossLink}} is rendered ***before*** the {{#crossLink "Texture"}}{{/crossLink}}
 that consumes it, we've attached each {{#crossLink "Entity"}}{{/crossLink}} to a prioritized {{#crossLink "Stage"}}{{/crossLink}}.

 ````javascript
 // First stage: an Entity that renders to a ColorTarget
 var entity1 = new xeogl.Entity({
    stage: new xeogl.Stage({
        priority: 0
    }),
    geometry: new xeogl.BoxGeometry(),
    colorTarget: new xeogl.ColorTarget()
 });

 // Second stage: an Entity with a Texture that sources from the ColorTarget
 var entity2 = new xeogl.Entity({
    stage: new xeogl.Stage( {
        priority: 1
    }),
    material: new xeogl.PhongMaterial({
        diffuseMap: new xeogl.Texture({
            target: entity1.colorTarget
        })
    }),
    geometry: new xeogl.BoxGeometry()
 });
 ````

 @class Stage
 @module xeogl
 @submodule rendering
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Stage in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Stage.
 @param [cfg.priority=0] {Number} The rendering priority for the attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
 @param [cfg.pickable=true] {Boolean} Indicates whether attached {{#crossLink "Entity"}}Entities{{/crossLink}} are pickable.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Stage = xeogl.Component.extend({

        type: "xeogl.Stage",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Stage({
                priority: null,
                pickable: true
            });

            this.priority = cfg.priority;
            this.pickable = cfg.pickable;
        },

        _props: {

            priority: {

                /**
                 * Indicates the rendering priority for the
                 * {{#crossLink "Entity"}}Entities{{/crossLink}} in
                 * this Stage.
                 *
                 * Fires a {{#crossLink "Stage/priority:event"}}{{/crossLink}}
                 * event on change.
                 *
                 * @property priority
                 * @default 0
                 * @type Number
                 */
                set: function (value) {

                    value = value || 0;

                    if (value === this._state.priority) {
                        return;
                    }

                    value = Math.round(value);

                    this._state.priority = value;

                    this._renderer.stateOrderDirty = true;

                    /**
                     * Fired whenever this Stage's
                     * {{#crossLink "Stage/priority:property"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event priority
                     * @param value The property's new value
                     */
                    this.fire("priority", this._state.priority);
                },

                get: function () {
                    return this._state.priority;
                }
            },

            /**
             * Indicates whether the attached
             * {{#crossLink "Entity"}}Entities{{/crossLink}} are
             * pickable (see {{#crossLink "Canvas/pick:method"}}Canvas#pick{{/crossLink}}).
             *
             * Fires a {{#crossLink "Stage/pickable:event"}}{{/crossLink}} event on change.
             *
             * @property pickable
             * @default true
             * @type Boolean
             */
            pickable: {

                set: function (value) {

                    value = value !== false;

                    if (this._state.pickable === value) {
                        return;
                    }

                    this._state.pickable = value;

                    // No need to trigger a render;
                    // state is only used when picking

                    /**
                     * Fired whenever this Stage's
                     * {{#crossLink "Stage/pickable:pickable"}}{{/crossLink}}
                     * property changes.
                     *
                     * @event pickable
                     * @param value The property's new value
                     */
                    this.fire("pickable", this._state.pickable);
                },

                get: function () {
                    return this._state.pickable;
                }
            }
        },

        _compile: function () {
            this._renderer.stage = this._state;
        },

        _getJSON: function () {
            return {
                priority: this.priority,
                pickable: this.pickable
            };
        },

        _destroy: function () {
            this._state.destroy();
        }
    });

})();
;/**
 A **Shader** specifies a custom GLSL shader to apply when rendering attached {{#crossLink "Entity"}}Entities{{/crossLink}}.


 * Normally you would rely on xeogl to automatically generate shaders for you, however the Shader component allows you to author them manually.
 * You can use xeogl's reserved uniform and variable names in your Shaders to read all the WebGL state that's set by other
 components on the attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * Use Shaders in combination with {{#crossLink "ShaderParams"}}ShaderParams{{/crossLink}} components when you need to share
 the same Shaders among multiple {{#crossLink "Entity"}}Entities{{/crossLink}} while setting the Shaders' uniforms
 differently for each {{#crossLink "Entity"}}Entity{{/crossLink}}.
 * Use {{#crossLink "ColorTarget"}}ColorTarget{{/crossLink}}, {{#crossLink "DepthTarget"}}DepthTarget{{/crossLink}}
 and {{#crossLink "Texture"}}Texture{{/crossLink}} components to connect the output of one Shader as input into another Shader.


 <img src="../../../assets/images/Shader.png"></img>

 ## Usage

 This example shows the simplest way to use a Shader, where we're just going to render a ripply water
 pattern to a screen-aligned quad.

 <img src="../../assets/images/shaderExample1.png"></img>

 In our scene definition, we have an  {{#crossLink "Entity"}}Entity{{/crossLink}} that has a {{#crossLink "Geometry"}}Geometry{{/crossLink}} that is our
 screen-aligned quad, plus a Shader that will render the fragments of that quad with our rippling water pattern.
 Finally, we animate the rippling by periodically updating the Shader's "time" uniform.

 ````javascript
 // Shader that's used by our Entity. Note the 'xeo_aPosition' and 'xeo_aUV attributes',
 // which will receive the positions and UVs from the Geometry. Also note the 'time'
 // uniform, which we'll be animating via Shader#setParams.

 var shader = new xeogl.Shader({

    // Vertex shading stage
    vertex: [
        "attribute vec3 xeo_aPosition;",
        "attribute vec2 xeo_aUV;",
        "varying vec2 vUv;",
        "void main () {",
        "    gl_Position = vec4(xeo_aPosition, 1.0);",
        "    vUv = xeo_aUV;",
        "}"
    ],

    // Fragment shading stage
    fragment: [
        "precision mediump float;",

        "uniform float time;",
        "varying vec2 vUv;",

        "void main( void ) {",
        "    vec2 sp = vUv;",
        "    vec2 p = sp*5.0 - vec2(10.0);",
        "    vec2 i = p;",
        "    float c = 1.0;",
        "    float inten = 0.10;",
        "    for (int n = 0; n < 10; n++) {",
        "        float t = time * (1.0 - (3.0 / float(n+1)));",
        "        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));",
        "        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));",
        "    }",
        "    c /= float(10);",
        "    c = 1.5-sqrt(c);",
        "    gl_FragColor = vec4(vec3(c*c*c*c), 999.0) + vec4(0.0, 0.3, 0.5, 1.0);",
        "}"
    ],

    // Initial value for the 'time' uniform in the fragment stage.
    params: {
        time: 0.0
    }
 });

 // A screen-aligned quad
 var quad = new xeogl.Geometry({
    primitive:"triangles",
    positions:[ 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0 ],
    normals:[ -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0 ],
    uv:[ 1, 1, 0, 1, 0, 0, 1, 0 ],
    indices:[ 0, 1, 2, 0, 2, 3 ]
 });

 var entity = new xeogl.Entity(scene, {
    shader: shader,
    geometry: quad
 });

 ````
 Now let's animate the "time" parameter on the Shader, to make the water ripple:

 ```` javascript
 entity.scene.on("tick", function(params) {
     shader.setParams({
         time: params.timeElapsed
     });
 });
 ````

 ## <a name="inputs">Shader Inputs</a>

 xeogl provides the following inputs for your shaders (work in progress).

 #### Attributes

 *Attributes are used only in vertex shaders*

 | Attribute  | Description | Depends on  |
 |---|---|
 | attribute vec3 xeo_aPosition   | Geometry vertex positions | {{#crossLink "Geometry"}}Geometry{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}} |
 | attribute vec2 xeo_aUV         | Geometry vertex UV coordinates | {{#crossLink "Geometry"}}Geometry{{/crossLink}} {{#crossLink "Geometry/uv:property"}}{{/crossLink}}  |
 | attribute vec3 xeo_aNormal     | Geometry vertex normals | {{#crossLink "Geometry"}}Geometry{{/crossLink}} {{#crossLink "Geometry/normals:property"}}{{/crossLink}}  |
 | attribute vec4 xeo_aColor      | Geometry vertex colors  | {{#crossLink "Geometry"}}Geometry{{/crossLink}} {{#crossLink "Geometry/colors:property"}}{{/crossLink}}  |
 | attribute vec4 xeo_aTangent    | Geometry vertex tangents, for normal mapping | {{#crossLink "Geometry"}}Geometry{{/crossLink}} {{#crossLink "Geometry/normals:property"}}{{/crossLink}} and {{#crossLink "Geometry/uv:property"}}{{/crossLink}}  |

 #### Uniforms

 *Uniforms are used in vertex and fragment shaders*

 | Uniform  | Description | Depends on  |
 |---|---|
 | uniform mat4  xeo_uModelMatrix                                   | Modelling transform matrix | {{#crossLink "Transform"}}{{/crossLink}} |
 | uniform mat4  xeo_uModelNormalMatrix                             | Modelling transform normal matrix | {{#crossLink "Geometry/normals:property"}}Geometry normals{{/crossLink}} and {{#crossLink "Transform"}}{{/crossLink}} |
 | uniform mat4  xeo_uViewMatrix                                    | View transform matrix | {{#crossLink "Lookat"}}Lookat{{/crossLink}} |
 | uniform mat4  xeo_uViewNormalMatrix                              | View transform normal matrix | {{#crossLink "Geometry/normals:property"}}Geometry normals{{/crossLink}} and {{#crossLink "Lookat"}}Lookat{{/crossLink}} |
 | uniform mat4  xeo_uProjMatrix                                    | Projection transform matrix | {{#crossLink "Ortho"}}Ortho{{/crossLink}}, {{#crossLink "Frustum"}}Frustum{{/crossLink}} or {{#crossLink "Perspective"}}Perspective{{/crossLink}} |
 | uniform float xeo_uZNear                                         | Near clipping plane |{{#crossLink "Ortho"}}Ortho{{/crossLink}}, {{#crossLink "Frustum"}}Frustum{{/crossLink}} or {{#crossLink "Perspective"}}Perspective{{/crossLink}} |
 | uniform float xeo_uZFar                                          | Far clipping plane |{{#crossLink "Ortho"}}Ortho{{/crossLink}}, {{#crossLink "Frustum"}}Frustum{{/crossLink}} or {{#crossLink "Perspective"}}Perspective{{/crossLink}} |
 |---|---|
 | uniform vec3  xeo_uLightAmbientColor                             | Color of the first {{#crossLink "AmbientLight"}}{{/crossLink}} in {{#crossLink "Lights"}}{{/crossLink}}| {{#crossLink "AmbientLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightColor&lt;***N***&gt;                    | Diffuse color of {{#crossLink "DirLight"}}{{/crossLink}} or {{#crossLink "PointLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "DirLight"}}{{/crossLink}} or {{#crossLink "PointLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightIntensity&lt;***N***&gt;                   | Specular color of {{#crossLink "DirLight"}}{{/crossLink}} or {{#crossLink "PointLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "DirLight"}}{{/crossLink}} or {{#crossLink "PointLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightDir&lt;***N***&gt;                        | Direction of {{#crossLink "DirLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "DirLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightPos&lt;***N***&gt;                        | Position of {{#crossLink "PointLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "PointLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightConstantAttenuation&lt;***N***&gt;        | Constant attenuation factor for {{#crossLink "PointLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "PointLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightLinearAttenuation&lt;***N***&gt;          | Linear attenuation factor for {{#crossLink "PointLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "PointLight"}}{{/crossLink}} |
 | uniform vec3 xeo_uLightQuadraticAttenuation&lt;***N***&gt;       | Quadratic attenuation factor for {{#crossLink "PointLight"}}{{/crossLink}} at index ***N*** in {{#crossLink "Lights"}}{{/crossLink}} | {{#crossLink "PointLight"}}{{/crossLink}} |
 |---|---|
 | uniform vec3 xeo_uDiffuse;       |  | {{#crossLink "PhongMaterial/diffuse:property"}}{{/crossLink}} |
 | uniform vec3 xeo_uSpecular;       |  | {{#crossLink "PhongMaterial/specular:property"}}{{/crossLink}} |
 | uniform vec3 xeo_uEmissive;       |  | {{#crossLink "PhongMaterial/emissive:property"}}{{/crossLink}} |
 | uniform float xeo_uOpacity;       |  | {{#crossLink "PhongMaterial/opacity:property"}}{{/crossLink}} |
 | uniform float xeo_uShininess;       |  | {{#crossLink "PhongMaterial/shininess:property"}}{{/crossLink}} |
 | uniform float xeo_uDiffuseFresnelEdgeBias;       |  | {{#crossLink "Fresnel/edgeBias:property"}}{{/crossLink}} |

 #### Varying

 *Varying types are used in fragment shaders*

 | Varying | Description | Depends on  |
 |---|---|---|
 | varying vec4 xeo_vWorldPosition | |
 | varying vec4 xeo_vViewPosition | |
 | varying vec4 xeo_vColor | |

 #### Samplers

 *Samplers are used in fragment shaders*

 | Varying | Description | Depends on  |
 |---|---|---|



 @module xeogl
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Shader in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Shader.
 @param [cfg.vertex=null] {String} GLSL Depends on code for the vertex shading staging.
 @param [cfg.fragment=null] {String} GLSL source code for the fragment shading staging.
 @param [cfg.params={}] {Object} Values for uniforms defined in the vertex and/or fragment stages.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Shader = xeogl.Component.extend({

        type: "xeogl.Shader",

        _init: function (cfg) {

            this._state = new xeogl.renderer.Shader({
                vertex: null,
                fragment: null,
                params: {}
            });

            this.vertex = cfg.vertex;

            this.fragment = cfg.fragment;

            this.setParams(cfg.params);
        },

        _props: {

            /**
             * GLSL source code for this Shader's vertex stage.
             *
             * Fires a {{#crossLink "Shader/vertex:event"}}{{/crossLink}} event on change.
             *
             * @property vertex
             * @default null
             * @type String
             */
            vertex: {

                set: function (value) {

                    this._state.vertex = value;

                    // Trigger recompile
                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Shader's {{#crossLink "Shader/vertex:property"}}{{/crossLink}} property changes.
                     *
                     * @event vertex
                     * @param value The property's new value
                     */
                    this.fire("vertex", this._state.vertex);
                },

                get: function () {
                    return this._state.vertex;
                }
            },

            /**
             * GLSL source code for this Shader's fragment stage.
             *
             * Fires a {{#crossLink "Shader/fragment:event"}}{{/crossLink}} event on change.
             *
             * @property fragment
             * @default null
             * @type String
             */
            fragment: {

                set: function (value) {

                    this._state.fragment = value;

                    // Trigger recompile
                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Shader's {{#crossLink "Shader/fragment:property"}}{{/crossLink}} property changes.
                     *
                     * @event fragment
                     * @param value The property's new value
                     */
                    this.fire("fragment", this._state.fragment);
                },

                get: function () {
                    return this._state.fragment;
                }
            },

            /**
             * Params for this Shader.
             *
             * Fires a {{#crossLink "Shader/params:event"}}{{/crossLink}} event on change.
             *
             * @property params
             * @default {}
             * @type {}
             */
            params: {

                get: function () {
                    return this._state.params;
                }
            }
        },

        /**
         * Sets one or more params for this Shader.
         *
         * These will be individually overridden by any {{#crossLink "ShaderParams/setParams:method"}}params subsequently specified{{/crossLink}} on
         * {{#crossLink "ShaderParams"}}ShaderParams{{/crossLink}} on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
         *
         * Fires a {{#crossLink "Shader/params:event"}}{{/crossLink}} event on change.
         *
         * @method setParams
         * @param {} [params={}] Values for params to set on this Shader, keyed to their names.
         */
        setParams: function (params) {

            for (var name in params) {
                if (params.hasOwnProperty(name)) {
                    this._state.params[name] = params[name];
                }
            }

            this._renderer.imageDirty = true;

            /**
             * Fired whenever this Shader's  {{#crossLink "Shader/params:property"}}{{/crossLink}}
             * property has been updated.
             *
             * @event params
             * @param value The property's new value
             */
            this.fire("params", this._state.params);
        },

        _compile: function () {
            this._renderer.shader = this._state;
        },

        _getJSON: function () {

            var json = {
                params: this._state.params
            };

            if (this._state.vertex) {
                json.vertex = this._state.vertex;
            }

            if (this._state.fragment) {
                json.fragment = this._state.fragment;
            }

            return json;
        }
    });

})();
;/**
 A **ShaderParams** sets uniform values for {{#crossLink "Shader"}}Shaders{{/crossLink}} on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.


 * Use ShaderParams components when you need to share the same {{#crossLink "Shader"}}Shaders{{/crossLink}} among multiple {{#crossLink "Entity"}}Entities{{/crossLink}},
 while setting the {{#crossLink "Shader"}}Shaders{{/crossLink}}' uniforms differently for each {{#crossLink "Entity"}}Entity{{/crossLink}}.


 <img src="../../../assets/images/ShaderParams.png"></img>

 ## Usage

 In this example we'll create the effect shown below, in which we render a rippling water pattern to the left and right halves
 of the canvas, independently. We'll have a {{#crossLink "Shader"}}{{/crossLink}} that creates the water pattern, which
 we'll share between two {{#crossLink "Entity"}}Entities{{/crossLink}}.
 Each {{#crossLink "Entity"}}{{/crossLink}} will have its own screen-aligned quad {{#crossLink "Geometry"}}{{/crossLink}},
 as well its own {{#crossLink "ShaderParams"}}{{/crossLink}} to update the update the {{#crossLink "Shader"}}{{/crossLink}}'s
 rippling rate independently.

 <img src="../../assets/images/shaderParamsExample1.png"></img>

 ````javascript
 // Shader that's shared by both our Entities. Note the 'xeo_aPosition' and 'xeo_aUV attributes',
 // which will receive the positions and UVs from the Geometry components. Also note the 'time'
 // uniform, which we'll be animating via the ShaderParams components.

 var shader = new xeogl.Shader({

    // Vertex shading stage
    vertex: [
        "attribute vec3 xeo_aPosition;",
        "attribute vec2 xeo_aUV;",
        "varying vec2 vUv;",
        "void main () {",
        "    gl_Position = vec4(xeo_aPosition, 1.0);",
        "    vUv = xeo_aUV;",
        "}"
    ],

    // Fragment shading stage
    fragment: [
        "precision mediump float;",

        "uniform float time;",
        "varying vec2 vUv;",

        "void main( void ) {",
        "    vec2 sp = vUv;",
        "    vec2 p = sp*5.0 - vec2(10.0);",
        "    vec2 i = p;",
        "    float c = 1.0;",
        "    float inten = 0.10;",
        "    for (int n = 0; n < 10; n++) {",
        "        float t = time * (1.0 - (3.0 / float(n+1)));",
        "        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));",
        "        c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));",
        "    }",
        "    c /= float(10);",
        "    c = 1.5-sqrt(c);",
        "    gl_FragColor = vec4(vec3(c*c*c*c), 999.0) + vec4(0.0, 0.3, 0.5, 1.0);",
        "}"
    ],

    // Initial values for the 'time' uniform in the fragment stage.
    params: {
        time: 0.0
    }
 });

 // First Entity using our Shader, with a quad covering the left half of the canvas,
 // along with its own ShaderParams to independently set its own values for the Shader's uniforms.

 var entity1 = new xeogl.Entity({
    shader: shader,
    geometry: new xeogl.Geometry({
        primitive:"triangles",
        positions:[ 1, 1, 0, 0, 1, 0, 0, -1, 0, 1, -1, 0 ],
        normals:[ -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0 ],
        uv:[ 1, 1, 0, 1, 0, 0, 1, 0 ],
        indices:[ 0, 1, 2, 0, 2, 3 ]
    }),
    shaderParams1: new xeogl.ShaderParams({
        params: {
            time: 0.0
        }
    })
 });

 // Second Entity using the Shader, with a quad covering the right half of the canvas,
 // along with its own ShaderParams to independently set its own values for the Shader's uniforms.

 var entity2 = new xeogl.Entity({
    shader: shader,
    geometry: new xeogl.Geometry({
        primitive:"triangles",
        positions:[ 1, 1, 0, 0, 1, 0, 0, -1, 0, 1, -1, 0 ],
        normals:[ -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0 ],
        uv:[ 1, 1, 0, 1, 0, 0, 1, 0 ],
        indices:[ 0, 1, 2, 0, 2, 3 ]
    }),
    shaderParams: new xeogl.ShaderParams({
        params: {
            time: 0.0
        }
    })
 });
 ````
 Now let's animate the "time" parameter on the Shader, for each Entity independently:

 ```` javascript
 // Get the default Scene off the first Entity
 var scene = entity1.scene;

 scene.on("tick", function(params) {

    entity1.shaderParams.setParams({
        time: params.timeElapsed
    });

    entity2.shaderParams.setParams({
        time: params.timeElapsed  * 0.5
    });
});
 ````

 @module xeogl

 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this ShaderParams in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this ShaderParams.
 @param [cfg.params={}] {Object} The {{#crossLink "Shader"}}Shader{{/crossLink}} parameter values.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.ShaderParams = xeogl.Component.extend({

        type: "xeogl.ShaderParams",

        _init: function (cfg) {

            this._state = new xeogl.renderer.ShaderParams({
                params: {}
            });

            this.setParams(cfg.params);
        },

        _props: {

            /**
             * Params for {{#crossLink "Shader"}}Shaders{{/crossLink}} on attached
             * {{#crossLink "Entity"}}Entities{{/crossLink}}.
             *
             * Fires a {{#crossLink "Shader/params:event"}}{{/crossLink}} event on change.
             *
             * @property params
             * @default {}
             * @type {}
             */
            params: {

                get: function () {
                    return this._state.params;
                }
            }
        },

        /**
         * Sets one or more params for {{#crossLink "Shader"}}Shaders{{/crossLink}} on attached
         * {{#crossLink "Entity"}}Entities{{/crossLink}}.
         *
         * These will individually override any params of the same names that are {{#crossLink "Shader/setParams:method"}}already specified{{/crossLink}} on
         * those {{#crossLink "Shader"}}Shaders{{/crossLink}}.
         *
         * Fires a {{#crossLink "ShaderParams/params:event"}}{{/crossLink}} event on change.
         *
         * @method setParams
         * @param {} [params={}] Values for params to set on the {{#crossLink "Shader"}}Shaders{{/crossLink}}, keyed to their names.
         */
        setParams: function (params) {

            for (var name in params) {
                if (params.hasOwnProperty(name)) {
                    this._state.params[name] = params[name];
                }
            }

            this._renderer.imageDirty = true;

            /**
             * Fired whenever this ShaderParams' {{#crossLink "ShaderParams/params:property"}}{{/crossLink}} property has been updated.
             * @event params
             * @param value The property's new value
             */
            this.fire("params", this._state.params);
        },

        _compile: function () {
            this._renderer.shaderParams = this._state;
        },

        _getJSON: function () {
            return {
                params: this._state.params
            };
        }
    });

})();
;/**
 * Components to support spatial queries (eg. collisions etc).
 *
 * @module xeogl
 * @submodule boundaries
 */;/**
 A **Boundary2D** is a Canvas-space 2D boundary.

 <a href="../../examples/#boundaries_flyToBoundary"><img src="https://i.giphy.com/3oriO8fJ8f70AfXdUA.gif"></img></a>

 ## Overview

 A Boundary2D provides its spatial info in these properties:

 * {{#crossLink "Boundary2D/aabb:property"}}{{/crossLink}} - an axis-aligned box (AABB) as a four-element Float32Array
 containing the min/max extents of the axis-aligned volume, ie. ````[xmin,ymin,xmax,ymax]````, and
 * {{#crossLink "Boundary2D/center:property"}}{{/crossLink}} - the center point as a two-element Float32Array containing elements ````[x,y]````.

 The following components have Boundary2Ds:

 * An {{#crossLink "Entity"}}{{/crossLink}} provides its Canvas-space boundary via
 its {{#crossLink "Entity/canvasBoundary:property"}}{{/crossLink}} property

 <img src="../../../assets/images/Boundary2D.png"></img>

 ## Examples

 * [Visualizing an Entity's Canvas-space boundary](../../examples/#boundaries_Entity_canvasBoundary_aabb)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} provides its Canvas-space boundary as a Boundary2D that encloses
 its {{#crossLink "Geometry"}}{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}} after
 transformation by the Entity's {{#crossLink "Entity/transform:property"}}modelling transform{{/crossLink}}
 and {{#crossLink "Entity/camera:property"}}projection transform{{/crossLink}}.

 In the example below we'll create an {{#crossLink "Entity"}}{{/crossLink}}, get its Boundary2D, subscribe to updates on it,
 then animate the {{#crossLink "Entity"}}Entity's{{/crossLink}} {{#crossLink "Translate"}}{{/crossLink}}
 which gives us a running update of the Boundary2D's moving extents via our update handler.

 ```` javascript
 // Entity With a Geometry and Transform

 var entity = new xeogl.Entity({
        geometry: new xeogl.BoxGeometry(),
        transform: new xeogl.Translate({
            xyz: [-5, 0, 0]
        })
  });

 // Subscribe to updates to the Boundary2D

 var canvasBoundary = entity.canvasBoundary;

 canvasBoundary.on("updated", function() {
        aabb = canvasBoundary.aabb;
        center = canvasBoundary.center;

        //...
    });

 // Animate the modelling transform;
 // on each tick, this will update the Boundary2D and fire our
 // handler, enabling us to track the changing boundary.

 var x = 0;

 entity.scene.on("tick", function() {
    entity.transform.xyz: [x, 0, 0];
    x += 0.5;
 });
 ````

 @class Boundary2D
 @module xeogl
 @submodule boundaries
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Boundary2D within xeogl's default {{#crossLink "xeogl/scene:property"}}scene{{/crossLink}} by default.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Boundary.
 @param [cfg.aabb] {Float32Array} Optional initial canvas-space 2D axis-aligned bounding volume (AABB).
 @param [cfg.center] {Float32Array} Optional initial canvas-space 2D center
 @param [cfg.getDirty] {Function} Optional callback to check if parent component has new OBB and matrix.
 @param [cfg.getOBB] {Function} Optional callback to get new view-space 3D OBB from parent.
 @param [cfg.getMatrix] {Function} Optional callback to get new projection matrix from parent.
 @extends Component
 */

/**
 * Fired whenever this Boundary2D's {{#crossLink "Boundary2D/aabb:property"}}{{/crossLink}} and {{#crossLink "Boundary2D/center:property"}}{{/crossLink}}.
 * properties change.
 * @event updated
 */
(function () {

    "use strict";

    xeogl.Boundary2D = xeogl.Component.extend({

        type: "xeogl.Boundary2D",

        _init: function (cfg) {

            // Cached boundaries

            this._obb = null; // Private 3D View-space OBB
            this._aabb = cfg.aabb || null; // 2D Canvas-space AABB
            this._center = cfg.center || null; // 2D Canvas-space center

            // Optional callbacks to lazy-pull
            // data from owner component

            this._getDirty = cfg.getDirty;
            this._getOBB = cfg.getOBB;
            this._getMatrix = cfg.getMatrix;
        },

        _props: {

            /**
             * An axis-aligned box (AABB) representation of this 2D boundary.
             *
             * The AABB is represented by a four-element Float32Array containing the min/max canvas-space
             * extents of the axis-aligned volume, ie. ````[xmin,ymin,xmax,ymax]````.
             *
             * @property aabb
             * @final
             * @type {Float32Array}
             */
            aabb: {

                get: function () {

                    if (this._getDirty()) {
                        this._buildBoundary();
                    }

                    return this._aabb;
                }
            },

            /**
             * The center point of this 2D boundary.
             *
             * The center point is represented by a Float32Array containing canvas-space coordinates,
             * ie. ````[x,y]````.
             *
             * @property center
             * @final
             * @type {Float32Array}
             */
            center: {

                get: function () {

                    if (this._getDirty()) {
                        this._buildBoundary();
                    }

                    return this._center;
                }
            }
        },

        // Lazy (re)builds the obb, aabb and center.

        _buildBoundary: function () {

            var math = xeogl.math;

            var canvas = this.scene.canvas.canvas;
            var width = canvas.width;
            var height = canvas.height;

            if (!this._obb) {

                // Lazy-allocate

                this._obb = math.OBB2();
                this._aabb = math.AABB2();
                this._center = math.vec2();
            }

            var obb = this._getOBB();
            var matrix = this._getMatrix();

            if (obb && matrix) {

                math.transformOBB3(matrix, obb, this._obb);
                math.OBB3ToAABB2(this._obb, this._aabb);
                math.AABB2ToCanvas(this._aabb, width, height);
                math.getAABB2Center(this._aabb, this._center);
            }
        },

        _getJSON: function () {
            return {
                aabb: this.aabb,
                center: this.center
            };
        }
    });
})();
;/**
 A **Boundary3D** provides the 3D extents of its parent component in either the Local, World or View coordinate systems.

 <a href="../../examples/#animation_CameraFollowAnimation"><img src="https://i.giphy.com/l0HlHcuzAjhMQ8YSY.gif"></img></a>

 ## Overview

 A Boundary3D provides its spatial info in these properties:

 * {{#crossLink "Boundary3D/obb:property"}}{{/crossLink}} - an oriented box (OBB) as a 32-element Float32Array
 containing homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].
 * {{#crossLink "Boundary3D/aabb:property"}}{{/crossLink}} - an axis-aligned box (AABB) in a six-element Float32Array
 containing the min/max extents of the axis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````,
 * {{#crossLink "Boundary3D/center:property"}}{{/crossLink}} - the center point as a three-element Float32Array containing elements ````[x,y,z]```` and
 * {{#crossLink "Boundary3D/sphere:property"}}{{/crossLink}} - a bounding sphere as a four-element Float32Array containing elements````[x,y,z,radius]````.

 As shown in the diagram below, the following xeogl components have Boundary3Ds:

 * A {{#crossLink "Scene/worldBoundary:property"}}Scene's worldBoundary{{/crossLink}} provides the **World**-space boundary of all its {{#crossLink "Entity"}}Entities{{/crossLink}}
 * A {{#crossLink "Geometry/localBoundary:property"}}Geometry's localBoundary{{/crossLink}} provides the **Local**-space boundary of its {{#crossLink "Geometry/positions:property"}}positions{{/crossLink}}
 * An {{#crossLink "Entity/localBoundary:property"}}Entity's localBoundary{{/crossLink}} (also) provides the **Local**-space boundary of its {{#crossLink "Geometry"}}{{/crossLink}}
 * An {{#crossLink "Entity/worldBoundary:property"}}Entity's worldBoundary {{/crossLink}} provides the **World**-space boundary of
 its {{#crossLink "Geometry"}}Geometry's{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}} after
 their transformation by the {{#crossLink "Entity/transform:property"}}Entity's Modelling transform{{/crossLink}}.
 * An {{#crossLink "Entity/viewBoundary:property"}}Entity's viewBoundary{{/crossLink}} provides the **View**-space boundary of
 its {{#crossLink "Geometry"}}Geometry's{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}} after
 their transformation by both the {{#crossLink "Entity/transform:property"}}Entity's Modelling transform{{/crossLink}} **and** {{#crossLink "Camera/view:property"}}Viewing transform{{/crossLink}}.
 * A {{#crossLink "Model/worldBoundary:property"}}Model's worldBoundary{{/crossLink}} provides the **World**-space boundary of all its {{#crossLink "Entity"}}Entities{{/crossLink}}

 The diagram also shows an {{#crossLink "Entity/canvasBoundary:property"}}Entity's canvasBoundary{{/crossLink}}, which is a {{#crossLink "Boundary2D"}}{{/crossLink}} that provides the **Canvas**-space boundary of the {{#crossLink "Geometry"}}Geometry's{{/crossLink}} {{#crossLink "Geometry/positions:property"}}{{/crossLink}} after
 their transformation by the {{#crossLink "Entity/transform:property"}}Entity's Modelling transform{{/crossLink}}, {{#crossLink "Camera/view:property"}}Viewing transform{{/crossLink}}
 and {{#crossLink "Camera/project:property"}}Projection transform{{/crossLink}}.

 <br>
 <img src="../../../assets/images/Boundary3D.png"></img>

 ## Examples

 * [Entity World-space boundary](../../examples/#boundaries_Entity_worldBoundary_aabb)
 * [Entity View-space boundary](../../examples/#boundaries_Entity_viewBoundary_aabb)
 * [Entity Canvas-space boundary](../../examples/#boundaries_Entity_canvasBoundary_aabb)
 * [Flying camera to Entity World-space boundaries](../../examples/#boundaries_flyToBoundary)
 * [Model World-space boundary](../../examples/#boundaries_Model_worldBoundary_aabb)
 * [Following an Entity with a Camera](../../examples/#animation_CameraFollowAnimation)
 * [Following an Entity with a Camera, keeping Entity fitted to view volume](../../examples/#animation_CameraFollowAnimation_fitToView)

 ## Usage

 In the example below we'll get the World-space Boundary3D of an {{#crossLink "Entity"}}{{/crossLink}}, subscribe to updates on the Boundary3D,
 then animate the {{#crossLink "Entity"}}Entity's{{/crossLink}} modelling transform, which gives our callback a running update
 of the moving Boundary3D extents.

 ```` javascript
 // Entity With a Geometry and Transform

 var entity = new xeogl.Entity({
        geometry: new xeogl.BoxGeometry(),
        transform: new xeogl.Translate({
            xyz: [-5, 0, 0]
        })
  });

 // Subscribe to updates to the Boundary3D

 var worldBoundary = entity.worldBoundary;

 worldBoundary.on("updated", function() {
        obb = worldBoundary.obb;
        aabb = worldBoundary.aabb;
        center = worldBoundary.center;
        sphere = worldBoundary.sphere();
        //...
    });

 // Animate the modelling transform;
 // on each tick, this will update the Boundary3D and fire our
 // callback, which enables us to track the changing boundary.

 var x = 0;

 entity.scene.on("tick", function() {
    translate.xyz: [x, 0, 0];
    x += 0.5;
 });
 ````

 @class Boundary3D
 @module xeogl
 @submodule boundaries
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Boundary3D within xeogl's default {{#crossLink "xeogl/scene:property"}}scene{{/crossLink}} by default.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Boundary3D.
 @param [cfg.obb] {Float32Array} Optional initial 3D object-aligned bounding volume (OBB).
 @param [cfg.aabb] {Float32Array} Optional initial 3D axis-aligned bounding volume (AABB).
 @param [cfg.center] {Float32Array} Optional initial 3D center
 @param [cfg.sphere] {Float32Array} Optional initial 3D bounding sphere.
 @param [cfg.getDirty] {Function} Optional callback to check if parent component has new OBB, positions or transform matrix.
 @param [cfg.getOBB] {Function} Optional callback to get new OBB from parent.
 @param [cfg.getMatrix] {Function} Optional callback to get new transform matrix from parent.
 @param [cfg.getPositions] {Function} Optional callback to get new positions from parent.
 @extends Component
 */

/**
 * Fired whenever this Boundary3D's {{#crossLink "Boundary3D/obb:property"}}{{/crossLink}},
 * {{#crossLink "Boundary3D/aabb:property"}}{{/crossLink}}, {{#crossLink "Boundary3D/sphere:property"}}{{/crossLink}}
 * or {{#crossLink "Boundary3D/center:property"}}{{/crossLink}} properties change.
 * @event updated
 */
(function () {

    "use strict";

    xeogl.Boundary3D = xeogl.Component.extend({

        type: "xeogl.Boundary3D",

        _init: function (cfg) {

            // Cached bounding boxes (oriented and axis-aligned)
            this._obb = cfg.obb || null;
            this._aabb = cfg.aabb || null;

            // Cached bounding sphere
            this._sphere = cfg.sphere || null;

            // Cached center point
            this._center = cfg.center || null;

            // Owner injected callbacks to provide
            // resources on lazy-rebuild
            this._getDirty = cfg.getDirty;
            this._getOBB = cfg.getOBB;
            this._getAABB = cfg.getAABB;
            this._getMatrix = cfg.getMatrix;
            this._getPositions = cfg.getPositions;
        },

        _props: {

            /**
             * An oriented box (OBB) representation of this 3D boundary.
             *
             * The OBB is represented by a 32-element Float32Array containing the eight vertices of the box,
             * where each vertex is a homogeneous coordinate having [x,y,z,w] elements.
             *i
             * @property obb
             * @final
             * @type {Float32Array}
             */
            obb: {

                get: function () {

                    if (this._getDirty()) {
                        this._buildBoundary();
                    }

                    return this._obb;
                }
            },

            /**
             * An axis-aligned box (AABB) representation of this 3D boundary.
             *
             * The AABB is represented by a six-element Float32Array containing the min/max extents of the
             * axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.
             *
             * @property aabb
             * @final
             * @type {Float32Array}
             */
            aabb: {

                get: function () {

                    if (this._getDirty()) {
                        this._buildBoundary();
                    }

                    return this._aabb;
                }
            },

            /**
             * The center point of this 3D boundary.
             *
             * The center point is represented by a Float32Array containing elements ````[x,y,z]````.
             *
             * @property center
             * @final
             * @type {Float32Array}
             */
            center: {

                get: function () {

                    if (this._getDirty()) {
                        this._buildBoundary();
                    }

                    return this._center;
                }
            },

            /**
             * A spherical representation of this 3D boundary.
             *
             * The sphere is a four-element Float32Array containing the sphere center and
             * radius, ie: ````[xcenter, ycenter, zcenter, radius ]````.
             *
             * @property sphere
             * @final
             * @type {Float32Array}
             */
            sphere: {

                get: function () {

                    if (this._getDirty()) {
                        this._buildBoundary();
                    }

                    return this._sphere;
                }
            }
        },

        // Builds the obb, aabb, sphere and center.

        _buildBoundary: function () {

            var math = xeogl.math;

            // Lazy-allocate

            if (!this._obb) {
                this._obb = xeogl.math.OBB3();
            }

            if (!this._aabb) {
                this._aabb = xeogl.math.AABB3();
            }

            if (!this._sphere) {
                this._sphere = xeogl.math.vec4();
            }

            if (!this._center) {
                this._center = xeogl.math.vec3();
            }
            
            var aabb = this._getAABB ? this._getAABB() : null;

            if (aabb) {

                // Got AABB

                // Derive OBB, sphere and center

                this._aabb[0] = aabb[0];
                this._aabb[1] = aabb[1];
                this._aabb[2] = aabb[2];
                this._aabb[3] = aabb[3];
                this._aabb[4] = aabb[4];
                this._aabb[5] = aabb[5];

                math.AABB3ToOBB3(this._aabb, this._obb);
                math.OBB3ToSphere3(this._obb, this._sphere);
                math.getSphere3Center(this._sphere, this._center);
                
                return;
            }

            // Get resources through callbacks

            var positions = this._getPositions ? this._getPositions() : null;

            var matrix;

            if (positions) {

                // Got flattened WebGL positions array

                matrix = this._getMatrix ? this._getMatrix() : null;

                if (matrix) {

                    // Got transform matrix

                    // Transform OBB by matrix, derive AABB, sphere and center

                    math.positions3ToAABB3(positions, this._aabb);
                    math.AABB3ToOBB3(this._aabb, this._obb);
                    math.transformOBB3(matrix, this._obb);
                    math.OBB3ToAABB3(this._obb, this._aabb);
                    math.OBB3ToSphere3(this._obb, this._sphere);
                    math.getSphere3Center(this._sphere, this._center);

                    return;
                }

                // No transform matrix

                math.positions3ToAABB3(positions, this._aabb);
                math.AABB3ToOBB3(this._aabb, this._obb);
                math.OBB3ToSphere3(this._obb, this._sphere);
                math.getSphere3Center(this._sphere, this._center);
                
                return
            }

            var obb = this._getOBB ? this._getOBB() : null;

            if (obb) {

                // Got OBB

                matrix = this._getMatrix ? this._getMatrix() : null;

                if (matrix) {

                    // Got transform matrix

                    // Transform OBB by matrix, derive AABB and center

                    math.transformOBB3(matrix, obb, this._obb);
                    math.OBB3ToAABB3(this._obb, this._aabb);
                    math.OBB3ToSphere3(this._obb, this._sphere);
                    math.getSphere3Center(this._sphere, this._center);

                    return;
                }

                // No transform matrix

                // Copy OBB, derive AABB and center

                for (var i = 0, len = obb.length; i < len; i++) {
                    this._obb[i] = obb[i];
                }

                math.OBB3ToAABB3(this._obb, this._aabb);
                math.OBB3ToSphere3(this._obb, this._sphere);
                math.getSphere3Center(this._sphere, this._center);

            }
        },

        _getJSON: function () {
            return {
                obb: this.obb,
                aabb: this.aabb,
                center: this.center,
                sphere: this.sphere
            };
        }
    });

})();
;/**
 * Modelling transform components.
 *
 * @module xeogl
 * @submodule transforms
 */;/**
 A **Transform** is a modelling, viewing or projection transformation.

 ## Overview

 * Sub-classes of Transform include: {{#crossLink "Translate"}}{{/crossLink}},
 {{#crossLink "Scale"}}{{/crossLink}}, {{#crossLink "Rotate"}}{{/crossLink}}, {{#crossLink "Quaternion"}}{{/crossLink}},
 {{#crossLink "Lookat"}}{{/crossLink}}, {{#crossLink "Perspective"}}{{/crossLink}}, {{#crossLink "Frustum"}}{{/crossLink}}
 and {{#crossLink "Ortho"}}{{/crossLink}}.
 * Instances of {{#crossLink "Transform"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.

 * When an {{#crossLink "Entity"}}{{/crossLink}} or {{#crossLink "Model"}}{{/crossLink}} is connected to a leaf {{#crossLink "Transform"}}{{/crossLink}}
 within a {{#crossLink "Transform"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink "Transform"}}{{/crossLink}}
 on the path up to the root, in that order.

 <img src="../../../assets/images/Transform.png"></img>

 ## Examples

 * [Modelling transform hierarchy](../../examples/#transforms_model_hierarchy)
 * [Attaching transforms to Models, via constructor](../../examples/#importing_gltf_techniques_configTransform)
 * [Attaching transforms to Models, via property](../../examples/#importing_gltf_techniques_attachTransform)

 ## Usage

 In this example we'll create the table shown below, which consists of five {{#crossLink "Entity"}}Entities{{/crossLink}}
 that share a {{#crossLink "BoxGeometry"}}{{/crossLink}} and each connect to a different leaf within a hierarchy of
 {{#crossLink "Translate"}}{{/crossLink}}, {{#crossLink "Rotate"}}{{/crossLink}} and {{#crossLink "Scale"}}{{/crossLink}}
 components. Each {{#crossLink "Entity"}}{{/crossLink}} also has its own {{#crossLink "PhongMaterial"}}{{/crossLink}} to
 give it a distinct color.

 <img src="../../../assets/images/transformHierarchy.png"></img>

 ````javascript
 // Shared Geometry
 var boxGeometry = new xeogl.BoxGeometry();

 // Position of entire table
 var tablePos = new xeogl.Translate({
    xyz: [0, 6, 0]
 });

 // Orientation of entire table
 var tableRotate = new xeogl.Rotate({
    xyz: [1, 1, 1],
    angle: 0,
    parent: tablePos
 });

 // Red table leg
 var tableLeg1 = new xeogl.Entity({
    geometry: boxGeometry,
    transform: new xeogl.Scale({
        xyz: [1, 3, 1],
        parent: new xeogl.Translate({
            xyz: [-4, -6, -4],
            parent: tableRotate
        })
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [1, 0.3, 0.3]
    })
 });

 // Green table leg
 var tableLeg2 = new xeogl.Entity({
    geometry: boxGeometry,
    transform: new xeogl.Scale({
        xyz: [1, 3, 1],
        parent: new xeogl.Translate({
            xyz: [4, -6, -4],
            parent: tableRotate
        })
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [0.3, 1.0, 0.3]
    })
 });

 // Blue table leg
 var tableLeg3 = new xeogl.Entity({
    geometry: boxGeometry,
    transform: new xeogl.Scale({
        xyz: [1, 3, 1],
        parent: new xeogl.Translate({
            xyz: [4, -6, 4],
            parent: tableRotate
        })
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [0.3, 0.3, 1.0]
    })
 });

 // Yellow table leg
 var tableLeg4 = new xeogl.Entity({
    geometry: boxGeometry,
    transform: new xeogl.Scale({
        xyz: [1, 3, 1],
        parent: new xeogl.Translate({
            xyz: [-4, -6, 4],
            parent: tableRotate
        })
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [1.0, 1.0, 0.0]
    })
 });

 // Purple table top
 var tableTop = new xeogl.Entity({
    geometry: boxGeometry,
    transform: new xeogl.Scale({
        xyz: [6, 0.5, 6],
        parent: new xeogl.Translate({
            xyz: [0, -3, 0],
            parent: tableRotate
        })
    }),
    material: new xeogl.PhongMaterial({
        diffuse: [1.0, 0.3, 1.0]
    })
 });

 // Zoom camera out a bit
 // Get the Camera from one of the Entities
 tableTop.camera.view.zoom(10);

 // Spin the entire table

 var angle = 0;

 scene.on("tick", function () {
    angle += 0.5;
    tableRotate.angle = angle;
 });
 ````

 @class Transform
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Transform in the
 default {{#crossLink "Scene"}}Scene{{/crossLink}}  when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent {{#crossLink "Scene"}}Scene{{/crossLink}}, generated automatically when omitted.
 You only need to supply an ID if you need to be able to find the Transform by ID within the {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Transform.
 @param [cfg.parent] {String|Transform} ID or instance of a parent Transform within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.postMultiply=true] {Boolean} Flag that indicates whether this Transform is post-multiplied (default) or
 pre-multiplied by its {{#crossLink "Transform/parent:property"}}{{/crossLink}} Transform.
 @param [cfg.matrix=[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]] {Float32Array} One-dimensional, sixteen element array of elements for the Transform, an identity matrix by default.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Transform = xeogl.Component.extend({

        type: "xeogl.Transform",

        _init: function (cfg) {

            this._onParentUpdated = null;
            this._onParentDestroyed = null;

            this._matrix = xeogl.math.identityMat4(xeogl.math.mat4());
            this._leafMatrix = xeogl.math.mat4();
            this._leafNormalMatrix = xeogl.math.mat4();

            this._leafMatrixDirty = true;
            this._leafNormalMatrixDirty = true;

            var self = this;

            this._state = new xeogl.renderer.Transform({

                // Lazy-generate leaf matrices as we render because it's only
                // at this point that we actually know that we need them.

                getMatrix: function () {
                    if (self._leafMatrixDirty) { // TODO: Or schedule matrix rebuild to task queue if not urgent?
                        self._buildLeafMatrix();
                    }
                    return self._leafMatrix;
                },

                getNormalMatrix: function () {
                    if (self._leafNormalMatrixDirty) {
                        self._buildLeafNormalMatrix();
                    }
                    return self._leafNormalMatrix;
                }
            });

            this.parent = cfg.parent;
            this.matrix = cfg.matrix;
            this.postMultiply = cfg.postMultiply;
        },

        _parentUpdated: function () {

            this._leafMatrixDirty = true;

            /**
             * Fired whenever this Transform's {{#crossLink "Transform/leafMatrix:property"}}{{/crossLink}} property changes.
             *
             * This event does not carry the updated property value. Instead, subscribers will need to read
             * that property again to get its updated value (which may be lazy-computed then).
             *
             * @event updated
             */
            this.fire("updated", true);
        },

        // This is called if necessary when reading "leafMatrix", to update that property.
        // It's also called by Entity when the Transform is the leaf to which the
        // Entity is attached, in response to an "updated" event from the Transform.

        _buildLeafMatrix: function () {

            if (!this._leafMatrixDirty) {
                return;
            }

            if (this._build && this._buildScheduled) {
                this._build();
                this._buildScheduled = false;
            }

            if (!this._parent) {

                // No parent Transform

                for (var i = 0, len = this._matrix.length; i < len; i++) {
                    this._leafMatrix[i] = this._matrix[i];
                }

            } else {

                // Multiply parent's leaf matrix by this matrix,
                // store result in this leaf matrix

                if (this._postMultiply) {
                    xeogl.math.mulMat4(this._parent.leafMatrix, this._matrix, this._leafMatrix);
                } else {
                    xeogl.math.mulMat4(this._matrix, this._parent.leafMatrix, this._leafMatrix);
                }
            }

            this._renderer.imageDirty = true;

            this._leafMatrixDirty = false;
            this._leafNormalMatrixDirty = true;
        },

        _buildLeafNormalMatrix: function () {

            if (this._leafMatrixDirty) {
                this._buildLeafMatrix();
            }

            xeogl.math.inverseMat4(this._leafMatrix, this._leafNormalMatrix);
            xeogl.math.transposeMat4(this._leafNormalMatrix);

            this._renderer.imageDirty = true;

            this._leafNormalMatrixDirty = false;
        },

        _props: {

            /**
             * The parent Transform.
             *
             * Fires a {{#crossLink "Transform/parent:event"}}{{/crossLink}} event on change.
             *
             * @property parent
             * @type Transform
             */
            parent: {

                set: function (value) {

                    // Disallow cycle

                    if (value) {

                        var id = this.id;

                        for (var value2 = value; value2; value2 = value2._parent) {

                            if (id === value2.id) {
                                this.error("Not allowed to attach Transform as parent of itself - ignoring");
                                return;
                            }
                        }
                    }

                    // Unsubscribe from old parent's events

                    if (this._parent && (!value || value.id !== this._parent.id)) {
                        this._parent.off(this._onParentUpdated);
                        this._parent.off(this._onParentDestroyed);
                    }

                    this._parent = value;

                    /**
                     * Fired whenever this Transform's {{#crossLink "Transform/parent:property"}}{{/crossLink}} property changes.
                     * @event parent
                     * @param value The property's new value
                     */
                    this.fire("parent", this._parent);

                    if (this._parent) {
                        this._onParentUpdated = this._parent.on("updated", this._parentUpdated, this);
                        this._onParentDestroyed = this._parent.on("destroyed", this._parentUpdated, this);
                    }

                    this._parentUpdated();
                },

                get: function () {
                    return this._parent;
                }
            },

            /**
             * Flag that indicates whether this Transform is post-multiplied (default) or pre-multiplied by
             * its {{#crossLink "Transform/parent:property"}}{{/crossLink}} Transform.
             *
             * Fires an {{#crossLink "Transform/postMultiply:event"}}{{/crossLink}} event on change.
             *
             * @property postMultiply
             * @default true
             * @type Boolean
             */
            postMultiply: {

                set: function (value) {

                    value = value !== false;

                    if (this._postMultiply === value) {
                        return;
                    }

                    this._postMultiply = value;

                    this._leafMatrixDirty = true;

                    this._renderer.imageDirty = true;

                    this.fire("updated", true);

                    /**
                     * Fired whenever this Transform's {{#crossLink "Transform/postMultiply:property"}}{{/crossLink}} property changes.
                     * @event postMultiply
                     * @param value The property's new value
                     */
                    this.fire('postMultiply', this._postMultiply);
                },

                get: function () {
                    return this._postMultiply;
                }
            },

            /**
             * The Transform's local matrix.
             *
             * Fires a {{#crossLink "Transform/matrix:event"}}{{/crossLink}} event on change.
             *
             * @property matrix
             * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
             * @type {Float32Array}
             */
            matrix: {

                set: function (value) {

                    this._matrix.set(value || xeogl.math.identityMat4());

                    this._leafMatrixDirty = true;

                    this._renderer.imageDirty = true;

                    /**
                     * Fired whenever this Transform's {{#crossLink "Transform/matrix:property"}}{{/crossLink}} property changes.
                     * @event matrix
                     * @param value The property's new value
                     */
                    this.fire("matrix", this._matrix);

                    this.fire("updated", true);
                },

                get: function () {

                    if (this._updateScheduled) {
                        this._doUpdate();
                    }

                    return this._matrix;
                }
            },

            /**
             * Returns the product of all {{#crossLink "Transform/matrix:property"}}{{/crossLink}}'s on Transforms
             * on the path via {{#crossLink "Transform/parent:property"}}{{/crossLink}} up to the root.
             *
             * The value of this property will have a fresh value after each
             * {{#crossLink "Transform/updated:property"}}{{/crossLink}} event, which is fired whenever any Transform
             * on the path receives an update for its {{#crossLink "Transform/matrix:property"}}{{/crossLink}} or
             * {{#crossLink "Transform/matrix:property"}}{{/crossLink}} property.
             *
             * @property matrix
             * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
             * @type {Float32Array}
             */
            leafMatrix: {

                get: function () {

                    if (this._leafMatrixDirty) {
                        this._buildLeafMatrix();
                    }

                    return this._leafMatrix;
                }
            }
        },

        _getJSON: function () {
            var json = {
                matrix: Array.prototype.slice.call(this._matrix),
                postMultiply: this._postMultiply
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        },

        _destroy: function () {
            if (this._parent) {
                this._parent.off(this._onParentUpdated);
                this._parent.off(this._onParentDestroyed);
            }
        }
    });

})();
;/**
 A **Rotate** is a {{#crossLink "Transform"}}{{/crossLink}} that rotates associated {{#crossLink "Entity"}}Entities{{/crossLink}} or {{#crossLink "Model"}}Models{{/crossLink}} about an axis vector.

 ## Overview

 * Instances of {{#crossLink "Transform"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.
 * When an {{#crossLink "Entity"}}{{/crossLink}} or {{#crossLink "Model"}}{{/crossLink}} is connected to a leaf {{#crossLink "Transform"}}{{/crossLink}}
 within a {{#crossLink "Transform"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink "Transform"}}{{/crossLink}}
 on the path up to the root, in that order.


 <img src="../../../assets/images/Rotate.png"></img>

 ## Examples

 * Modeling transform hierarchy](../../examples/#transforms_model_hierarchy)

 ## Usage

 In this example we have two {{#crossLink "Entity"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains
 Rotate, {{#crossLink "Translate"}}{{/crossLink}} and {{#crossLink "Scale"}}{{/crossLink}} transforms.
 The Entities share the same {{#crossLink "BoxGeometry"}}{{/crossLink}}.<br>

 ````javascript
 var rotate = new xeogl.Rotate({
    xyz: [0, 1, 0], // Rotate 30 degrees about Y axis
    angle: 30
 });

 var translate1 = new xeogl.Translate({
    parent: rotate,
    xyz: [-5, 0, 0] // Translate along -X axis
 });

 var translate2 = new xeogl.Translate({
    parent: rotate,
    xyz: [5, 0, 0] // Translate along +X axis
 });

 var scale = new xeogl.Scale({
    parent: translate2,
    xyz: [1, 2, 1] // Scale x2 on Y axis
 });

 var geometry = new xeogl.Geometry(scene); // Defaults to a 2x2x2 box

 var Entity1 = new xeogl.Entity({
    transform: translate1,
    geometry: geometry
 });

 var Entity2 = new xeogl.Entity({
    transform: scale,
    geometry: geometry
 });
 ````

 Since everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.

 Let's insert a {{#crossLink "Scale"}}{{/crossLink}} between the first Translate and the first {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 var scale2 = new xeogl.Scale({
    parent: translate1,
    xyz: [1, 1, 2] // Scale x2 on Z axis
 });

 Entity2.transform = scale2;
 ````

 Let's start spinning the {{#crossLink "Rotate"}}{{/crossLink}}:

 ````javascript
 // Rotate 0.2 degrees on each frame
 scene.on("tick", function(e) {
    rotate.angle += 0.2;
 });
 ````
 @class Rotate
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Rotate in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Rotate.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.xyz=[0,1,0]] {Float32Array} Axis of rotation.
 @param [cfg.angle=0] {Number} Angle of rotation in degrees.
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Rotate = xeogl.Transform.extend({

        type: "xeogl.Rotate",

        _init: function (cfg) {

            this._super(cfg);

            this.xyz = cfg.xyz;
            this.angle = cfg.angle;
        },

        _update: function () {
            this.matrix = xeogl.math.rotationMat4v(this._angle * xeogl.math.DEGTORAD, this._xyz, this._matrix);
        },

        _props: {

            /**
             * Vector indicating the axis of rotation.
             *
             * Fires an {{#crossLink "Rotate/xyz:event"}}{{/crossLink}} event on change.
             *
             * @property xyz
             * @default [0,1,0]
             * @type {Float32Array}
             */
            xyz: {

                set: function (value) {

                    (this._xyz = this._xyz || new xeogl.math.vec3()).set(value || [0, 1, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this Rotate's {{#crossLink "Rotate/xyz:property"}}{{/crossLink}} property changes.

                     @event xyz
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("xyz", this._xyz);
                },

                get: function () {
                    return this._xyz;
                }
            },

            /**
             * Angle of rotation in degrees.
             *
             * Fires an {{#crossLink "Rotate/angle:event"}}{{/crossLink}} event on change.
             *
             * @property angle
             * @default 0
             * @type {Number}
             */
            angle: {

                set: function (value) {

                    this._angle = value || 0;

                    this._scheduleUpdate();

                    /**
                     Fired whenever this Rotate's {{#crossLink "Rotate/angle:property"}}{{/crossLink}} property changes.

                     @event angle
                     @param value {Number} The property's new value
                     */
                    this.fire("angle", this._angle);
                },

                get: function () {
                    return this._angle;
                }
            }
        },

        _getJSON: function () {
            var json = {
                xyz: this._xyz,
                angle: this._angle
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        }
    });

})();
;/**
 A **Quaternion** is a {{#crossLink "Transform"}}{{/crossLink}} that rotates associated {{#crossLink "Entity"}}Entities{{/crossLink}} or {{#crossLink "Model"}}Models{{/crossLink}}.

 ## Overview

 * Instances of {{#crossLink "Transform"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.
 * When an {{#crossLink "Entity"}}{{/crossLink}} or {{#crossLink "Model"}}{{/crossLink}} is connected to a
 leaf {{#crossLink "Transform"}}{{/crossLink}} within a {{#crossLink "Transform"}}{{/crossLink}} hierarchy, it will be
 transformed by each {{#crossLink "Transform"}}{{/crossLink}} on the path up to the root, in that order.

 <img src="../../../assets/images/Quaternion.png"></img>

 * Viewing transform hierarchy](../../examples/#transforms_view_hierarchy)

 ## Usage

 In this example we have two {{#crossLink "Entity"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains
 Quaternion, {{#crossLink "Translate"}}{{/crossLink}} and {{#crossLink "Scale"}}{{/crossLink}} transforms.
 The Entities share the same {{#crossLink "BoxGeometry"}}{{/crossLink}}.<br>

 ````javascript
 var quaternion = new xeogl.Quaternion({
    xyzw: [0, 0, 0, 1], // Unit quaternion
 });

 var translate1 = new xeogl.Translate({
   parent: quaternion,
   xyz: [-5, 0, 0] // Translate along -X axis
 });

 var translate2 = new xeogl.Translate({
   parent: quaternion,
   xyz: [5, 0, 0] // Translate along +X axis
 });

 var scale = new xeogl.Scale({
   parent: translate2,
   xyz: [1, 2, 1] // Scale x2 on Y axis
 });

 var geometry = new xeogl.BoxGeometry();

 var entity1 = new xeogl.Entity(scene, {
   transform: translate1,
   geometry: geometry
 });

 var entity2 = new xeogl.Entity({
   transform: scale,
   geometry: geometry
 });
 ````

 Since everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.

 Let's insert a {{#crossLink "Scale"}}{{/crossLink}} between the first Translate and the first {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 var scale2 = new xeogl.Scale({
   parent: translate1,
   xyz: [1, 1, 2] // Scale x2 on Z axis
 });

 Entity2.transform = scale2;
 ````

 Let's spin the Quaternion:

 ````javascript
 // Rotate 0.2 degrees about Y-axis on each frame
 scene.on("tick", function(e) {
        quaternion.rotate([0, 1, 0, 0.2]);
    });
 ````
 @class Quaternion
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Quaternion in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Quaternion.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.xyzw=[0,0,0,1]] {Array(Number)} The initial Quaternion elements.
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Quaternion = xeogl.Transform.extend({

        type: "xeogl.Quaternion",

        _init: function (cfg) {

            this._super(cfg);

            this.xyzw = cfg.xyzw;
        },

        _props: {

            /**

             The quaternion elements.

             Fires an {{#crossLink "Quaternion/xyzw:event"}}{{/crossLink}} event on change.

             @property xyzw
             @default [0,0,0,1]
             @type {Float32Array}
             */
            xyzw: {

                set: function (value) {

                    var math = xeogl.math;

                    (this._xyzw = this._xyzw || new math.vec4()).set(value || math.identityQuaternion());

                    this.matrix = math.quaternionToMat4(this._xyzw, this._matrix || (this._matrix = xeogl.math.identityMat4()));

                    /**
                     Fired whenever this Quaternion's {{#crossLink "Quaternion/xyzw:property"}}{{/crossLink}} property changes.

                     @event xyzw
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("xyzw", this._xyzw);
                },

                get: function () {
                    return this._xyzw;
                }
            }
        },

        /**
         Rotates this Quaternion.
         Fires an {{#crossLink "Quaternion/xyzw:event"}}{{/crossLink}} event to notify of update to the Quaternion elements.
         @method rotate
         @param {Float32Array} angleAxis Rotation in angle-axis form.
         */
        rotate: (function () {

            var math = xeogl.math;
            var tempAngleAxis = math.vec4();
            var tempQuat = math.vec4();

            return function (angleAxis) {

                // TODO: Make API work in radians so we don't have to do this?:

                tempAngleAxis[0] = angleAxis[0];
                tempAngleAxis[1] = angleAxis[1];
                tempAngleAxis[2] = angleAxis[2];
                tempAngleAxis[3] = angleAxis[3] * math.DEGTORAD;

                math.angleAxisToQuaternion(tempAngleAxis, tempQuat);

                this.xyzw = math.mulQuaternions(this._xyzw, tempQuat, this._xyzw);
            };
        })(),

        _getJSON: function () {
            var json = {
                xyzw: this._xyzw
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        }
    });
})();;/**
 A **Scale** is a {{#crossLink "Transform"}}{{/crossLink}} that scales associated {{#crossLink "Entity"}}Entities{{/crossLink}} or {{#crossLink "Model"}}Models{{/crossLink}}.

 ## Overview

 * Instances of {{#crossLink "Transform"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.
 * When an {{#crossLink "Entity"}}{{/crossLink}} or {{#crossLink "Model"}}{{/crossLink}} is connected to a leaf {{#crossLink "Transform"}}{{/crossLink}}
 within a {{#crossLink "Transform"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink "Transform"}}{{/crossLink}}
 on the path up to the root, in that order.

 <img src="../../../assets/images/Scale.png"></img>

 ## Examples

 * Modeling transform hierarchy](../../examples/#transforms_model_hierarchy)
 * Projection transform hierarchy](../../examples/#transforms_project_hierarchy)

 ## Usage

 In this example we have two {{#crossLink "Entity"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains
 {{#crossLink "Rotate"}}{{/crossLink}}, {{#crossLink "Translate"}}{{/crossLink}} and Scale transforms.
 The Entities share the same {{#crossLink "BoxGeometry"}}{{/crossLink}}.<br>

 ````javascript
 var rotate = new xeogl.Rotate({
    xyz: [0, 1, 0], // Rotate 30 degrees about Y axis
    angle: 30
 });

 var translate1 = new xeogl.Translate({
    parent: rotate,
    xyz: [-5, 0, 0] // Translate along -X axis
 });

 var translate2 = new xeogl.Translate({
    parent: rotate,
    xyz: [5, 0, 0] // Translate along +X axis
 });

 var scale = new xeogl.Scale({
    parent: translate2,
    xyz: [1, 2, 1] // Scale x2 on Y axis
 });

 var geometry = new xeogl.BoxGeometry();

 var entity1 = new xeogl.Entity({
    transform: translate1,
    geometry: geometry
 });

 var entity2 = new xeogl.Entity({
    transform: scale,
    geometry: geometry
 });
 ````

 Since everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.

 Let's insert a {{#crossLink "Scale"}}{{/crossLink}} between the first Translate and the first {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 var scale2 = new xeogl.Scale({
    parent: translate1,
    xyz: [1, 1, 2] // Scale x2 on Z axis
 });

 entity2.transform = scale2;
 ````

 And just for fun, we'll start spinning the {{#crossLink "Rotate"}}{{/crossLink}}:

 ````javascript
 // Rotate 0.2 degrees on each frame
 scene.on("tick", function(e) {
    rotate.angle += 0.2;
 });
 ````

 @class Scale
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Scale in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Scale.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.xyz=[1,1,1]] {Float32Array} Scale factors.
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Scale = xeogl.Transform.extend({

        type: "xeogl.Scale",

        _init: function (cfg) {

            this._super(cfg);

            this.xyz = cfg.xyz;
        },

        _update: function () {
            this.matrix = xeogl.math.scalingMat4v(this._xyz, this._matrix);
        },

        _props: {

            /**
             * Vector indicating a scale factor for each axis.
             * Fires an {{#crossLink "Scale/xyz:event"}}{{/crossLink}} event on change.
             * @property xyz
             * @default [1,1,1]
             * @type {Float32Array}
             */
            xyz: {

                set: function (value) {

                    (this._xyz = this._xyz || new xeogl.math.vec3()).set(value || [1, 1, 1]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this Scale's {{#crossLink "Scale/xyz:property"}}{{/crossLink}} property changes.

                     @event xyz
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("xyz", this._xyz);
                },

                get: function () {
                    return this._xyz;
                }
            }
        },

        _getJSON: function () {
            var json = {
                xyz: this._xyz
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        }
    });

})();
;/**
 A **Translate** is a {{#crossLink "Transform"}}{{/crossLink}} that translates associated {{#crossLink "Entity"}}Entities{{/crossLink}} or {{#crossLink "Model"}}Models{{/crossLink}}.

 ## Overview

 * Instances of {{#crossLink "Transform"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.
 * When an {{#crossLink "Entity"}}{{/crossLink}} or {{#crossLink "Model"}}{{/crossLink}} is connected to a leaf {{#crossLink "Transform"}}{{/crossLink}}
 within a {{#crossLink "Transform"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink "Transform"}}{{/crossLink}}
 on the path up to the root, in that order.

 <img src="../../../assets/images/Translate.png"></img>

 ## Examples

 * Modeling transform hierarchy](../../examples/#transforms_model_hierarchy)

 ## Usage

 This example has two {{#crossLink "Entity"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains
 {{#crossLink "Rotate"}}{{/crossLink}}, Translate and {{#crossLink "Scale"}}{{/crossLink}} transforms.
 The Entities share the same {{#crossLink "BoxGeometry"}}{{/crossLink}}.<br>

 ````javascript
 var rotate = new xeogl.Rotate({
    xyz: [0, 1, 0], // Rotate 30 degrees about Y axis
    angle: 30
 });

 var translate1 = new xeogl.Translate({
    parent: rotate,
    xyz: [-5, 0, 0] // Translate along -X axis
 });

 var translate2 = new xeogl.Translate({
    parent: rotate,
    xyz: [5, 0, 0] // Translate along +X axis
 });

 var scale = new xeogl.Scale({
    parent: translate2,
    xyz: [1, 2, 1] // Scale x2 on Y axis
 });

 var geometry = new xeogl.BoxGeometry();

 var Entity1 = new xeogl.Entity({
    transform: translate1,
    geometry: geometry
 });

 var Entity2 = new xeogl.Entity({
    transform: scale,
    geometry: geometry
 });
 ````

 Since everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.

 Let's insert a {{#crossLink "Scale"}}{{/crossLink}} between the first Translate and the first {{#crossLink "Entity"}}{{/crossLink}}:

 ````javascript
 var scale2 = new xeogl.Scale({
    parent: translate1,
    xyz: [1, 1, 2] // Scale x2 on Z axis
 });

 Entity2.transform = scale2;
 ````

 And just for fun, we'll start updating the second {{#crossLink "Translate"}}{{/crossLink}}:

 ````javascript
 // Rotate 0.2 degrees on each frame
 scene.on("tick", function(e) {
    var xyz = translate2.xyz;
    xyz[0] += 0.2;
    translate2.xyz = xyz;
 });
 ````

 @class Translate
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Translate in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Translate.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.xyz=[0,0,0]] {Float32Array} The translation vector
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Translate = xeogl.Transform.extend({

        type: "xeogl.Translate",

        _init: function (cfg) {

            this._super(cfg);

            this.xyz = cfg.xyz;
        },

        _update: function () {
            this.matrix = xeogl.math.translationMat4v(this._xyz, this._matrix);
        },

        _props: {

            /**
             * Vector indicating a translation amount for each axis.
             * Fires an {{#crossLink "Translate/xyz:event"}}{{/crossLink}} event on change.
             * @property xyz
             * @default [0,0,0]
             * @type {Float32Array}
             */
            xyz: {

                set: function (value) {

                    (this._xyz = this._xyz || new xeogl.math.vec3()).set(value || [0, 0, 0]);

                    this._scheduleUpdate();

                    /**
                     Fired whenever this Translate's {{#crossLink "Translate/xyz:property"}}{{/crossLink}} property changes.
                     @event xyz
                     @param value {Float32Array} The property's new value
                     */
                    this.fire("xyz", this._xyz);
                },

                get: function () {
                    return this._xyz;
                }
            }
        },

        _getJSON: function () {
            var json = {
                xyz: this._xyz
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        }
    });

})();
;/**
 A **Billboard** is a modelling {{#crossLink "Transform"}}{{/crossLink}} that causes associated {{#crossLink "Entity"}}Entities{{/crossLink}} to be always oriented towards the Camera.

 <a href="../../examples/#billboards_spherical"><img src="https://i.giphy.com/l3vR13LcnTuQGMInu.gif"></img></a>

 ## Overview

 * **Spherical** billboards are free to rotate their {{#crossLink "Entity"}}Entities{{/crossLink}} in any direction and always face the {{#crossLink "Camera"}}{{/crossLink}} perfectly.
 * **Cylindrical** billboards rotate their {{#crossLink "Entity"}}Entities{{/crossLink}} towards the {{#crossLink "Camera"}}{{/crossLink}}, but only about the Y-axis.
 * A Billboard will cause {{#crossLink "Scale"}}{{/crossLink}} transformations to have no effect on its {{#crossLink "Entity"}}Entities{{/crossLink}}

 <img src="../../../assets/images/Billboard.png"></img>

 ## Examples

 * [Spherical billboards](../../examples/#billboards_spherical)
 * [Cylindrical billboards](../../examples/#billboards_cylindrical)
 * [Clouds using billboards](../../examples/#billboards_spherical_clouds)
 * [Spherical billboards with video textures](../../examples/#billboards_spherical_video)

 ## Usage

 Let's create 1000 randomly-positioned {{#crossLink "Entity"}}Entities{{/crossLink}} that always face towards the
 viewpoint as we orbit the {{#crossLink "Camera"}}{{/crossLink}} about the X and Y axis:

 ```` javascript
 // Create 1000 Entities in default Scene with shared Geometry, PhongMaterial and Billboard

 var geometry = new xeogl.Geometry({
     primitive: "triangles",
     positions: [3, 3, 0, -3, 3, 0, -3, -3, 0, 3, -3, 0],
     normals: [-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0],
     uv: [1, 1, 0, 1, 0, 0, 1, 0],
     indices: [2, 1, 0, 3, 2, 0] // Ensure these will be front-faces
 });

 var material = new xeogl.PhongMaterial({
     emissiveMap: new xeogl.Texture({
         src: "textures/diffuse/teapot.jpg"
     })
 });

 var billboard = new xeogl.Billboard({
     spherical: true
 });

 for (var i = 0; i < 1000; i++) {
     new xeogl.Entity({
         geometry: geometry,
         material: material,
         billboard: billboard,
         transform: new xeogl.Translate({
             xyz: [Math.random() * 100 - 50, Math.random() * 100 - 50, Math.random() * 100 - 50]
         })
     });
 }

 // Move eye back to see everything, then orbit the Camera

 var scene = xeogl.scene;

 scene.camera.view.zoom(120);

 scene.on("tick", function () {

          var view = scene.camera.view;

          view.rotateEyeY(0.2);
          view.rotateEyeX(0.1);
     });
 ````

 @class Billboard
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Billboard in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Billboard.
 @param [cfg.active=true] {Boolean} Indicates if this Billboard is active or not.
 @param [cfg.spherical=true] {Boolean} Indicates if this Billboard is spherical (true) or cylindrical (false).
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Billboard = xeogl.Component.extend({

        type: "xeogl.Billboard",

        _init: function (cfg) {

            this._super(cfg);

            this._state = new xeogl.renderer.Billboard({
                active: true,
                spherical: true,
                hash: "a;s;"
            });

            this.active = cfg.active !== false;
            this.spherical = cfg.spherical !== false;
        },

        _props: {

            /**
             * Flag which indicates whether this Billboard is active or not.
             *
             * Fires an {{#crossLink "Billboard/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    value = !!value;

                    if (this._state.active === value) {
                        return;
                    }

                    this._state.active = value;

                    this._state.hash = (this._state.active ? "a;" : ";") + (this._state.spherical ? "s;" : ";");

                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Billboard's {{#crossLink "Billboard/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._state.active);
                },

                get: function () {
                    return this._state.active;
                }
            },

            /**
             * Flag which indicates whether this Billboard is spherical (true) or cylindrical (false).
             *
             * Fires an {{#crossLink "Billboard/spherical:event"}}{{/crossLink}} event on change.
             *
             * @property spherical
             * @type Boolean
             */
            spherical: {

                set: function (value) {

                    value = !!value;

                    if (this._state.spherical === value) {
                        return;
                    }

                    this._state.spherical = value;

                    this._state.hash = (this._state.active ? "a;" : ";") + (this._state.spherical ? "s;" : ";");

                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Billboard's {{#crossLink "Billboard/spherical:property"}}{{/crossLink}} property changes.
                     * @event spherical
                     * @param value The property's new value
                     */
                    this.fire('spherical', this._state.spherical);
                },

                get: function () {
                    return this._state.spherical;
                }
            }
        },

        _compile: function () {
            this._renderer.billboard = this._state;
        },


        _getJSON: function () {
            return {
                active: this._state.active
            };
        }
    });

})();
;/**
 A **Stationary** disables the effect of {{#crossLink "Lookat"}}view transform{{/crossLink}} translations for
 associated {{#crossLink "Entity"}}Entities{{/crossLink}} or {{#crossLink "Model"}}Models{{/crossLink}}.

 ## Overview

 <img src="../../../assets/images/Stationary.png"></img>

 ## Examples

 * [Custom Skybox using a Stationary component](../../examples/#skyboxes_customSkybox)

 ## Usage

 An {{#crossLink "Entity"}}{{/crossLink}} with a Stationary that will cause it to never translate with respect to
 the viewpoint, as if far away.

 ````javascript
 new xeogl.Entity({

     geometry: new xeogl.BoxGeometry({
         xSize: 1,
         ySize: 1,
         zSize: 1
     }),

     material: new xeogl.PhongMaterial({
         diffuseMap: new xeogl.Texture({
            src: "textures/diffuse/uvGrid2.jpg"
         })
     }),

     stationary: new xeogl.Stationary({ // Locks position with respect to viewpoint
         active: true
     })
 });
 ````

 @class Stationary
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Stationary in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Stationary.
 @param [cfg.active=true] {Boolean} Indicates if this Stationary is active or not.
 @extends Component
 */
(function () {

    "use strict";

    xeogl.Stationary = xeogl.Component.extend({

        type: "xeogl.Stationary",

        _init: function (cfg) {

            this._super(cfg);

            this._state = new xeogl.renderer.Stationary({
                active: true
            });

            this.active = cfg.active !== false;
        },

        _props: {

            /**
             * Flag which indicates whether this Stationary is active or not.
             *
             * Fires an {{#crossLink "Stationary/active:event"}}{{/crossLink}} event on change.
             *
             * @property active
             * @type Boolean
             */
            active: {

                set: function (value) {

                    value = !!value;

                    if (this._state.active === value) {
                        return;
                    }

                    this._state.active = value;

                    this._state.hash = (this._state.active ? "a;" : ";");

                    this.fire("dirty", true);

                    /**
                     * Fired whenever this Stationary's {{#crossLink "Stationary/active:property"}}{{/crossLink}} property changes.
                     * @event active
                     * @param value The property's new value
                     */
                    this.fire('active', this._state.active);
                },

                get: function () {
                    return this._state.active;
                }
            }
        },

        _compile: function () {
            this._renderer.stationary = this._state;
        },


        _getJSON: function () {
            return {
                active: this._state.active
            };
        }
    });

})();
;/**
 A **Frustum** is a {{#crossLink "Transform"}}{{/crossLink}} that defines a perspective projection as a frustum-shaped view volume.

 ## Overview

 * {{#crossLink "Camera"}}Camera{{/crossLink}} components pair these with viewing transform components, such as
 {{#crossLink "Lookat"}}Lookat{{/crossLink}}, to define viewpoints for attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * A Frustum lets us explicitly set the positions of the left, right, top, bottom, near and far planes, which is useful
 for asymmetrical view volumes, such as those used for stereo viewing.
 * An Frustum's {{#crossLink "Frustum/near:property"}}{{/crossLink}} and {{#crossLink "Frustum/far:property"}}{{/crossLink}} properties
 specify the distances to the WebGL clipping planes.
 * Use {{#crossLink "Ortho"}}{{/crossLink}} if you just want to specify the X,Y frustum extents with a single scale factor,
 ie. without individually specifying the distance to each frustum plane.
 * Use {{#crossLink "Perspective"}}{{/crossLink}} if you need perspective projection.

 <img src="../../../assets/images/Frustum.png"></img>

 ## Examples

 * [Camera with frustum projection](../../examples/#transforms_project_frustum)
 * [Stereo viewing with frustum projection](../../examples/#effects_stereo)

 ## Usage

 ````Javascript
 new xeogl.Entity({

     camera: xeogl.Camera({

        view: new xeogl.Lookat({
            eye: [0, 0, -4],
            look: [0, 0, 0],
            up: [0, 1, 0]
        }),

        project: new xeogl.Frustum(scene, {
            left: -0.1,
            right: 0.1,
            bottom: -0.1,
            top: 0.1,
            near: 0.15,
            far: 1000
        })
     }),

     geometry: new xeogl.BoxGeometry()
 });
 ````

 @class Frustum
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this Frustum within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Frustum.
 @param [cfg.left=-1] {Number} Position of the Frustum's left plane on the View-space X-axis.
 @param [cfg.right=1] {Number} Position of the Frustum's right plane on the View-space X-axis.
 @param [cfg.bottom=-1] {Number} Position of the Frustum's bottom plane on the View-space Y-axis.
 @param [cfg.top=1] {Number} Position of the Frustum's top plane on the View-space Y-axis.
 @param [cfg.near=0.1] {Number} Position of the Frustum's near plane on the View-space Z-axis.
 @param [cfg.far=1000] {Number} Position of the Frustum's far plane on the positive View-space Z-axis.
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Frustum = xeogl.Transform.extend({

        type: "xeogl.Frustum",

        _init: function (cfg) {

            this._super(cfg);

            this._left = -1.0;
            this._right = 1.0;
            this._bottom = -1.0;
            this._top = 1.0;
            this._near = 0.1;
            this._far = 10000.0;

            // Set component properties

            this.left = cfg.left;
            this.right = cfg.right;
            this.bottom = cfg.bottom;
            this.top = cfg.top;
            this.near = cfg.near;
            this.far = cfg.far;
        },

        _update: function () {
            this.matrix = xeogl.math.frustumMat4(
                this._left,
                this._right,
                this._bottom,
                this._top,
                this._near,
                this._far,
                this._matrix);
        },

        _props: {

            /**
             Position of this Frustum's left plane on the View-space X-axis.

             Fires a {{#crossLink "Frustum/left:event"}}{{/crossLink}} event on change.

             @property left
             @default -1.0
             @type Number
             */
            left: {

                set: function (value) {

                    this._left = (value !== undefined && value !== null) ? value : -1.0;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Frustum's {{#crossLink "Frustum/left:property"}}{{/crossLink}} property changes.
                     *
                     * @event left
                     * @param value The property's new value
                     */
                    this.fire("left", this._left);
                },

                get: function () {
                    return this._left;
                }
            },

            /**
             * Position of this Frustum's right plane on the View-space X-axis.
             *
             * Fires a {{#crossLink "Frustum/right:event"}}{{/crossLink}} event on change.
             *
             * @property right
             * @default 1.0
             * @type Number
             */
            right: {

                set: function (value) {

                    this._right = (value !== undefined && value !== null) ? value : 1.0;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Frustum's {{#crossLink "Frustum/right:property"}}{{/crossLink}} property changes.
                     *
                     * @event right
                     * @param value The property's new value
                     */
                    this.fire("right", this._right);
                },

                get: function () {
                    return this._right;
                }
            },

            /**
             * Position of this Frustum's top plane on the View-space Y-axis.
             *
             * Fires a {{#crossLink "Frustum/top:event"}}{{/crossLink}} event on change.
             *
             * @property top
             * @default 1.0
             * @type Number
             */
            top: {

                set: function (value) {

                    this._top = (value !== undefined && value !== null) ? value : 1.0;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Frustum's   {{#crossLink "Frustum/top:property"}}{{/crossLink}} property changes.
                     *
                     * @event top
                     * @param value The property's new value
                     */
                    this.fire("top", this._top);
                },

                get: function () {
                    return this._top;
                }
            },

            /**
             * Position of this Frustum's bottom plane on the View-space Y-axis.
             *
             * Fires a {{#crossLink "Frustum/bottom:event"}}{{/crossLink}} event on change.
             *
             * @property bottom
             * @default -1.0
             * @type Number
             */
            bottom: {

                set: function (value) {

                    this._bottom = (value !== undefined && value !== null) ? value : -1.0;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Frustum's   {{#crossLink "Frustum/bottom:property"}}{{/crossLink}} property changes.
                     *
                     * @event bottom
                     * @param value The property's new value
                     */
                    this.fire("bottom", this._bottom);
                },

                get: function () {
                    return this._bottom;
                }
            },

            /**
             * Position of this Frustum's near plane on the positive View-space Z-axis.
             *
             * Fires a {{#crossLink "Frustum/near:event"}}{{/crossLink}} event on change.
             *
             * @property near
             * @default 0.1
             * @type Number
             */
            near: {

                set: function (value) {

                    this._near = (value !== undefined && value !== null) ? value : 0.1;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Frustum's {{#crossLink "Frustum/near:property"}}{{/crossLink}} property changes.
                     *
                     * @event near
                     * @param value The property's new value
                     */
                    this.fire("near", this._near);
                },

                get: function () {
                    return this._near;
                }
            },

            /**
             * Position of this Frustum's far plane on the positive View-space Z-axis.
             *
             * Fires a {{#crossLink "Frustum/far:event"}}{{/crossLink}} event on change.
             *
             * @property far
             * @default 10000.0
             * @type Number
             */
            far: {

                set: function (value) {

                    this._far = (value !== undefined && value !== null) ? value : 10000.0;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Frustum's  {{#crossLink "Frustum/far:property"}}{{/crossLink}} property changes.
                     *
                     * @event far
                     * @param value The property's new value
                     */
                    this.fire("far", this._far);
                },

                get: function () {
                    return this._far;
                }
            }
        },

        _getJSON: function () {
            var json = {
                left: this._left,
                right: this._right,
                top: this._top,
                bottom: this._bottom,
                near: this._near,
                far: this._far
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        }
    });
})();
;/**
 A **Lookat** is a {{#crossLink "Transform"}}{{/crossLink}} that defines a viewing transform as an {{#crossLink "Lookat/eye:property"}}eye{{/crossLink}} position, a
 {{#crossLink "Lookat/look:property"}}look{{/crossLink}} position and an {{#crossLink "Lookat/up:property"}}up{{/crossLink}}
 vector.

 ## Overview

 * {{#crossLink "Camera"}}Camera{{/crossLink}} components pair these with projection transforms such as
 {{#crossLink "Perspective"}}Perspective{{/crossLink}}, to define viewpoints on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.

 <img src="../../../assets/images/Lookat.png"></img>

 ## Examples

 * [Camera with Lookat and Perspective](../../examples/#transforms_project_perspective)

 ## Usage

 ````Javascript
 new xeogl.Entity({

     camera: xeogl.Camera({

        view: new xeogl.Lookat({
            eye: [0, 0, 4],
            look: [0, 0, 0],
            up: [0, 1, 0]
        }),

        project: new xeogl.Perspective({
            fovy: 60,
            near: 0.1,
            far: 1000
        })
     }),

     geometry: new xeogl.BoxGeometry()
 });
 ````

 @class Lookat
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}} - creates this Lookat in the default
 {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Lookat.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.eye=[0,0,10]] {Array of Number} Eye position.
 @param [cfg.look=[0,0,0]] {Array of Number} The position of the point-of-interest we're looking at.
 @param [cfg.up=[0,1,0]] {Array of Number} The "up" vector.
 @param [cfg.gimbalLockY=false] {Boolean} Effectively whether Y-axis rotation is about the World-space Y-axis or the View-space Y-axis.
 @extends Transform
 @author xeolabs / https://xeolabs.com/
 */
(function () {

    "use strict";

    var math = xeogl.math;

    var tempVec3 = math.vec3();
    var tempVec3b = math.vec3();
    var tempVec3c = math.vec3();
    var tempVec3d = math.vec3();
    var tempVec3e = math.vec3();
    var tempVec3f = math.vec3();

    xeogl.Lookat = xeogl.Transform.extend({

        type: "xeogl.Lookat",

        _init: function (cfg) {

            this._super(cfg);

            this._eye = math.vec3([0, 0, 10.0]);
            this._look = math.vec3([0, 0, 0]);
            this._up = math.vec3([0, 1, 0]);

            this.eye = cfg.eye;
            this.look = cfg.look;
            this.up = cfg.up;
            this.gimbalLockY = cfg.gimbalLockY;
        },

        _update: (function () {

            var lookatMat = math.mat4();

            return function () {

                math.lookAtMat4v(this._eye, this._look, this._up, lookatMat);

                this.matrix = lookatMat;
            };
        })(),


        /**
         * Rotate 'eye' about 'look', around the 'up' vector
         *
         * @param {Number} angle Angle of rotation in degrees
         */
        rotateEyeY: function (angle) {

            // Get 'look' -> 'eye' vector
            var eye2 = math.subVec3(this._eye, this._look, tempVec3);

            var mat = math.rotationMat4v(angle * 0.0174532925, this._gimbalLockY ? math.vec3([0, 1, 0]) : this._up);
            eye2 = math.transformPoint3(mat, eye2, tempVec3b);

            // Set eye position as 'look' plus 'eye' vector
            this.eye = math.addVec3(eye2, this._look, tempVec3c);

            if (this._gimbalLockY) {

                // Rotate 'up' vector about orthogonal vector
                this.up = math.transformPoint3(mat, this._up, tempVec3d);
            }
        },

        /**
         * Rotate 'eye' about 'look' around the X-axis
         *
         * @param {Number} angle Angle of rotation in degrees
         */
        rotateEyeX: function (angle) {

            // Get 'look' -> 'eye' vector
            var eye2 = math.subVec3(this._eye, this._look, tempVec3);

            // Get orthogonal vector from 'eye' and 'up'
            var left = math.cross3Vec3(math.normalizeVec3(eye2, tempVec3b), math.normalizeVec3(this._up, tempVec3c));

            // Rotate 'eye' vector about orthogonal vector
            var mat = math.rotationMat4v(angle * 0.0174532925, left);
            eye2 = math.transformPoint3(mat, eye2, tempVec3d);

            // Set eye position as 'look' plus 'eye' vector
            this.eye = math.addVec3(eye2, this._look, tempVec3e);

            // Rotate 'up' vector about orthogonal vector
            this.up = math.transformPoint3(mat, this._up, tempVec3f);
        },

        /**
         * Rotate 'look' about 'eye', around the 'up' vector
         *
         * <p>Applies constraints added with {@link #addConstraint}.</p>
         *
         * @param {Number} angle Angle of rotation in degrees
         */
        rotateLookY: function (angle) {

            // Get 'look' -> 'eye' vector
            var look2 = math.subVec3(this._look, this._eye, tempVec3);

            // Rotate 'look' vector about 'up' vector
            var mat = math.rotationMat4v(angle * 0.0174532925, this._up);
            look2 = math.transformPoint3(mat, look2, tempVec3b);

            // Set look position as 'look' plus 'eye' vector
            this.look = math.addVec3(look2, this._eye, tempVec3c);
        },

        /**
         * Rotate 'eye' about 'look' around the X-axis
         *
         * @param {Number} angle Angle of rotation in degrees
         */
        rotateLookX: function (angle) {

            // Get 'look' -> 'eye' vector
            var look2 = math.subVec3(this._look, this._eye, tempVec3);

            // Get orthogonal vector from 'eye' and 'up'
            var left = math.cross3Vec3(math.normalizeVec3(look2, tempVec3b), math.normalizeVec3(this._up, tempVec3c));

            // Rotate 'look' vector about orthogonal vector
            var mat = math.rotationMat4v(angle * 0.0174532925, left);
            look2 = math.transformPoint3(mat, look2, tempVec3d);

            // Set eye position as 'look' plus 'eye' vector
            this.look = math.addVec3(look2, this._eye, tempVec3e);

            // Rotate 'up' vector about orthogonal vector
            this.up = math.transformPoint3(mat, this._up, tempVecf);
        },

        /**
         * Pans the camera along X and Y axis.
         * @param pan The pan vector
         */
        pan: function (pan) {

            // Get 'look' -> 'eye' vector
            var eye2 = math.subVec3(this._eye, this._look, tempVec3);

            // Building this pan vector
            var vec = [0, 0, 0];
            var v;

            if (pan[0] !== 0) {

                // Pan along orthogonal vector to 'look' and 'up'

                var left = math.cross3Vec3(math.normalizeVec3(eye2, []), math.normalizeVec3(this._up, tempVec3b));

                v = math.mulVec3Scalar(left, pan[0]);

                vec[0] += v[0];
                vec[1] += v[1];
                vec[2] += v[2];
            }

            if (pan[1] !== 0) {

                // Pan along 'up' vector

                v = math.mulVec3Scalar(math.normalizeVec3(this._up, tempVec3c), pan[1]);

                vec[0] += v[0];
                vec[1] += v[1];
                vec[2] += v[2];
            }

            if (pan[2] !== 0) {

                // Pan along 'eye'- -> 'look' vector

                v = math.mulVec3Scalar(math.normalizeVec3(eye2, tempVec3d), pan[2]);

                vec[0] += v[0];
                vec[1] += v[1];
                vec[2] += v[2];
            }

            this.eye = math.addVec3(this._eye, vec, tempVec3e);
            this.look = math.addVec3(this._look, vec, tempVec3f);
        },

        /**
         * Increments/decrements zoom factor, ie. distance between eye and look.
         * @param delta
         */
        zoom: function (delta) {

            var vec = math.subVec3(this._eye, this._look, tempVec3); // Get vector from eye to look
            var lenLook = Math.abs(math.lenVec3(vec, tempVec3b));    // Get len of that vector
            var newLenLook = Math.abs(lenLook + delta);         // Get new len after zoom

            var dir = math.normalizeVec3(vec, tempVec3c);  // Get normalised vector

            this.eye = math.addVec3(this._look, math.mulVec3Scalar(dir, newLenLook), tempVec3d);
        },

        _props: {

            /**
             * Effectively whether Y-axis rotation is about the World-space Y-axis or the View-space Y-axis.
             *
             * Fires a {{#crossLink "Lookat/gimbalLockY:event"}}{{/crossLink}} event on change.
             *
             * @property gimbalLockY
             * @default false
             * @type Boolean
             */
            gimbalLockY: {

                set: function (value) {

                    value = value !== false;

                    this._gimbalLockY = value;

                    /**
                     * Fired whenever this Lookat's  {{#crossLink "Lookat/gimbalLockY:property"}}{{/crossLink}} property changes.
                     *
                     * @event gimbalLockY
                     * @param value The property's new value
                     */
                    this.fire("gimbalLockY", this._gimbalLockY);
                },

                get: function () {
                    return this._gimbalLockY;
                }
            },

            /**
             * Position of this Lookat's eye.
             *
             * Fires an {{#crossLink "Lookat/eye:event"}}{{/crossLink}} event on change.
             *
             * @property eye
             * @default [0,0,10]
             * @type Float32Array
             */
            eye: {

                set: function (value) {

                    this._eye.set(value || [0, 0, 10]);

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Lookat's  {{#crossLink "Lookat/eye:property"}}{{/crossLink}} property changes.
                     *
                     * @event eye
                     * @param value The property's new value
                     */
                    this.fire("eye", this._eye);
                },

                get: function () {
                    return this._eye;
                }
            },

            /**
             * Position of this Lookat's point-of-interest.
             *
             * Fires a {{#crossLink "Lookat/look:event"}}{{/crossLink}} event on change.
             *
             * @property look
             * @default [0,0,0]
             * @type Float32Array
             */
            look: {

                set: function (value) {

                    this._look.set(value || [0, 0, 0]);

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick";

                    /**
                     * Fired whenever this Lookat's  {{#crossLink "Lookat/look:property"}}{{/crossLink}} property changes.
                     *
                     * @event look
                     * @param value The property's new value
                     */
                    this.fire("look", this._look);
                },

                get: function () {
                    return this._look;
                }
            },

            /**
             * Direction of the "up" vector.
             * Fires an {{#crossLink "Lookat/up:event"}}{{/crossLink}} event on change.
             * @property up
             * @default [0,1,0]
             * @type Float32Array
             */
            up: {

                set: function (value) {

                    this._up.set(value || [0, 1, 0]);

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Lookat's  {{#crossLink "Lookat/up:property"}}{{/crossLink}} property changes.
                     *
                     * @event up
                     * @param value The property's new value
                     */
                    this.fire("up", this._up);
                },

                get: function () {
                    return this._up;
                }
            }
        },

        _getJSON: function () {
            var json = {
                eye: this._eye.slice(),
                look: this._look.slice(),
                up: this._up.slice(),
                gimbalLockY: this._gimbalLockY
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        }
    });

})();
;/**
 An **Ortho** is a {{#crossLink "Transform"}}{{/crossLink}} that defines an orthographic projection transform.

 ## Overview

 * {{#crossLink "Camera"}}Camera{{/crossLink}} components pair these with viewing transform components, such as
 {{#crossLink "Lookat"}}Lookat{{/crossLink}}, to define viewpoints on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * An Ortho works like Blender's orthographic projection, where the positions of the left, right, top and bottom planes are
 implicitly specified with a single {{#crossLink "Ortho/scale:property"}}{{/crossLink}} property, which causes the frustum to be symmetrical on X and Y axis, large enough to
 contain the number of units given by {{#crossLink "Ortho/scale:property"}}{{/crossLink}}.
 * An Ortho's {{#crossLink "Ortho/near:property"}}{{/crossLink}} and {{#crossLink "Ortho/far:property"}}{{/crossLink}} properties
 specify the distances to the WebGL clipping planes.
 * Use {{#crossLink "Frustum"}}{{/crossLink}} if you need to individually specify the position of each of the frustum
 planes, eg. for an asymmetrical view volume, such as those used for stereo viewing.
 * Use {{#crossLink "Perspective"}}{{/crossLink}} if you need perspective projection.

 <img src="../../../assets/images/Ortho.png"></img>

 ## Examples

 * [Camera with orthographic projection](../../examples/#transforms_project_ortho)

 ## Usage

 ````Javascript
 new xeogl.Entity({

     camera: xeogl.Camera({

         view: new xeogl.Lookat({
             eye: [0, 0, -4],
             look: [0, 0, 0],
             up: [0, 1, 0]
         }),

         project: new xeogl.Ortho(scene, {
             scale: 100.0,  // Fit at least 100 units within the ortho volume X & Y extents
             near: 0.1,
             far: 1000
         })
     }),

     geometry: new xeogl.BoxGeometry()
 });
 ````

 @class Ortho
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this Ortho within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Ortho.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.scale=1.0] {Number} Scale factor for this Ortho's extents on X and Y axis.
 @param [cfg.near=0.1] {Number} Position of the near plane on the View-space Z-axis.
 @param [cfg.far=10000] {Number} Position of the far plane on the positive View-space Z-axis.
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Ortho = xeogl.Transform.extend({

        type: "xeogl.Ortho",

        _init: function (cfg) {

            this._super(cfg);

            this.scale = cfg.scale;
            this.near = cfg.near;
            this.far = cfg.far;

            this._onCanvasBoundary = this.scene.canvas.on("boundary", this._scheduleUpdate, this);
        },

        _update: function () {

            var scene = this.scene;
            var scale = this._scale;
            var canvas = scene.canvas.canvas;
            var canvasWidth = canvas.clientWidth;
            var canvasHeight = canvas.clientHeight;
            var halfSize = 0.5 * scale;
            var aspect = canvasWidth / canvasHeight;

            var left;
            var right;
            var top;
            var bottom;

            if (canvasWidth > canvasHeight) {
                left = -halfSize;
                right = halfSize;
                top = halfSize / aspect;
                bottom = -halfSize / aspect;

            } else {
                left = -halfSize * aspect;
                right = halfSize * aspect;
                top = halfSize;
                bottom = -halfSize;
            }

            this.matrix = xeogl.math.orthoMat4c( // Assign to xeogl.Projection#matrix
                left, right, bottom, top, this._near, this._far, this.__tempMat || (this.__tempMat = xeogl.math.mat4()));
        },

        _props: {

            /**
             * Scale factor for this Ortho's extents on X and Y axis.
             *
             * Fires a {{#crossLink "Ortho/scale:event"}}{{/crossLink}} event on change.
             *
             * @property scale
             * @default 1.0
             * @type Number
             */
            scale: {

                set: function (value) {

                    this._scale = (value !== undefined && value !== null) ? value : 1.0;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Ortho's {{#crossLink "Ortho/scale:property"}}{{/crossLink}} property changes.
                     *
                     * @event scale
                     * @param value The property's new value
                     */
                    this.fire("scale", this._scale);
                },

                get: function () {
                    return this._scale;
                }
            },

            /**
             * Position of this Ortho's near plane on the positive View-space Z-axis.
             *
             * Fires a {{#crossLink "Ortho/near:event"}}{{/crossLink}} event on change.
             *
             * @property near
             * @default 0.1
             * @type Number
             */
            near: {

                set: function (value) {

                    this._near = (value !== undefined && value !== null) ? value : 0.1;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Ortho's  {{#crossLink "Ortho/near:property"}}{{/crossLink}} property changes.
                     *
                     * @event near
                     * @param value The property's new value
                     */
                    this.fire("near", this._near);
                },

                get: function () {
                    return this._near;
                }
            },

            /**
             * Position of this Ortho's far plane on the positive View-space Z-axis.
             *
             * Fires a {{#crossLink "Ortho/far:event"}}{{/crossLink}} event on change.
             *
             * @property far
             * @default 10000.0
             * @type Number
             */
            far: {

                set: function (value) {

                    this._far = (value !== undefined && value !== null) ? value : 10000.0;

                    this._scheduleUpdate();

                    /**
                     * Fired whenever this Ortho's {{#crossLink "Ortho/far:property"}}{{/crossLink}} property changes.
                     *
                     * @event far
                     * @param value The property's new value
                     */
                    this.fire("far", this._far);
                },

                get: function () {
                    return this._far;
                }
            }
        },

        _getJSON: function () {
            var json = {
                scale: this._scale,
                near: this._near,
                far: this._far
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        },

        _destroy: function () {
            this._super();
            this.scene.canvas.off(this._onCanvasBoundary);
        }
    });

})();
;/**
 A **Perspective** is a {{#crossLink "Transform"}}{{/crossLink}} that defines a perspective projection transform.

 ## Overview

 * {{#crossLink "Camera"}}Camera{{/crossLink}} components pair these with viewing transform components, such as
 {{#crossLink "Lookat"}}Lookat{{/crossLink}}, to define viewpoints on attached {{#crossLink "Entity"}}Entities{{/crossLink}}.
 * Alternatively, use {{#crossLink "Ortho"}}{{/crossLink}} if you need a orthographic projection.

 <img src="../../../assets/images/Perspective.png"></img>

 ## Examples

 * [Camera with perspective projection](../../examples/#transforms_project_perspective)

 ## Usage

 ````Javascript
 new xeogl.Entity({

     camera: xeogl.Camera({

        view: new xeogl.Lookat({
            eye: [0, 0, -4],
            look: [0, 0, 0],
            up: [0, 1, 0]
        }),

        project: new xeogl.Perspective({
            fovy: 60,
            near: 0.1,
            far: 1000
        })
     }),

     perspective: new xeogl.BoxGeometry()
 });
 ````

 @class Perspective
 @module xeogl
 @submodule transforms
 @constructor
 @param [scene] {Scene} Parent {{#crossLink "Scene"}}Scene{{/crossLink}}, creates this Perspective within the
 default {{#crossLink "Scene"}}Scene{{/crossLink}} when omitted.
 @param [cfg] {*} Configs
 @param [cfg.id] {String} Optional ID, unique among all components in the parent scene, generated automatically when omitted.
 @param [cfg.meta] {String:Object} Optional map of user-defined metadata to attach to this Perspective.
 @param [cfg.parent] {String|Transform} ID or instance of a parent {{#crossLink "Transform"}}{{/crossLink}} within the same {{#crossLink "Scene"}}Scene{{/crossLink}}.
 @param [cfg.fovy=60.0] {Number} Field-of-view angle, in degrees, on Y-axis.
 @param [cfg.near=0.1] {Number} Position of the near plane on the View-space Z-axis.
 @param [cfg.far=10000] {Number} Position of the far plane on the View-space Z-axis.
 @extends Transform
 */
(function () {

    "use strict";

    xeogl.Perspective = xeogl.Transform.extend({

        type: "xeogl.Perspective",

        _init: function (cfg) {

            this._super(cfg);

            this._dirty = false;
            this._fovy = 60.0;
            this._near = 0.1;
            this._far = 10000.0;

            // Recompute aspect from change in canvas size
            this._canvasResized = this.scene.canvas.on("boundary", this._scheduleUpdate, this);

            this.fovy = cfg.fovy;
            this.near = cfg.near;
            this.far = cfg.far;
        },

        _update: function () {

            var canvas = this.scene.canvas.canvas;
            var aspect = canvas.clientWidth / canvas.clientHeight;

            this.matrix = xeogl.math.perspectiveMat4(this._fovy * (Math.PI / 180.0), aspect, this._near, this._far, this._matrix);
        },

        _props: {

            /**
             * The angle, in degrees on the Y-axis, of this Perspective's field-of-view.
             *
             * Fires a {{#crossLink "Perspective/fovy:event"}}{{/crossLink}} event on change.
             *
             * @property fovy
             * @default 60.0
             * @type Number
             */
            fovy: {

                set: function (value) {

                    this._fovy = (value !== undefined && value !== null) ? value : 60.0;

                    this._renderer.imageDirty = true;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Perspective's {{#crossLink "Perspective/fovy:property"}}{{/crossLink}} property changes.
                     *
                     * @event fovy
                     * @param value The property's new value
                     */
                    this.fire("fovy", this._fovy);
                },

                get: function () {
                    return this._fovy;
                }
            },

            /**
             * Position of this Perspective's near plane on the positive View-space Z-axis.
             *
             * Fires a {{#crossLink "Perspective/near:event"}}{{/crossLink}} event on change.
             *
             * @property near
             * @default 0.1
             * @type Number
             */
            near: {

                set: function (value) {

                    this._near = (value !== undefined && value !== null) ? value : 0.1;

                    this._renderer.imageDirty = true;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Perspective's   {{#crossLink "Perspective/near:property"}}{{/crossLink}} property changes.
                     * @event near
                     * @param value The property's new value
                     */
                    this.fire("near", this._near);
                },

                get: function () {
                    return this._near;
                }
            },

            /**
             * Position of this Perspective's far plane on the positive View-space Z-axis.
             *
             * Fires a {{#crossLink "Perspective/far:event"}}{{/crossLink}} event on change.
             *
             * @property far
             * @default 10000.0
             * @type Number
             */
            far: {

                set: function (value) {

                    this._far = (value !== undefined && value !== null) ? value : 10000;

                    this._renderer.imageDirty = true;

                    this._scheduleUpdate(0); // Ensure matrix built on next "tick"

                    /**
                     * Fired whenever this Perspective's  {{#crossLink "Perspective/far:property"}}{{/crossLink}} property changes.
                     *
                     * @event far
                     * @param value The property's new value
                     */
                    this.fire("far", this._far);
                },

                get: function () {
                    return this._far;
                }
            }
        },

        _getJSON: function () {
            var json = {
                fovy: this._fovy,
                near: this._near,
                far: this._far
            };
            if (this._parent) {
                json.parent = this._parent.id;
            }
            return json;
        },

        _destroy: function () {

            this._super();

            this.scene.canvas.off(this._canvasResized);
        }
    });

})();
xeogl.version="1.0.0";